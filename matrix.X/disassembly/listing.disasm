Disassembly Listing for matrix
Generated From:

---  C:/MCC18/v3_39/src/traditional/stdclib/sincos.c  ---------------------------------------------------
1982  CFD9     MOVFF FSR2L, POSTINC1
1984  FFE6     NOP
1986  CFDA     MOVFF FSR2H, POSTINC1
1988  FFE6     NOP
198A  CFE1     MOVFF FSR1L, FSR2L
198C  FFD9     NOP
198E  CFE2     MOVFF FSR1H, FSR2H
1990  FFDA     NOP
1992  0E22     MOVLW 0x22
1994  24E1     ADDWF FSR1L, W, ACCESS
1996  E302     BNC 0x199C
1998  68E1     SETF FSR1L, ACCESS
199A  52E6     MOVF POSTINC1, F, ACCESS
199C  6EE1     MOVWF FSR1L, ACCESS
199E  50D9     MOVF FSR2L, W, ACCESS
19A0  0F13     ADDLW 0x13
19A2  6EE6     MOVWF POSTINC1, ACCESS
19A4  0E00     MOVLW 0x0
19A6  20DA     ADDWFC FSR2H, W, ACCESS
19A8  6EE6     MOVWF POSTINC1, ACCESS
19AA  DAA8     RCALL __pa_20
19AC  EC96     CALL 0x1F2C, 0
19AE  F00F     NOP
19B0  6E00     MOVWF __tmp_0, ACCESS
19B2  0E06     MOVLW 0x6
19B4  5CE1     SUBWF FSR1L, W, ACCESS
19B6  E202     BC 0x19BC
19B8  6AE1     CLRF FSR1L, ACCESS
19BA  52E5     MOVF POSTDEC1, F, ACCESS
19BC  6EE1     MOVWF FSR1L, ACCESS
19BE  5000     MOVF __tmp_0, W, ACCESS
19C0  6EE7     MOVWF INDF1, ACCESS
19C2  0E0E     MOVLW 0xE
19C4  CFE7     MOVFF INDF1, PLUSW2
19C6  FFDB     NOP
1EFC  50D9     MOVF FSR2L, W, ACCESS
1EFE  0FFA     ADDLW 0xFA
1F00  6EE9     MOVWF FSR0L, ACCESS
1F02  0EFF     MOVLW 0xFF
1F04  EFEF     GOTO 0x1DDE
1F06  F00E     NOP
19C8  50DB     MOVF PLUSW2, W, ACCESS
19CA  0B84     ANDLW 0x84
19CC  E00C     BZ 0x19E6
19CE  0E21     MOVLW 0x21
19D0  0100     MOVLB 0x0
19D2  6FF9     MOVWF errno, BANKED
19D4  6BFA     CLRF 0xFA, BANKED
19D6  0E0F     MOVLW 0xF
19D8  68DB     SETF PLUSW2, ACCESS
19DA  0E10     MOVLW 0x10
19DC  68DB     SETF PLUSW2, ACCESS
19DE  0E11     MOVLW 0x11
19E0  68DB     SETF PLUSW2, ACCESS
19E2  0E7F     MOVLW 0x7F
19E4  D06E     BRA 0x1AC2
19E6  DA8A     RCALL __pa_20
19E8  DA36     RCALL __pa_11
19EA  0E02     MOVLW 0x2
19EC  C01F     MOVFF 0x1F, PLUSW2
19EE  FFDB     NOP
19F0  0E03     MOVLW 0x3
19F2  C020     MOVFF 0x20, PLUSW2
19F4  FFDB     NOP
19F6  0E04     MOVLW 0x4
19F8  C021     MOVFF 0x21, PLUSW2
19FA  FFDB     NOP
19FC  0E05     MOVLW 0x5
19FE  C022     MOVFF 0x22, PLUSW2
1A00  FFDB     NOP
1E56  ECE6     CALL 0x21CC, 0
1E58  F010     NOP
1E5A  52E5     MOVF POSTDEC1, F, ACCESS
1E5C  52E5     MOVF POSTDEC1, F, ACCESS
1E5E  52E5     MOVF POSTDEC1, F, ACCESS
1E60  52E5     MOVF POSTDEC1, F, ACCESS
1E62  0012     RETURN 0
1A02  DA87     RCALL __pa_22
1A04  6A25     CLRF 0x25, ACCESS
1A06  0E10     MOVLW 0x10
1A08  6E26     MOVWF 0x26, ACCESS
1A0A  0E49     MOVLW 0x49
1A0C  6E27     MOVWF 0x27, ACCESS
1A0E  0E46     MOVLW 0x46
1A10  DA14     RCALL __pa_9
1A12  ECF4     CALL 0x15E8, 0
1A14  F00A     NOP
1A16  0A01     XORLW 0x1
1A18  E032     BZ 0x1A7E
1E3A  6E28     MOVWF 0x28, ACCESS
1E3C  C000     MOVFF __tmp_0, 0x20
1E3E  F020     NOP
1E40  EF66     GOTO 0x1ECC
1E42  F00F     NOP
1ECC  C001     MOVFF 0x1, 0x21
1ECE  F021     NOP
1ED0  C002     MOVFF x, 0x22
1ED2  F022     NOP
1ED4  C003     MOVFF y, 0x23
1ED6  F023     NOP
1ED8  0012     RETURN 0
1A1A  DA7B     RCALL __pa_22
1A1C  DA67     RCALL __pa_19
1A1E  DA0D     RCALL __pa_9
1A20  EC08     CALL 0x1810, 0
1A22  F00C     NOP
1A24  D9BF     RCALL __pa_2
1EEC  0EDB     MOVLW 0xDB
1EEE  6E25     MOVWF 0x25, ACCESS
1EF0  0E0F     MOVLW 0xF
1EF2  6E26     MOVWF 0x26, ACCESS
1EF4  0EC9     MOVLW 0xC9
1EF6  6E27     MOVWF 0x27, ACCESS
1EF8  0E40     MOVLW 0x40
1EFA  0012     RETURN 0
1A26  0E06     MOVLW 0x6
1A28  CFDB     MOVFF PLUSW2, 0x20
1A2A  F020     NOP
1A2C  0E07     MOVLW 0x7
1A2E  CFDB     MOVFF PLUSW2, 0x21
1A30  F021     NOP
1A32  0E08     MOVLW 0x8
1A34  CFDB     MOVFF PLUSW2, 0x22
1A36  F022     NOP
1A38  0E09     MOVLW 0x9
1A3A  CFDB     MOVFF PLUSW2, 0x23
1A3C  F023     NOP
1A3E  EC8A     CALL 0x1914, 0
1A40  F00C     NOP
1A42  ECEF     CALL 0x17DE, 0
1A44  F00B     NOP
1A46  D9AE     RCALL __pa_2
1A48  DA64     RCALL __pa_22
1A4A  0E06     MOVLW 0x6
1A4C  CFDB     MOVFF PLUSW2, 0x8
1A4E  F008     NOP
1A50  0E07     MOVLW 0x7
1A52  CFDB     MOVFF PLUSW2, 0x9
1A54  F009     NOP
1A56  0E08     MOVLW 0x8
1A58  CFDB     MOVFF PLUSW2, f
1A5A  F00A     NOP
1A5C  0E09     MOVLW 0x9
1A5E  CFDB     MOVFF PLUSW2, times
1A60  F00B     NOP
1A62  DA44     RCALL __pa_19
1A64  6E28     MOVWF 0x28, ACCESS
1A66  C008     MOVFF 0x8, 0x20
1A68  F020     NOP
1A6A  C009     MOVFF 0x9, 0x21
1A6C  F021     NOP
1A6E  C00A     MOVFF f, 0x22
1A70  F022     NOP
1A72  C00B     MOVFF times, 0x23
1A74  F023     NOP
1A76  DA48     RCALL __pa_21
1A78  EC3C     CALL 0x1278, 0
1A7A  F009     NOP
1A7C  D9C4     RCALL __pa_7
1DC8  0E02     MOVLW 0x2
1DCA  CFDB     MOVFF PLUSW2, __tmp_0
1DCC  F000     NOP
1DCE  0E03     MOVLW 0x3
1DD0  CFDB     MOVFF PLUSW2, 0x1
1DD2  F001     NOP
1DD4  0E04     MOVLW 0x4
1DD6  CFDB     MOVFF PLUSW2, x
1DD8  F002     NOP
1DDA  0E05     MOVLW 0x5
1DDC  0012     RETURN 0
1E06  0E02     MOVLW 0x2
1E08  C020     MOVFF 0x20, PLUSW2
1E0A  FFDB     NOP
1E0C  0E03     MOVLW 0x3
1E0E  C021     MOVFF 0x21, PLUSW2
1E10  FFDB     NOP
1E12  0E04     MOVLW 0x4
1E14  C022     MOVFF 0x22, PLUSW2
1E16  FFDB     NOP
1E18  0E05     MOVLW 0x5
1E1A  C023     MOVFF 0x23, PLUSW2
1E1C  FFDB     NOP
1E1E  0012     RETURN 0
1F08  ECD3     CALL 0x13A6, 0
1F0A  F009     NOP
1F0C  DF73     RCALL __pa_6
1F0E  EFDF     GOTO 0x1DBE
1F10  F00E     NOP
1F12  DF5A     RCALL __pa_4
1F14  CFDB     MOVFF PLUSW2, y
1F16  F003     NOP
1F18  0012     RETURN 0
1A7E  0EF9     MOVLW 0xF9
1A80  50DB     MOVF PLUSW2, W, ACCESS
1A82  E012     BZ 0x1AA8
1A84  0E0E     MOVLW 0xE
1A86  04DB     DECF PLUSW2, W, ACCESS
1A88  E10B     BNZ 0x1AA0
1A8A  0EFA     MOVLW 0xFA
1A8C  CFDB     MOVFF PLUSW2, __tmp_0
1A8E  F000     NOP
1A90  0EFB     MOVLW 0xFB
1A92  CFDB     MOVFF PLUSW2, 0x1
1A94  F001     NOP
1A96  0EFC     MOVLW 0xFC
1A98  CFDB     MOVFF PLUSW2, x
1A9A  F002     NOP
1A9C  0EFD     MOVLW 0xFD
1A9E  D152     BRA 0x1D44
1AA0  D967     RCALL __pa_0
1AA2  6A27     CLRF 0x27, ACCESS
1AA4  D9F8     RCALL __pa_15
1D70  D87C     RCALL __pa_13
1D72  0E83     MOVLW 0x83
1D74  6E25     MOVWF 0x25, ACCESS
1D76  0EF9     MOVLW 0xF9
1D78  6E26     MOVWF 0x26, ACCESS
1D7A  0EA2     MOVLW 0xA2
1D7C  6E27     MOVWF 0x27, ACCESS
1D7E  0E3E     MOVLW 0x3E
1D80  D8CF     RCALL __pa_24
1D82  6A25     CLRF 0x25, ACCESS
1D84  6A26     CLRF 0x26, ACCESS
1D86  0012     RETURN 0
1E6A  0E02     MOVLW 0x2
1E6C  CFDB     MOVFF PLUSW2, t
1E6E  F004     NOP
1E70  0E03     MOVLW 0x3
1E72  CFDB     MOVFF PLUSW2, i
1E74  F005     NOP
1E76  0E04     MOVLW 0x4
1E78  CFDB     MOVFF PLUSW2, romid
1E7A  F006     NOP
1E7C  0E05     MOVLW 0x5
1E7E  CFDB     MOVFF PLUSW2, move
1E80  F007     NOP
1E82  0012     RETURN 0
1E84  C020     MOVFF 0x20, __tmp_0
1E86  F000     NOP
1E88  C021     MOVFF 0x21, 0x1
1E8A  F001     NOP
1E8C  C022     MOVFF 0x22, x
1E8E  F002     NOP
1E90  C023     MOVFF 0x23, y
1E92  F003     NOP
1E94  0012     RETURN 0
1E96  0E3F     MOVLW 0x3F
1E98  DFE5     RCALL __pa_12
1E9A  EC5B     CALL 0x18B6, 0
1E9C  F00C     NOP
1E9E  C021     MOVFF 0x21, POSTINC2
1EA0  FFDE     NOP
1EA2  C022     MOVFF 0x22, POSTDEC2
1EA4  FFDD     NOP
1EBA  C004     MOVFF t, 0x20
1EBC  F020     NOP
1EBE  C005     MOVFF i, 0x21
1EC0  F021     NOP
1EC2  C006     MOVFF romid, 0x22
1EC4  F022     NOP
1EC6  C007     MOVFF move, 0x23
1EC8  F023     NOP
1ECA  0012     RETURN 0
1EA6  0E00     MOVLW 0x0
1EA8  CFDF     MOVFF INDF2, 0x21
1EAA  F021     NOP
1EAC  0E01     MOVLW 0x1
1EAE  CFDB     MOVFF PLUSW2, 0x22
1EB0  F022     NOP
1EB2  ECDA     CALL 0x17B4, 0
1EB4  F00B     NOP
1EB6  EFD2     GOTO 0x1DA4
1EB8  F00E     NOP
1AA6  D047     BRA 0x1B36
1AA8  0E0E     MOVLW 0xE
1AAA  04DB     DECF PLUSW2, W, ACCESS
1AAC  E119     BNZ 0x1AE0
1AAE  0E0F     MOVLW 0xF
1AB0  6ADB     CLRF PLUSW2, ACCESS
1AB2  0E10     MOVLW 0x10
1AB4  6ADB     CLRF PLUSW2, ACCESS
1AB6  0E80     MOVLW 0x80
1AB8  6EF3     MOVWF PRODL, ACCESS
1ABA  0E11     MOVLW 0x11
1ABC  CFF3     MOVFF PRODL, PLUSW2
1ABE  FFDB     NOP
1AC0  0E3F     MOVLW 0x3F
1AC2  6EF3     MOVWF PRODL, ACCESS
1AC4  0E12     MOVLW 0x12
1AC6  CFF3     MOVFF PRODL, PLUSW2
1AC8  FFDB     NOP
1ACA  0E0F     MOVLW 0xF
1ACC  CFDB     MOVFF PLUSW2, __tmp_0
1ACE  F000     NOP
1AD0  0E10     MOVLW 0x10
1AD2  CFDB     MOVFF PLUSW2, 0x1
1AD4  F001     NOP
1AD6  0E11     MOVLW 0x11
1AD8  CFDB     MOVFF PLUSW2, x
1ADA  F002     NOP
1ADC  0E12     MOVLW 0x12
1ADE  D132     BRA 0x1D44
1AE0  0E19     MOVLW 0x19
1AE2  6ADB     CLRF PLUSW2, ACCESS
1AE4  D945     RCALL __pa_0
1AE6  0E80     MOVLW 0x80
1AE8  6E27     MOVWF 0x27, ACCESS
1AEA  D9D5     RCALL __pa_15
1E64  6E28     MOVWF 0x28, ACCESS
1E66  EF3D     GOTO 0x127A
1E68  F009     NOP
1DA4  0E06     MOVLW 0x6
1DA6  C020     MOVFF 0x20, PLUSW2
1DA8  FFDB     NOP
1DAA  0E07     MOVLW 0x7
1DAC  C021     MOVFF 0x21, PLUSW2
1DAE  FFDB     NOP
1DB0  0E08     MOVLW 0x8
1DB2  C022     MOVFF 0x22, PLUSW2
1DB4  FFDB     NOP
1DB6  0E09     MOVLW 0x9
1DB8  C023     MOVFF 0x23, PLUSW2
1DBA  FFDB     NOP
1DBC  0012     RETURN 0
1AEC  6A00     CLRF __tmp_0, ACCESS
1AEE  6A01     CLRF 0x1, ACCESS
1AF0  6A02     CLRF x, ACCESS
1AF2  0E3F     MOVLW 0x3F
1AF4  6E03     MOVWF y, ACCESS
1AF6  50D9     MOVF FSR2L, W, ACCESS
1AF8  0F06     ADDLW 0x6
1AFA  6EE9     MOVWF FSR0L, ACCESS
1AFC  0E00     MOVLW 0x0
1AFE  20DA     ADDWFC FSR2H, W, ACCESS
1B00  6EEA     MOVWF FSR0H, ACCESS
1B02  CFEE     MOVFF POSTINC0, 0x20
1B04  F020     NOP
1B06  CFEE     MOVFF POSTINC0, 0x21
1B08  F021     NOP
1B0A  CFEE     MOVFF POSTINC0, 0x22
1B0C  F022     NOP
1B0E  CFEF     MOVFF INDF0, 0x23
1B10  F023     NOP
1B12  C000     MOVFF __tmp_0, 0x25
1B14  F025     NOP
1B16  C001     MOVFF 0x1, 0x26
1B18  F026     NOP
1B1A  C002     MOVFF x, 0x27
1B1C  F027     NOP
1B1E  C003     MOVFF y, 0x28
1B20  F028     NOP
1B22  EC3C     CALL 0x1278, 0
1B24  F009     NOP
1B26  C023     MOVFF 0x23, POSTDEC0
1B28  FFED     NOP
1B2A  C022     MOVFF 0x22, POSTDEC0
1B2C  FFED     NOP
1B2E  C021     MOVFF 0x21, POSTDEC0
1B30  FFED     NOP
1B32  C020     MOVFF 0x20, INDF0
1B34  FFEF     NOP
1B36  50DF     MOVF INDF2, W, ACCESS
1B38  0B01     ANDLW 0x1
1B3A  E00A     BZ 0x1B50
1B3C  0E19     MOVLW 0x19
1B3E  50DB     MOVF PLUSW2, W, ACCESS
1B40  E002     BZ 0x1B46
1B42  0E00     MOVLW 0x0
1B44  D001     BRA 0x1B48
1B46  0E01     MOVLW 0x1
1B48  6EE7     MOVWF INDF1, ACCESS
1B4A  0E19     MOVLW 0x19
1B4C  CFE7     MOVFF INDF1, PLUSW2
1B4E  FFDB     NOP
1B50  D98C     RCALL __pa_13
1B52  0E06     MOVLW 0x6
1B54  CFDB     MOVFF PLUSW2, 0xC
1B56  F00C     NOP
1B58  0E07     MOVLW 0x7
1B5A  CFDB     MOVFF PLUSW2, 0xD
1B5C  F00D     NOP
1B5E  0E08     MOVLW 0x8
1B60  CFDB     MOVFF PLUSW2, type
1B62  F00E     NOP
1B64  0E09     MOVLW 0x9
1B66  CFDB     MOVFF PLUSW2, obj1
1B68  F00F     NOP
1B6A  6A25     CLRF 0x25, ACCESS
1B6C  6A26     CLRF 0x26, ACCESS
1B6E  0E49     MOVLW 0x49
1B70  6E27     MOVWF 0x27, ACCESS
1B72  0E40     MOVLW 0x40
1B74  6E28     MOVWF 0x28, ACCESS
1B76  C00C     MOVFF 0xC, 0x20
1B78  F020     NOP
1B7A  C00D     MOVFF 0xD, 0x21
1B7C  F021     NOP
1B7E  C00E     MOVFF type, 0x22
1B80  F022     NOP
1B82  C00F     MOVFF obj1, 0x23
1B84  F023     NOP
1B86  ECD3     CALL 0x13A6, 0
1B88  F009     NOP
1B8A  D95C     RCALL __pa_10
1B8C  D9A6     RCALL __pa_18
1B8E  D995     RCALL __pa_16
1B90  EC3C     CALL 0x1278, 0
1B92  F009     NOP
1B94  D977     RCALL __pa_14
1B96  0E06     MOVLW 0x6
1B98  CFDB     MOVFF PLUSW2, scaling
1B9A  F014     NOP
1B9C  0E07     MOVLW 0x7
1B9E  CFDB     MOVFF PLUSW2, 0x15
1BA0  F015     NOP
1BA2  0E08     MOVLW 0x8
1BA4  CFDB     MOVFF PLUSW2, 0x16
1BA6  F016     NOP
1BA8  0E09     MOVLW 0x9
1BAA  CFDB     MOVFF PLUSW2, 0x17
1BAC  F017     NOP
1BAE  0E22     MOVLW 0x22
1BB0  6E25     MOVWF 0x25, ACCESS
1BB2  0EAA     MOVLW 0xAA
1BB4  6E26     MOVWF 0x26, ACCESS
1BB6  0E7D     MOVLW 0x7D
1BB8  6E27     MOVWF 0x27, ACCESS
1BBA  0E3A     MOVLW 0x3A
1BBC  6E28     MOVWF 0x28, ACCESS
1BBE  C014     MOVFF scaling, 0x20
1BC0  F020     NOP
1BC2  C015     MOVFF 0x15, 0x21
1BC4  F021     NOP
1BC6  C016     MOVFF 0x16, 0x22
1BC8  F022     NOP
1BCA  C017     MOVFF 0x17, 0x23
1BCC  F023     NOP
1BCE  ECD3     CALL 0x13A6, 0
1BD0  F009     NOP
1BD2  C020     MOVFF 0x20, rotation
1BD4  F010     NOP
1BD6  C021     MOVFF 0x21, 0x11
1BD8  F011     NOP
1BDA  C022     MOVFF 0x22, 0x12
1BDC  F012     NOP
1BDE  C023     MOVFF 0x23, xIEEE
1BE0  F013     NOP
1BE2  D8ED     RCALL __pa_3
1BE4  EC3C     CALL 0x1278, 0
1BE6  F009     NOP
1BE8  0E0A     MOVLW 0xA
1BEA  C020     MOVFF 0x20, PLUSW2
1BEC  FFDB     NOP
1BEE  0E0B     MOVLW 0xB
1BF0  C021     MOVFF 0x21, PLUSW2
1BF2  FFDB     NOP
1BF4  0E0C     MOVLW 0xC
1BF6  C022     MOVFF 0x22, PLUSW2
1BF8  FFDB     NOP
1BFA  0E0D     MOVLW 0xD
1BFC  C023     MOVFF 0x23, PLUSW2
1BFE  FFDB     NOP
1DBE  D88D     RCALL __pa_18
1DC0  C000     MOVFF __tmp_0, 0x20
1DC2  F020     NOP
1DC4  EF66     GOTO 0x1ECC
1DC6  F00F     NOP
1E44  C020     MOVFF 0x20, 0x8
1E46  F008     NOP
1E48  C021     MOVFF 0x21, 0x9
1E4A  F009     NOP
1E4C  C022     MOVFF 0x22, f
1E4E  F00A     NOP
1E50  C023     MOVFF 0x23, times
1E52  F00B     NOP
1E54  0012     RETURN 0
1EDA  C020     MOVFF 0x20, 0x25
1EDC  F025     NOP
1EDE  C021     MOVFF 0x21, 0x26
1EE0  F026     NOP
1EE2  C022     MOVFF 0x22, 0x27
1EE4  F027     NOP
1EE6  C023     MOVFF 0x23, 0x28
1EE8  F028     NOP
1EEA  0012     RETURN 0
1C00  50D9     MOVF FSR2L, W, ACCESS
1C02  0F0A     ADDLW 0xA
1C04  6EE9     MOVWF FSR0L, ACCESS
1C06  0E00     MOVLW 0x0
1C08  D8EA     RCALL __pa_5
1C0A  D925     RCALL __pa_11
1C0C  C01F     MOVFF 0x1F, __tmp_0
1C0E  F000     NOP
1C10  C020     MOVFF 0x20, 0x1
1C12  F001     NOP
1C14  C021     MOVFF 0x21, x
1C16  F002     NOP
1C18  C022     MOVFF 0x22, y
1C1A  F003     NOP
1C1C  6A25     CLRF 0x25, ACCESS
1C1E  6A26     CLRF 0x26, ACCESS
1C20  0E80     MOVLW 0x80
1C22  6E27     MOVWF 0x27, ACCESS
1C24  0E39     MOVLW 0x39
1C26  6E28     MOVWF 0x28, ACCESS
1C28  C01F     MOVFF 0x1F, 0x20
1C2A  F020     NOP
1C2C  D94F     RCALL __pa_17
1C2E  ECF4     CALL 0x15E8, 0
1C30  F00A     NOP
1C32  0A01     XORLW 0x1
1C34  E113     BNZ 0x1C5C
1DDE  20DA     ADDWFC FSR2H, W, ACCESS
1DE0  6EEA     MOVWF FSR0H, ACCESS
1DE2  CFEE     MOVFF POSTINC0, POSTINC1
1DE4  FFE6     NOP
1DE6  CFEE     MOVFF POSTINC0, POSTINC1
1DE8  FFE6     NOP
1DEA  CFEE     MOVFF POSTINC0, POSTINC1
1DEC  FFE6     NOP
1DEE  CFEF     MOVFF INDF0, POSTINC1
1DF0  FFE6     NOP
1DF2  0012     RETURN 0
1C36  50D9     MOVF FSR2L, W, ACCESS
1C38  0F0A     ADDLW 0xA
1C3A  6EE9     MOVWF FSR0L, ACCESS
1C3C  0E00     MOVLW 0x0
1C3E  20DA     ADDWFC FSR2H, W, ACCESS
1C40  6EEA     MOVWF FSR0H, ACCESS
1C42  0E02     MOVLW 0x2
1C44  CFEE     MOVFF POSTINC0, PLUSW2
1C46  FFDB     NOP
1C48  0E03     MOVLW 0x3
1C4A  CFEE     MOVFF POSTINC0, PLUSW2
1C4C  FFDB     NOP
1C4E  0E04     MOVLW 0x4
1C50  CFEE     MOVFF POSTINC0, PLUSW2
1C52  FFDB     NOP
1C54  0E05     MOVLW 0x5
1C56  CFEE     MOVFF POSTINC0, PLUSW2
1C58  FFDB     NOP
1C5A  D068     BRA 0x1D2C
1C5C  D8E1     RCALL __pa_8
1C5E  0E0A     MOVLW 0xA
1C60  CFDB     MOVFF PLUSW2, 0x25
1C62  F025     NOP
1C64  0E0B     MOVLW 0xB
1C66  CFDB     MOVFF PLUSW2, 0x26
1C68  F026     NOP
1C6A  0E0C     MOVLW 0xC
1C6C  CFDB     MOVFF PLUSW2, 0x27
1C6E  F027     NOP
1C70  0E0D     MOVLW 0xD
1C72  CFDB     MOVFF PLUSW2, 0x28
1C74  F028     NOP
1C76  ECD3     CALL 0x13A6, 0
1C78  F009     NOP
1C7A  0E1A     MOVLW 0x1A
1C7C  C020     MOVFF 0x20, PLUSW2
1C7E  FFDB     NOP
1C80  0E1B     MOVLW 0x1B
1C82  C021     MOVFF 0x21, PLUSW2
1C84  FFDB     NOP
1C86  0E1C     MOVLW 0x1C
1C88  C022     MOVFF 0x22, PLUSW2
1C8A  FFDB     NOP
1C8C  0E1D     MOVLW 0x1D
1C8E  C023     MOVFF 0x23, PLUSW2
1C90  FFDB     NOP
1E20  0E0A     MOVLW 0xA
1E22  CFDB     MOVFF PLUSW2, 0x20
1E24  F020     NOP
1E26  0E0B     MOVLW 0xB
1E28  CFDB     MOVFF PLUSW2, 0x21
1E2A  F021     NOP
1E2C  0E0C     MOVLW 0xC
1E2E  CFDB     MOVFF PLUSW2, 0x22
1E30  F022     NOP
1E32  0E0D     MOVLW 0xD
1E34  CFDB     MOVFF PLUSW2, 0x23
1E36  F023     NOP
1E38  0012     RETURN 0
1C92  0E5B     MOVLW 0x5B
1C94  6E20     MOVWF 0x20, ACCESS
1C96  0E9C     MOVLW 0x9C
1C98  6E21     MOVWF 0x21, ACCESS
1C9A  0E2E     MOVLW 0x2E
1C9C  6E22     MOVWF 0x22, ACCESS
1C9E  0E36     MOVLW 0x36
1CA0  6E23     MOVWF 0x23, ACCESS
1CA2  D872     RCALL __pa_1
1CA4  D8CF     RCALL __pa_10
1CA6  0E22     MOVLW 0x22
1CA8  6E25     MOVWF 0x25, ACCESS
1CAA  0EB2     MOVLW 0xB2
1CAC  6E26     MOVWF 0x26, ACCESS
1CAE  0E4F     MOVLW 0x4F
1CB0  6E27     MOVWF 0x27, ACCESS
1CB2  0EB9     MOVLW 0xB9
1CB4  D932     RCALL __pa_23
1CB6  D89E     RCALL __pa_6
1CB8  0E3E     MOVLW 0x3E
1CBA  6E25     MOVWF 0x25, ACCESS
1CBC  0E87     MOVLW 0x87
1CBE  6E26     MOVWF 0x26, ACCESS
1CC0  0E08     MOVLW 0x8
1CC2  6E27     MOVWF 0x27, ACCESS
1CC4  0E3C     MOVLW 0x3C
1CC6  D929     RCALL __pa_23
1CC8  D8DD     RCALL __pa_14
1CCA  0EA4     MOVLW 0xA4
1CCC  6E25     MOVWF 0x25, ACCESS
1CCE  0EAA     MOVLW 0xAA
1CD0  6E26     MOVWF 0x26, ACCESS
1CD2  0E2A     MOVLW 0x2A
1CD4  6E27     MOVWF 0x27, ACCESS
1CD6  0EBE     MOVLW 0xBE
1CD8  D920     RCALL __pa_23
1CDA  0E1E     MOVLW 0x1E
1CDC  C020     MOVFF 0x20, PLUSW2
1CDE  FFDB     NOP
1CE0  0E1F     MOVLW 0x1F
1CE2  C021     MOVFF 0x21, PLUSW2
1CE4  FFDB     NOP
1CE6  0E20     MOVLW 0x20
1CE8  C022     MOVFF 0x22, PLUSW2
1CEA  FFDB     NOP
1CEC  0E21     MOVLW 0x21
1CEE  C023     MOVFF 0x23, PLUSW2
1CF0  FFDB     NOP
1D88  0E1A     MOVLW 0x1A
1D8A  CFDB     MOVFF PLUSW2, 0x25
1D8C  F025     NOP
1D8E  0E1B     MOVLW 0x1B
1D90  CFDB     MOVFF PLUSW2, 0x26
1D92  F026     NOP
1D94  0E1C     MOVLW 0x1C
1D96  CFDB     MOVFF PLUSW2, 0x27
1D98  F027     NOP
1D9A  0E1D     MOVLW 0x1D
1D9C  CFDB     MOVFF PLUSW2, 0x28
1D9E  F028     NOP
1DA0  EFD3     GOTO 0x13A6
1DA2  F009     NOP
1F1A  DFA4     RCALL __pa_12
1F1C  EFC4     GOTO 0x1D88
1F1E  F00E     NOP
1CF2  0E0A     MOVLW 0xA
1CF4  CFDB     MOVFF PLUSW2, __tmp_0
1CF6  F000     NOP
1CF8  0E0B     MOVLW 0xB
1CFA  CFDB     MOVFF PLUSW2, 0x1
1CFC  F001     NOP
1CFE  0E0C     MOVLW 0xC
1D00  CFDB     MOVFF PLUSW2, x
1D02  F002     NOP
1D04  0E0D     MOVLW 0xD
1D06  CFDB     MOVFF PLUSW2, y
1D08  F003     NOP
1D0A  D88A     RCALL __pa_8
1D0C  0E1E     MOVLW 0x1E
1D0E  CFDB     MOVFF PLUSW2, 0x25
1D10  F025     NOP
1D12  0E1F     MOVLW 0x1F
1D14  CFDB     MOVFF PLUSW2, 0x26
1D16  F026     NOP
1D18  0E20     MOVLW 0x20
1D1A  CFDB     MOVFF PLUSW2, 0x27
1D1C  F027     NOP
1D1E  0E21     MOVLW 0x21
1D20  CFDB     MOVFF PLUSW2, 0x28
1D22  F028     NOP
1D24  D8F1     RCALL __pa_21
1D26  EC3D     CALL 0x127A, 0
1D28  F009     NOP
1D2A  D86D     RCALL __pa_7
1DF4  C020     MOVFF 0x20, t
1DF6  F004     NOP
1DF8  C021     MOVFF 0x21, i
1DFA  F005     NOP
1DFC  C022     MOVFF 0x22, romid
1DFE  F006     NOP
1E00  C023     MOVFF 0x23, move
1E02  F007     NOP
1E04  0012     RETURN 0
1D2C  0E19     MOVLW 0x19
1D2E  50DB     MOVF PLUSW2, W, ACCESS
1D32  D89B     RCALL __pa_13
1D30  E008     BZ 0x1D42
1D34  6A25     CLRF 0x25, ACCESS
1D36  6A26     CLRF 0x26, ACCESS
1D38  0E80     MOVLW 0x80
1D3A  6E27     MOVWF 0x27, ACCESS
1D3C  0EBF     MOVLW 0xBF
1D3E  D8F0     RCALL __pa_24
1D40  D003     BRA 0x1D48
1D42  D842     RCALL __pa_4
1D44  CFDB     MOVFF PLUSW2, y
1D46  F003     NOP
1D48  C000     MOVFF __tmp_0, 0x1F
1D4A  F01F     NOP
1D4C  C001     MOVFF 0x1, 0x20
1D4E  F020     NOP
1D50  C002     MOVFF x, 0x21
1D52  F021     NOP
1D54  C003     MOVFF y, 0x22
1D56  F022     NOP
1F20  6E28     MOVWF 0x28, ACCESS
1F22  DFCB     RCALL __pa_16
1F24  ECD3     CALL 0x13A6, 0
1F26  F009     NOP
1F28  EF42     GOTO 0x1E84
1F2A  F00F     NOP
1D58  0E22     MOVLW 0x22
1D5A  5CE1     SUBWF FSR1L, W, ACCESS
1D5C  E202     BC 0x1D62
1D5E  6AE1     CLRF FSR1L, ACCESS
1D60  52E5     MOVF POSTDEC1, F, ACCESS
1D62  6EE1     MOVWF FSR1L, ACCESS
1D64  52E5     MOVF POSTDEC1, F, ACCESS
1D66  CFE5     MOVFF POSTDEC1, FSR2H
1D68  FFDA     NOP
1D6A  CFE7     MOVFF INDF1, FSR2L
1D6C  FFD9     NOP
1D6E  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/stdclib/sin.c  ------------------------------------------------------
2232  CFD9     MOVFF FSR2L, POSTINC1
2234  FFE6     NOP
2236  CFDA     MOVFF FSR2H, POSTINC1
2238  FFE6     NOP
223A  CFE1     MOVFF FSR1L, FSR2L
223C  FFD9     NOP
223E  CFE2     MOVFF FSR1H, FSR2H
2240  FFDA     NOP
2242  0E01     MOVLW 0x1
2244  6EE6     MOVWF POSTINC1, ACCESS
2246  50D9     MOVF FSR2L, W, ACCESS
2248  0FFA     ADDLW 0xFA
224A  6EE9     MOVWF FSR0L, ACCESS
224C  0EFF     MOVLW 0xFF
224E  20DA     ADDWFC FSR2H, W, ACCESS
2250  6EEA     MOVWF FSR0H, ACCESS
2252  CFEE     MOVFF POSTINC0, POSTINC1
2254  FFE6     NOP
2256  CFEE     MOVFF POSTINC0, POSTINC1
2258  FFE6     NOP
225A  CFEE     MOVFF POSTINC0, POSTINC1
225C  FFE6     NOP
225E  CFEF     MOVFF INDF0, POSTINC1
2260  FFE6     NOP
2262  ECC1     CALL 0x1982, 0
2264  F00C     NOP
2266  6E00     MOVWF __tmp_0, ACCESS
2268  0E05     MOVLW 0x5
226A  5CE1     SUBWF FSR1L, W, ACCESS
226C  E202     BC 0x2272
226E  6AE1     CLRF FSR1L, ACCESS
2270  52E5     MOVF POSTDEC1, F, ACCESS
2272  6EE1     MOVWF FSR1L, ACCESS
2274  5000     MOVF __tmp_0, W, ACCESS
2276  52E5     MOVF POSTDEC1, F, ACCESS
2278  CFE5     MOVFF POSTDEC1, FSR2H
227A  FFDA     NOP
227C  CFE7     MOVFF INDF1, FSR2L
227E  FFD9     NOP
2280  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/stdclib/mcpyp2r.asm  ------------------------------------------------
2318  0EFB     MOVLW 0xFB
231A  CFE3     MOVFF PLUSW1, TBLPTRL
231C  FFF6     NOP
231E  0EFC     MOVLW 0xFC
2320  CFE3     MOVFF PLUSW1, TBLPTRH
2322  FFF7     NOP
2324  0EFD     MOVLW 0xFD
2326  CFE3     MOVFF PLUSW1, TBLPTRU
2328  FFF8     NOP
232A  0EFE     MOVLW 0xFE
232C  CFE3     MOVFF PLUSW1, FSR0L
232E  FFE9     NOP
2330  0EFF     MOVLW 0xFF
2332  CFE3     MOVFF PLUSW1, FSR0H
2334  FFEA     NOP
2336  CFE9     MOVFF FSR0L, PRODL
2338  FFF3     NOP
233A  CFEA     MOVFF FSR0H, PRODH
233C  FFF4     NOP
233E  0EF9     MOVLW 0xF9
2340  50E3     MOVF PLUSW1, W, ACCESS
2342  E103     BNZ _3jContinue
2344  0EFA     MOVLW 0xFA
2346  50E3     MOVF PLUSW1, W, ACCESS
2348  E009     BZ jEnd
234A  0EF9     MOVLW 0xF9
234C  06E3     DECF PLUSW1, F, ACCESS
234E  E202     BC _4jEnd
2350  0EFA     MOVLW 0xFA
2352  06E3     DECF PLUSW1, F, ACCESS
2354  0009     TBLRD*+
2356  CFF5     MOVFF TABLAT, POSTINC0
2358  FFEE     NOP
235A  D7F1     BRA jLoop
235C  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/stdclib/fabs.c  -----------------------------------------------------
21CC  CFD9     MOVFF FSR2L, POSTINC1
21CE  FFE6     NOP
21D0  CFDA     MOVFF FSR2H, POSTINC1
21D2  FFE6     NOP
21D4  CFE1     MOVFF FSR1L, FSR2L
21D6  FFD9     NOP
21D8  CFE2     MOVFF FSR1H, FSR2H
21DA  FFDA     NOP
21DC  52E6     MOVF POSTINC1, F, ACCESS
21DE  52E6     MOVF POSTINC1, F, ACCESS
21E0  50D9     MOVF FSR2L, W, ACCESS
21E2  0FFD     ADDLW 0xFD
21E4  6E00     MOVWF __tmp_0, ACCESS
21E6  0EFF     MOVLW 0xFF
21E8  20DA     ADDWFC FSR2H, W, ACCESS
21EA  C000     MOVFF __tmp_0, POSTINC2
21EC  FFDE     NOP
21EE  6EDD     MOVWF POSTDEC2, ACCESS
21F0  CFDE     MOVFF POSTINC2, FSR0L
21F2  FFE9     NOP
21F4  CFDD     MOVFF POSTDEC2, FSR0H
21F6  FFEA     NOP
21F8  9EEF     BCF INDF0, 7, ACCESS
21FA  0EFA     MOVLW 0xFA
21FC  CFDB     MOVFF PLUSW2, __tmp_0
21FE  F000     NOP
2200  0EFB     MOVLW 0xFB
2202  CFDB     MOVFF PLUSW2, 0x1
2204  F001     NOP
2206  0EFC     MOVLW 0xFC
2208  CFDB     MOVFF PLUSW2, x
220A  F002     NOP
220C  0EFD     MOVLW 0xFD
220E  CFDB     MOVFF PLUSW2, y
2210  F003     NOP
2212  C000     MOVFF __tmp_0, 0x1F
2214  F01F     NOP
2216  C001     MOVFF 0x1, 0x20
2218  F020     NOP
221A  C002     MOVFF x, 0x21
221C  F021     NOP
221E  C003     MOVFF y, 0x22
2220  F022     NOP
2222  52E5     MOVF POSTDEC1, F, ACCESS
2224  52E5     MOVF POSTDEC1, F, ACCESS
2226  52E5     MOVF POSTDEC1, F, ACCESS
2228  CFE5     MOVFF POSTDEC1, FSR2H
222A  FFDA     NOP
222C  CFE7     MOVFF INDF1, FSR2L
222E  FFD9     NOP
2230  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/stdclib/cos.c  ------------------------------------------------------
2282  CFD9     MOVFF FSR2L, POSTINC1
2284  FFE6     NOP
2286  CFDA     MOVFF FSR2H, POSTINC1
2288  FFE6     NOP
228A  CFE1     MOVFF FSR1L, FSR2L
228C  FFD9     NOP
228E  CFE2     MOVFF FSR1H, FSR2H
2290  FFDA     NOP
2292  6AE6     CLRF POSTINC1, ACCESS
2294  50D9     MOVF FSR2L, W, ACCESS
2296  0FFA     ADDLW 0xFA
2298  6EE9     MOVWF FSR0L, ACCESS
229A  0EFF     MOVLW 0xFF
229C  20DA     ADDWFC FSR2H, W, ACCESS
229E  6EEA     MOVWF FSR0H, ACCESS
22A0  CFEE     MOVFF POSTINC0, POSTINC1
22A2  FFE6     NOP
22A4  CFEE     MOVFF POSTINC0, POSTINC1
22A6  FFE6     NOP
22A8  CFEE     MOVFF POSTINC0, POSTINC1
22AA  FFE6     NOP
22AC  CFEF     MOVFF INDF0, POSTINC1
22AE  FFE6     NOP
22B0  ECC1     CALL 0x1982, 0
22B2  F00C     NOP
22B4  6E00     MOVWF __tmp_0, ACCESS
22B6  0E05     MOVLW 0x5
22B8  5CE1     SUBWF FSR1L, W, ACCESS
22BA  E202     BC 0x22C0
22BC  6AE1     CLRF FSR1L, ACCESS
22BE  52E5     MOVF POSTDEC1, F, ACCESS
22C0  6EE1     MOVWF FSR1L, ACCESS
22C2  5000     MOVF __tmp_0, W, ACCESS
22C4  52E5     MOVF POSTDEC1, F, ACCESS
22C6  CFE5     MOVFF POSTDEC1, FSR2H
22C8  FFDA     NOP
22CA  CFE7     MOVFF INDF1, FSR2L
22CC  FFD9     NOP
22CE  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/stdclib/__init.c  ---------------------------------------------------
0006  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/stdclib/UnpkMath.c  -------------------------------------------------
1F2C  CFD9     MOVFF FSR2L, POSTINC1
1F2E  FFE6     NOP
1F30  CFDA     MOVFF FSR2H, POSTINC1
1F32  FFE6     NOP
1F34  CFE1     MOVFF FSR1L, FSR2L
1F36  FFD9     NOP
1F38  CFE2     MOVFF FSR1H, FSR2H
1F3A  FFDA     NOP
1F3C  52E6     MOVF POSTINC1, F, ACCESS
1F3E  6800     SETF __tmp_0, ACCESS
1F40  6801     SETF 0x1, ACCESS
1F42  0E7F     MOVLW 0x7F
1F44  6E02     MOVWF x, ACCESS
1F46  6A03     CLRF y, ACCESS
1F48  50D9     MOVF FSR2L, W, ACCESS
1F4A  0FFA     ADDLW 0xFA
1F4C  6EE9     MOVWF FSR0L, ACCESS
1F4E  0EFF     MOVLW 0xFF
1F50  20DA     ADDWFC FSR2H, W, ACCESS
1F52  6EEA     MOVWF FSR0H, ACCESS
1F54  50EE     MOVF POSTINC0, W, ACCESS
1F56  1600     ANDWF __tmp_0, F, ACCESS
1F58  50EE     MOVF POSTINC0, W, ACCESS
1F5A  1601     ANDWF 0x1, F, ACCESS
1F5C  50EE     MOVF POSTINC0, W, ACCESS
1F5E  1602     ANDWF x, F, ACCESS
1F60  50EE     MOVF POSTINC0, W, ACCESS
1F62  1603     ANDWF y, F, ACCESS
1F64  D86A     RCALL __pa_0
1F66  C000     MOVFF __tmp_0, POSTINC0
1F68  FFEE     NOP
1F6A  C001     MOVFF 0x1, POSTINC0
1F6C  FFEE     NOP
1F6E  C002     MOVFF x, POSTINC0
1F70  FFEE     NOP
1F72  C003     MOVFF y, POSTINC0
1F74  FFEE     NOP
1F76  0EFD     MOVLW 0xFD
1F78  50DB     MOVF PLUSW2, W, ACCESS
1F86  D859     RCALL __pa_0
1F88  0E06     MOVLW 0x6
1F8A  26E9     ADDWF FSR0L, F, ACCESS
1F8C  0E00     MOVLW 0x0
1F8E  22EA     ADDWFC FSR0H, F, ACCESS
1F7A  0B80     ANDLW 0x80
1F7E  0E01     MOVLW 0x1
1F7C  E002     BZ 0x1F82
1F80  D001     BRA 0x1F84
1F82  0E00     MOVLW 0x0
1F84  6EE6     MOVWF POSTINC1, ACCESS
1F90  52E5     MOVF POSTDEC1, F, ACCESS
1F92  50E7     MOVF INDF1, W, ACCESS
1F94  6EEF     MOVWF INDF0, ACCESS
1F96  0EFC     MOVLW 0xFC
1F98  CFDB     MOVFF PLUSW2, __tmp_0
1F9A  F000     NOP
1F9C  0EFD     MOVLW 0xFD
1F9E  CFDB     MOVFF PLUSW2, 0x1
1FA0  F001     NOP
1FA2  90D8     BCF STATUS, 0, ACCESS
1FA4  3600     RLCF __tmp_0, F, ACCESS
1FA6  3601     RLCF 0x1, F, ACCESS
1FA8  0EFC     MOVLW 0xFC
1FAA  C000     MOVFF __tmp_0, PLUSW2
1FAC  FFDB     NOP
1FAE  0EFD     MOVLW 0xFD
1FB0  C001     MOVFF 0x1, PLUSW2
1FB2  FFDB     NOP
1FB4  50DB     MOVF PLUSW2, W, ACCESS
1FB6  6EE6     MOVWF POSTINC1, ACCESS
1FB8  D840     RCALL __pa_0
1FBA  0E04     MOVLW 0x4
1FBC  26E9     ADDWF FSR0L, F, ACCESS
1FBE  0E00     MOVLW 0x0
1FC0  22EA     ADDWFC FSR0H, F, ACCESS
1FC2  52E5     MOVF POSTDEC1, F, ACCESS
1FC4  50E7     MOVF INDF1, W, ACCESS
1FC6  6EEE     MOVWF POSTINC0, ACCESS
1FC8  6AED     CLRF POSTDEC0, ACCESS
1FCA  0EFD     MOVLW 0xFD
1FCC  50DB     MOVF PLUSW2, W, ACCESS
1FCE  6E00     MOVWF __tmp_0, ACCESS
1FD0  6A01     CLRF 0x1, ACCESS
1FD2  0EFF     MOVLW 0xFF
1FD4  1800     XORWF __tmp_0, W, ACCESS
1FD6  E118     BNZ 0x2008
1FD8  5001     MOVF 0x1, W, ACCESS
1FDA  E116     BNZ 0x2008
1FDC  D82E     RCALL __pa_0
1FDE  CFEE     MOVFF POSTINC0, __tmp_0
1FE0  F000     NOP
1FE2  CFEE     MOVFF POSTINC0, 0x1
1FE4  F001     NOP
1FE6  CFEE     MOVFF POSTINC0, x
1FE8  F002     NOP
1FEA  CFEF     MOVFF INDF0, y
1FEC  F003     NOP
1FEE  5000     MOVF __tmp_0, W, ACCESS
1FF0  1001     IORWF 0x1, W, ACCESS
1FF2  1002     IORWF x, W, ACCESS
1FF4  1003     IORWF y, W, ACCESS
1FF6  E006     BZ 0x2004
1FF8  0E21     MOVLW 0x21
1FFA  0100     MOVLB 0x0
1FFC  6FF9     MOVWF errno, BANKED
1FFE  6BFA     CLRF 0xFA, BANKED
2000  0E80     MOVLW 0x80
2002  D00B     BRA 0x201A
2004  0E04     MOVLW 0x4
2006  D009     BRA 0x201A
2008  0EFD     MOVLW 0xFD
200A  50DB     MOVF PLUSW2, W, ACCESS
200C  E108     BNZ 0x201E
200E  D815     RCALL __pa_0
2010  6AEE     CLRF POSTINC0, ACCESS
2012  6AEE     CLRF POSTINC0, ACCESS
2014  6AEE     CLRF POSTINC0, ACCESS
2016  6AEE     CLRF POSTINC0, ACCESS
2018  0E01     MOVLW 0x1
201A  6EDF     MOVWF INDF2, ACCESS
201C  D006     BRA 0x202A
201E  0E02     MOVLW 0x2
2020  6EDF     MOVWF INDF2, ACCESS
2022  D80B     RCALL __pa_0
2024  52EE     MOVF POSTINC0, F, ACCESS
2026  52EE     MOVF POSTINC0, F, ACCESS
2028  8EEE     BSF POSTINC0, 7, ACCESS
203A  0EF8     MOVLW 0xF8
203C  CFDB     MOVFF PLUSW2, FSR0L
203E  FFE9     NOP
2040  0EF9     MOVLW 0xF9
2042  CFDB     MOVFF PLUSW2, FSR0H
2044  FFEA     NOP
2046  0012     RETURN 0
202A  50DF     MOVF INDF2, W, ACCESS
202C  52E5     MOVF POSTDEC1, F, ACCESS
202E  52E5     MOVF POSTDEC1, F, ACCESS
2030  CFE5     MOVFF POSTDEC1, FSR2H
2032  FFDA     NOP
2034  CFE7     MOVFF INDF1, FSR2L
2036  FFD9     NOP
2038  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/startup/c018i.c  ----------------------------------------------------
0000  EF12     GOTO 0x2424
0002  F012     NOP
0004  0012     RETURN 0
2424  EE1D     LFSR 1, 0xD00
2426  F000     NOP
2428  EE2D     LFSR 2, 0xD00
242A  F000     NOP
242C  6AF8     CLRF TBLPTRU, ACCESS
242E  9C1A     BCF g, 6, ACCESS
2430  EC24     CALL 0x2048, 0
2432  F010     NOP
2434  EC03     CALL 0x6, 0
2436  F000     NOP
2438  EC2D     CALL 0xA5A, 0
243A  F005     NOP
243C  D7FB     BRA 0x2434
243E  0012     RETURN 0
2048  0E1E     MOVLW 0x1E
204A  6EF6     MOVWF TBLPTRL, ACCESS
204C  0E00     MOVLW 0x0
204E  6EF7     MOVWF TBLPTRH, ACCESS
2050  0E00     MOVLW 0x0
2052  6EF8     MOVWF TBLPTRU, ACCESS
2054  0100     MOVLB 0x0
2056  0009     TBLRD*+
2058  50F5     MOVF TABLAT, W, ACCESS
205A  6FF4     MOVWF curr_entry, BANKED
205C  0009     TBLRD*+
205E  50F5     MOVF TABLAT, W, ACCESS
2060  6FF5     MOVWF 0xF5, BANKED
2062  E103     BNZ 0x206A
2064  67F4     TSTFSZ curr_entry, BANKED
2066  D001     BRA 0x206A
2068  D03D     BRA 0x20E4
206A  0009     TBLRD*+
206C  50F5     MOVF TABLAT, W, ACCESS
206E  6FEF     MOVWF prom, BANKED
2070  0009     TBLRD*+
2072  50F5     MOVF TABLAT, W, ACCESS
2074  6FF0     MOVWF 0xF0, BANKED
2076  0009     TBLRD*+
2078  50F5     MOVF TABLAT, W, ACCESS
207A  6FF1     MOVWF 0xF1, BANKED
207C  0009     TBLRD*+
207E  0009     TBLRD*+
2080  50F5     MOVF TABLAT, W, ACCESS
2082  6EE9     MOVWF FSR0L, ACCESS
2084  0009     TBLRD*+
2086  50F5     MOVF TABLAT, W, ACCESS
2088  6EEA     MOVWF FSR0H, ACCESS
208A  0009     TBLRD*+
208C  0009     TBLRD*+
208E  0009     TBLRD*+
2090  50F5     MOVF TABLAT, W, ACCESS
2092  6FF2     MOVWF curr_byte, BANKED
2094  0009     TBLRD*+
2096  50F5     MOVF TABLAT, W, ACCESS
2098  6FF3     MOVWF 0xF3, BANKED
209A  0009     TBLRD*+
209C  0009     TBLRD*+
209E  CFF6     MOVFF TBLPTRL, data_ptr
20A0  F0F6     NOP
20A2  CFF7     MOVFF TBLPTRH, 0xF7
20A4  F0F7     NOP
20A6  CFF8     MOVFF TBLPTRU, 0xF8
20A8  F0F8     NOP
20AA  C0EF     MOVFF prom, TBLPTRL
20AC  FFF6     NOP
20AE  C0F0     MOVFF 0xF0, TBLPTRH
20B0  FFF7     NOP
20B2  C0F1     MOVFF 0xF1, TBLPTRU
20B4  FFF8     NOP
20B6  0100     MOVLB 0x0
20B8  53F2     MOVF curr_byte, F, BANKED
20BA  E102     BNZ 0x20C0
20BC  53F3     MOVF 0xF3, F, BANKED
20BE  E007     BZ 0x20CE
20C0  0009     TBLRD*+
20C2  50F5     MOVF TABLAT, W, ACCESS
20C4  6EEE     MOVWF POSTINC0, ACCESS
20C6  07F2     DECF curr_byte, F, BANKED
20C8  E2F8     BC 0x20BA
20CA  07F3     DECF 0xF3, F, BANKED
20CC  D7F9     BRA 0x20C0
20CE  C0F6     MOVFF data_ptr, TBLPTRL
20D0  FFF6     NOP
20D2  C0F7     MOVFF 0xF7, TBLPTRH
20D4  FFF7     NOP
20D6  C0F8     MOVFF 0xF8, TBLPTRU
20D8  FFF8     NOP
20DA  0100     MOVLB 0x0
20DC  07F4     DECF curr_entry, F, BANKED
20DE  0E00     MOVLW 0x0
20E0  5BF5     SUBWFB 0xF5, F, BANKED
20E2  D7BF     BRA 0x2062
20E4  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/proc/p18F45K80.asm  -------------------------------------------------
2404  0E41     MOVLW 0x41
2406  6EF3     MOVWF PRODL, ACCESS
2408  EE00     LFSR 0, 0x0
240A  F000     NOP
240C  0E0E     MOVLW 0xE
240E  D801     RCALL zero_block
2410  0012     RETURN 0
2412  60EA     CPFSLT FSR0H, ACCESS
2414  D002     BRA compare_l
2416  6AEE     CLRF POSTINC0, ACCESS
2418  D7FC     BRA zero_block
241A  50F3     MOVF PRODL, W, ACCESS
241C  60E9     CPFSLT FSR0L, ACCESS
241E  0012     RETURN 0
2420  6AEE     CLRF POSTINC0, ACCESS
2422  D7FC     BRA loop_l
---  C:/MCC18/v3_39/src/traditional/math/packFP.asm  ----------------------------------------------------
16A4  0E7F     MOVLW 0x7F
16A6  6E23     MOVWF 0x23, ACCESS
16A8  0EFF     MOVLW 0xFF
16AA  6E22     MOVWF 0x22, ACCESS
16AC  6E21     MOVWF 0x21, ACCESS
16AE  6E20     MOVWF 0x20, ACCESS
16B0  0012     RETURN 0
16B2  0E7F     MOVLW 0x7F
16B4  BE1A     BTFSC g, 7, ACCESS
16B6  0EFF     MOVLW 0xFF
16B8  6E23     MOVWF 0x23, ACCESS
16BA  D002     BRA jReturnPosInf0
16BC  0E7F     MOVLW 0x7F
16BE  6E23     MOVWF 0x23, ACCESS
16C0  0E80     MOVLW 0x80
16C2  6E22     MOVWF 0x22, ACCESS
16C4  6A21     CLRF 0x21, ACCESS
16C6  6A20     CLRF 0x20, ACCESS
16C8  D7F3     BRA __FpExit
16CA  AE1A     BTFSS g, 7, ACCESS
16CC  D004     BRA __FpReturnPosZero
16CE  0E80     MOVLW 0x80
16D0  6E23     MOVWF 0x23, ACCESS
16D2  6A22     CLRF 0x22, ACCESS
16D4  D7F7     BRA jZero1and2
16D6  6A23     CLRF 0x23, ACCESS
16D8  6A22     CLRF 0x22, ACCESS
16DA  D7F4     BRA jZero1and2
16DC  501C     MOVF 0x1C, W, ACCESS
16DE  101B     IORWF 0x1B, W, ACCESS
16E0  102C     IORWF 0x2C, W, ACCESS
16E2  102B     IORWF 0x2B, W, ACCESS
16E4  E0F8     BZ __FpReturnPosZero
16E6  BE1E     BTFSC RR, 7, ACCESS
16E8  D7F0     BRA __FpReturnSignZero
16EA  BE1C     BTFSC 0x1C, 7, ACCESS
16EC  D00C     BRA jPkShiftDone
16EE  501D     MOVF 0x1D, W, ACCESS
16F0  101E     IORWF RR, W, ACCESS
16F2  E0EB     BZ __FpReturnSignZero
16F4  90D8     BCF STATUS, 0, ACCESS
16F6  362B     RLCF 0x2B, F, ACCESS
16F8  362C     RLCF 0x2C, F, ACCESS
16FA  361B     RLCF 0x1B, F, ACCESS
16FC  361C     RLCF 0x1C, F, ACCESS
16FE  061D     DECF 0x1D, F, ACCESS
1700  A0D8     BTFSS STATUS, 0, ACCESS
1702  061E     DECF RR, F, ACCESS
1704  D7F2     BRA jPkLoop
1706  501E     MOVF RR, W, ACCESS
1708  E1D4     BNZ __FpReturnSignInf
170A  281D     INCF 0x1D, W, ACCESS
170C  E0D2     BZ __FpReturnSignInf
170E  AE2B     BTFSS 0x2B, 7, ACCESS
1710  D011     BRA jPkRoundDone
1712  0E7F     MOVLW 0x7F
1714  142B     ANDWF 0x2B, W, ACCESS
1716  E102     BNZ jPkRoundIt
1718  A02C     BTFSS 0x2C, 0, ACCESS
171A  D00C     BRA jPkRoundDone
171C  2A2C     INCF 0x2C, F, ACCESS
171E  6AE8     CLRF WREG, ACCESS
1720  221B     ADDWFC 0x1B, F, ACCESS
1722  221C     ADDWFC 0x1C, F, ACCESS
1724  E307     BNC jPkRoundDone
1726  80D8     BSF STATUS, 0, ACCESS
1728  321C     RRCF 0x1C, F, ACCESS
172A  321B     RRCF 0x1B, F, ACCESS
172C  322C     RRCF 0x2C, F, ACCESS
172E  2A1D     INCF 0x1D, F, ACCESS
1730  281D     INCF 0x1D, W, ACCESS
1732  E0BF     BZ __FpReturnSignInf
1734  501D     MOVF 0x1D, W, ACCESS
1736  E0C9     BZ __FpReturnSignZero
1738  C02C     MOVFF 0x2C, 0x20
173A  F020     NOP
173C  C01B     MOVFF 0x1B, 0x21
173E  F021     NOP
1740  341C     RLCF 0x1C, W, ACCESS
1742  6E22     MOVWF 0x22, ACCESS
1744  301D     RRCF 0x1D, W, ACCESS
1746  6E23     MOVWF 0x23, ACCESS
1748  3222     RRCF 0x22, F, ACCESS
174A  9E23     BCF 0x23, 7, ACCESS
174C  BE1A     BTFSC g, 7, ACCESS
174E  8E23     BSF 0x23, 7, ACCESS
1750  EF58     GOTO 0x16B0
1752  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/mulFP.asm  -----------------------------------------------------
13A6  6A1A     CLRF g, ACCESS
13A8  ECAA     CALL 0x1754, 0
13AA  F00B     NOP
13AC  ECC2     CALL 0x1784, 0
13AE  F00B     NOP
13B0  B61A     BTFSC g, 3, ACCESS
13B2  EF52     GOTO 0x16A4
13B4  F00B     NOP
13B6  A21A     BTFSS g, 1, ACCESS
13B8  D005     BRA jANotInf
13BA  B81A     BTFSC g, 4, ACCESS
13BC  EF52     GOTO 0x16A4
13BE  F00B     NOP
13C0  EF59     GOTO 0x16B2
13C2  F00B     NOP
13C4  AA1A     BTFSS g, 5, ACCESS
13C6  D005     BRA jBothFinite
13C8  B01A     BTFSC g, 0, ACCESS
13CA  EF52     GOTO 0x16A4
13CC  F00B     NOP
13CE  EF59     GOTO 0x16B2
13D0  F00B     NOP
13D2  B01A     BTFSC g, 0, ACCESS
13D4  D002     BRA jHaveZero
13D6  A81A     BTFSS g, 4, ACCESS
13D8  D002     BRA jBothNotZero
13DA  EF65     GOTO 0x16CA
13DC  F00B     NOP
13DE  6A1E     CLRF RR, ACCESS
13E0  5028     MOVF 0x28, W, ACCESS
13E2  2423     ADDWF 0x23, W, ACCESS
13E4  6E1D     MOVWF 0x1D, ACCESS
13E6  6AE8     CLRF WREG, ACCESS
13E8  221E     ADDWFC RR, F, ACCESS
13EA  0E7E     MOVLW 0x7E
13EC  5E1D     SUBWF 0x1D, F, ACCESS
13EE  6AE8     CLRF WREG, ACCESS
13F0  5A1E     SUBWFB RR, F, ACCESS
13F2  6A2B     CLRF 0x2B, ACCESS
13F4  6A2C     CLRF 0x2C, ACCESS
13F6  6A1B     CLRF 0x1B, ACCESS
13F8  6A1C     CLRF 0x1C, ACCESS
13FA  5027     MOVF 0x27, W, ACCESS
13FC  0222     MULWF 0x22, ACCESS
13FE  CFF4     MOVFF PRODH, 0x1C
1400  F01C     NOP
1402  CFF3     MOVFF PRODL, 0x1B
1404  F01B     NOP
1406  5026     MOVF 0x26, W, ACCESS
1408  0222     MULWF 0x22, ACCESS
140A  50F3     MOVF PRODL, W, ACCESS
140C  262C     ADDWF 0x2C, F, ACCESS
140E  50F4     MOVF PRODH, W, ACCESS
1410  221B     ADDWFC 0x1B, F, ACCESS
1412  0E00     MOVLW 0x0
1414  221C     ADDWFC 0x1C, F, ACCESS
1416  5027     MOVF 0x27, W, ACCESS
1418  0221     MULWF 0x21, ACCESS
141A  50F3     MOVF PRODL, W, ACCESS
141C  262C     ADDWF 0x2C, F, ACCESS
141E  50F4     MOVF PRODH, W, ACCESS
1420  221B     ADDWFC 0x1B, F, ACCESS
1422  0E00     MOVLW 0x0
1424  221C     ADDWFC 0x1C, F, ACCESS
1426  5025     MOVF 0x25, W, ACCESS
1428  0222     MULWF 0x22, ACCESS
142A  50F3     MOVF PRODL, W, ACCESS
142C  262B     ADDWF 0x2B, F, ACCESS
142E  50F4     MOVF PRODH, W, ACCESS
1430  222C     ADDWFC 0x2C, F, ACCESS
1432  0E00     MOVLW 0x0
1434  221B     ADDWFC 0x1B, F, ACCESS
1436  221C     ADDWFC 0x1C, F, ACCESS
1438  5026     MOVF 0x26, W, ACCESS
143A  0221     MULWF 0x21, ACCESS
143C  50F3     MOVF PRODL, W, ACCESS
143E  262B     ADDWF 0x2B, F, ACCESS
1440  50F4     MOVF PRODH, W, ACCESS
1442  222C     ADDWFC 0x2C, F, ACCESS
1444  0E00     MOVLW 0x0
1446  221B     ADDWFC 0x1B, F, ACCESS
1448  221C     ADDWFC 0x1C, F, ACCESS
144A  5027     MOVF 0x27, W, ACCESS
144C  0220     MULWF 0x20, ACCESS
144E  50F3     MOVF PRODL, W, ACCESS
1450  262B     ADDWF 0x2B, F, ACCESS
1452  50F4     MOVF PRODH, W, ACCESS
1454  222C     ADDWFC 0x2C, F, ACCESS
1456  0E00     MOVLW 0x0
1458  221B     ADDWFC 0x1B, F, ACCESS
145A  221C     ADDWFC 0x1C, F, ACCESS
145C  5025     MOVF 0x25, W, ACCESS
145E  0221     MULWF 0x21, ACCESS
1460  50F4     MOVF PRODH, W, ACCESS
1462  262B     ADDWF 0x2B, F, ACCESS
1464  0E00     MOVLW 0x0
1466  222C     ADDWFC 0x2C, F, ACCESS
1468  221B     ADDWFC 0x1B, F, ACCESS
146A  221C     ADDWFC 0x1C, F, ACCESS
146C  5026     MOVF 0x26, W, ACCESS
146E  0220     MULWF 0x20, ACCESS
1470  50F4     MOVF PRODH, W, ACCESS
1472  262B     ADDWF 0x2B, F, ACCESS
1474  0E00     MOVLW 0x0
1476  222C     ADDWFC 0x2C, F, ACCESS
1478  221B     ADDWFC 0x1B, F, ACCESS
147A  221C     ADDWFC 0x1C, F, ACCESS
147C  EF6E     GOTO 0x16DC
147E  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/ltFP.asm  ------------------------------------------------------
15E8  ECFD     CALL 0x15FA, 0
15EA  F00A     NOP
15EC  B61A     BTFSC g, 3, ACCESS
15EE  0C00     RETLW 0x0
15F0  B01A     BTFSC g, 0, ACCESS
15F2  0C00     RETLW 0x0
15F4  A41A     BTFSS g, 2, ACCESS
15F6  0C00     RETLW 0x0
15F8  0C01     RETLW 0x1
---  C:/MCC18/v3_39/src/traditional/math/gtFP.asm  ------------------------------------------------------
15D6  ECFD     CALL 0x15FA, 0
15D8  F00A     NOP
15DA  B61A     BTFSC g, 3, ACCESS
15DC  0C00     RETLW 0x0
15DE  B01A     BTFSC g, 0, ACCESS
15E0  0C00     RETLW 0x0
15E2  B41A     BTFSC g, 2, ACCESS
15E4  0C00     RETLW 0x0
15E6  0C01     RETLW 0x1
---  C:/MCC18/v3_39/src/traditional/math/fxm2424u.asm  --------------------------------------------------
14E8  C022     MOVFF 0x22, 0x2C
14EA  F02C     NOP
14EC  C021     MOVFF 0x21, 0x2B
14EE  F02B     NOP
14F0  C020     MOVFF 0x20, 0x2A
14F2  F02A     NOP
14F4  5020     MOVF 0x20, W, ACCESS
14F6  0225     MULWF 0x25, ACCESS
14F8  CFF4     MOVFF PRODH, RR
14FA  F01E     NOP
14FC  CFF3     MOVFF PRODL, 0x1D
14FE  F01D     NOP
1500  5021     MOVF 0x21, W, ACCESS
1502  0226     MULWF 0x26, ACCESS
1504  CFF4     MOVFF PRODH, 0x20
1506  F020     NOP
1508  CFF3     MOVFF PRODL, 0x1F
150A  F01F     NOP
150C  0225     MULWF 0x25, ACCESS
150E  50F3     MOVF PRODL, W, ACCESS
1510  261E     ADDWF RR, F, ACCESS
1512  50F4     MOVF PRODH, W, ACCESS
1514  221F     ADDWFC 0x1F, F, ACCESS
1516  6AE8     CLRF WREG, ACCESS
1518  2220     ADDWFC 0x20, F, ACCESS
151A  502A     MOVF 0x2A, W, ACCESS
151C  0226     MULWF 0x26, ACCESS
151E  50F3     MOVF PRODL, W, ACCESS
1520  261E     ADDWF RR, F, ACCESS
1522  50F4     MOVF PRODH, W, ACCESS
1524  221F     ADDWFC 0x1F, F, ACCESS
1526  6AE8     CLRF WREG, ACCESS
1528  2220     ADDWFC 0x20, F, ACCESS
152A  5022     MOVF 0x22, W, ACCESS
152C  0225     MULWF 0x25, ACCESS
152E  50F3     MOVF PRODL, W, ACCESS
1530  261F     ADDWF 0x1F, F, ACCESS
1532  50F4     MOVF PRODH, W, ACCESS
1534  2220     ADDWFC 0x20, F, ACCESS
1536  5022     MOVF 0x22, W, ACCESS
1538  0226     MULWF 0x26, ACCESS
153A  6A21     CLRF 0x21, ACCESS
153C  6AE8     CLRF WREG, ACCESS
153E  2221     ADDWFC 0x21, F, ACCESS
1540  50F3     MOVF PRODL, W, ACCESS
1542  2620     ADDWF 0x20, F, ACCESS
1544  50F4     MOVF PRODH, W, ACCESS
1546  2221     ADDWFC 0x21, F, ACCESS
1548  502A     MOVF 0x2A, W, ACCESS
154A  0227     MULWF 0x27, ACCESS
154C  50F3     MOVF PRODL, W, ACCESS
154E  261F     ADDWF 0x1F, F, ACCESS
1550  50F4     MOVF PRODH, W, ACCESS
1552  2220     ADDWFC 0x20, F, ACCESS
1554  6A22     CLRF 0x22, ACCESS
1556  6AE8     CLRF WREG, ACCESS
1558  2221     ADDWFC 0x21, F, ACCESS
155A  2222     ADDWFC 0x22, F, ACCESS
155C  502B     MOVF 0x2B, W, ACCESS
155E  0227     MULWF 0x27, ACCESS
1560  50F3     MOVF PRODL, W, ACCESS
1562  2620     ADDWF 0x20, F, ACCESS
1564  50F4     MOVF PRODH, W, ACCESS
1566  2221     ADDWFC 0x21, F, ACCESS
1568  6AE8     CLRF WREG, ACCESS
156A  2222     ADDWFC 0x22, F, ACCESS
156C  502C     MOVF 0x2C, W, ACCESS
156E  0227     MULWF 0x27, ACCESS
1570  50F3     MOVF PRODL, W, ACCESS
1572  2621     ADDWF 0x21, F, ACCESS
1574  50F4     MOVF PRODH, W, ACCESS
1576  2222     ADDWFC 0x22, F, ACCESS
1578  0C00     RETLW 0x0
---  C:/MCC18/v3_39/src/traditional/math/fxd3232u.c  ----------------------------------------------------
22D0  6A1E     CLRF RR, ACCESS
22D2  6A1D     CLRF 0x1D, ACCESS
22D4  6A1C     CLRF 0x1C, ACCESS
22D6  6A1B     CLRF 0x1B, ACCESS
22D8  0E20     MOVLW 0x20
22DA  6EE7     MOVWF INDF1, ACCESS
22DC  90D8     BCF STATUS, 0, ACCESS
22DE  361F     RLCF 0x1F, F, ACCESS
22E0  3620     RLCF 0x20, F, ACCESS
22E2  3621     RLCF 0x21, F, ACCESS
22E4  3622     RLCF 0x22, F, ACCESS
22E6  361B     RLCF 0x1B, F, ACCESS
22E8  361C     RLCF 0x1C, F, ACCESS
22EA  361D     RLCF 0x1D, F, ACCESS
22EC  361E     RLCF RR, F, ACCESS
22EE  5024     MOVF 0x24, W, ACCESS
22F0  5C1B     SUBWF 0x1B, W, ACCESS
22F2  5025     MOVF 0x25, W, ACCESS
22F4  581C     SUBWFB 0x1C, W, ACCESS
22F6  5026     MOVF 0x26, W, ACCESS
22F8  581D     SUBWFB 0x1D, W, ACCESS
22FA  5027     MOVF 0x27, W, ACCESS
22FC  581E     SUBWFB RR, W, ACCESS
22FE  E309     BNC 0x2312
2300  5024     MOVF 0x24, W, ACCESS
2302  5E1B     SUBWF 0x1B, F, ACCESS
2304  5025     MOVF 0x25, W, ACCESS
2306  5A1C     SUBWFB 0x1C, F, ACCESS
2308  5026     MOVF 0x26, W, ACCESS
230A  5A1D     SUBWFB 0x1D, F, ACCESS
230C  5027     MOVF 0x27, W, ACCESS
230E  5A1E     SUBWFB RR, F, ACCESS
2310  2A1F     INCF 0x1F, F, ACCESS
2312  2EE7     DECFSZ INDF1, F, ACCESS
2314  D7E4     BRA 0x22DE
2316  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/math/fxd3232s.asm  --------------------------------------------------
1480  6A19     CLRF 0x19, ACCESS
1482  6AE8     CLRF WREG, ACCESS
1484  AE27     BTFSS 0x27, 7, ACCESS
1486  EF4D     GOTO 0x149A
1488  F00A     NOP
148A  6C24     NEGF 0x24, ACCESS
148C  1E25     COMF 0x25, F, ACCESS
148E  1E26     COMF 0x26, F, ACCESS
1490  1E27     COMF 0x27, F, ACCESS
1492  2225     ADDWFC 0x25, F, ACCESS
1494  2226     ADDWFC 0x26, F, ACCESS
1496  2227     ADDWFC 0x27, F, ACCESS
1498  1E19     COMF 0x19, F, ACCESS
149A  AE22     BTFSS 0x22, 7, ACCESS
149C  EF58     GOTO 0x14B0
149E  F00A     NOP
14A0  6C1F     NEGF 0x1F, ACCESS
14A2  1E20     COMF 0x20, F, ACCESS
14A4  1E21     COMF 0x21, F, ACCESS
14A6  1E22     COMF 0x22, F, ACCESS
14A8  2220     ADDWFC 0x20, F, ACCESS
14AA  2221     ADDWFC 0x21, F, ACCESS
14AC  2222     ADDWFC 0x22, F, ACCESS
14AE  1E19     COMF 0x19, F, ACCESS
14B0  EC68     CALL 0x22D0, 0
14B2  F011     NOP
14B4  BE22     BTFSC 0x22, 7, ACCESS
14B6  EF6F     GOTO 0x14DE
14B8  F00A     NOP
14BA  AE19     BTFSS 0x19, 7, ACCESS
14BC  0C00     RETLW 0x0
14BE  6C1F     NEGF 0x1F, ACCESS
14C0  1E20     COMF 0x20, F, ACCESS
14C2  1E21     COMF 0x21, F, ACCESS
14C4  1E22     COMF 0x22, F, ACCESS
14C6  6AE8     CLRF WREG, ACCESS
14C8  2220     ADDWFC 0x20, F, ACCESS
14CA  2221     ADDWFC 0x21, F, ACCESS
14CC  2222     ADDWFC 0x22, F, ACCESS
14CE  6C1B     NEGF 0x1B, ACCESS
14D0  1E1C     COMF 0x1C, F, ACCESS
14D2  1E1D     COMF 0x1D, F, ACCESS
14D4  1E1E     COMF RR, F, ACCESS
14D6  221C     ADDWFC 0x1C, F, ACCESS
14D8  221D     ADDWFC 0x1D, F, ACCESS
14DA  221E     ADDWFC RR, F, ACCESS
14DC  0C00     RETLW 0x0
14DE  BE19     BTFSC 0x19, 7, ACCESS
14E0  EF5F     GOTO 0x14BE
14E2  F00A     NOP
14E4  881A     BSF g, 4, ACCESS
14E6  0CFF     RETLW 0xFF
---  C:/MCC18/v3_39/src/traditional/math/eqFP.asm  ------------------------------------------------------
15C8  ECFD     CALL 0x15FA, 0
15CA  F00A     NOP
15CC  B61A     BTFSC g, 3, ACCESS
15CE  0C00     RETLW 0x0
15D0  B01A     BTFSC g, 0, ACCESS
15D2  0C01     RETLW 0x1
15D4  0C00     RETLW 0x0
---  C:/MCC18/v3_39/src/traditional/math/divFP.asm  -----------------------------------------------------
1810  6A1A     CLRF g, ACCESS
1812  ECAA     CALL 0x1754, 0
1814  F00B     NOP
1816  ECC2     CALL 0x1784, 0
1818  F00B     NOP
181A  B61A     BTFSC g, 3, ACCESS
181C  EF52     GOTO 0x16A4
181E  F00B     NOP
1820  A21A     BTFSS g, 1, ACCESS
1822  D005     BRA jANotInf
1824  BA1A     BTFSC g, 5, ACCESS
1826  EF52     GOTO 0x16A4
1828  F00B     NOP
182A  EF59     GOTO 0x16B2
182C  F00B     NOP
182E  BA1A     BTFSC g, 5, ACCESS
1830  EF65     GOTO 0x16CA
1832  F00B     NOP
1834  A01A     BTFSS g, 0, ACCESS
1836  D005     BRA jANotZero
1838  B81A     BTFSC g, 4, ACCESS
183A  EF52     GOTO 0x16A4
183C  F00B     NOP
183E  EF65     GOTO 0x16CA
1840  F00B     NOP
1842  B81A     BTFSC g, 4, ACCESS
1844  EF59     GOTO 0x16B2
1846  F00B     NOP
1848  6A1E     CLRF RR, ACCESS
184A  0E7F     MOVLW 0x7F
184C  2423     ADDWF 0x23, W, ACCESS
184E  6E1D     MOVWF 0x1D, ACCESS
1850  6AE8     CLRF WREG, ACCESS
1852  221E     ADDWFC RR, F, ACCESS
1854  5028     MOVF 0x28, W, ACCESS
1856  5E1D     SUBWF 0x1D, F, ACCESS
1858  6AE8     CLRF WREG, ACCESS
185A  5A1E     SUBWFB RR, F, ACCESS
185C  0E1A     MOVLW 0x1A
185E  6E29     MOVWF 0x29, ACCESS
1860  6A23     CLRF 0x23, ACCESS
1862  6A2B     CLRF 0x2B, ACCESS
1864  6A2C     CLRF 0x2C, ACCESS
1866  6A1B     CLRF 0x1B, ACCESS
1868  6A1C     CLRF 0x1C, ACCESS
186A  5025     MOVF 0x25, W, ACCESS
186C  5E20     SUBWF 0x20, F, ACCESS
186E  5026     MOVF 0x26, W, ACCESS
1870  5A21     SUBWFB 0x21, F, ACCESS
1872  5027     MOVF 0x27, W, ACCESS
1874  5A22     SUBWFB 0x22, F, ACCESS
1876  0E00     MOVLW 0x0
1878  5A23     SUBWFB 0x23, F, ACCESS
187A  E709     BNN jNoAdjust
187C  5025     MOVF 0x25, W, ACCESS
187E  2620     ADDWF 0x20, F, ACCESS
1880  5026     MOVF 0x26, W, ACCESS
1882  2221     ADDWFC 0x21, F, ACCESS
1884  5027     MOVF 0x27, W, ACCESS
1886  2222     ADDWFC 0x22, F, ACCESS
1888  0E00     MOVLW 0x0
188A  2223     ADDWFC 0x23, F, ACCESS
188C  D001     BRA jNext
188E  8A2B     BSF 0x2B, 5, ACCESS
1890  90D8     BCF STATUS, 0, ACCESS
1892  3620     RLCF 0x20, F, ACCESS
1894  3621     RLCF 0x21, F, ACCESS
1896  3622     RLCF 0x22, F, ACCESS
1898  3623     RLCF 0x23, F, ACCESS
189A  90D8     BCF STATUS, 0, ACCESS
189C  362B     RLCF 0x2B, F, ACCESS
189E  362C     RLCF 0x2C, F, ACCESS
18A0  361B     RLCF 0x1B, F, ACCESS
18A2  361C     RLCF 0x1C, F, ACCESS
18A4  2E29     DECFSZ 0x29, F, ACCESS
18A6  D7E1     BRA jLoop
18A8  5022     MOVF 0x22, W, ACCESS
18AA  1021     IORWF 0x21, W, ACCESS
18AC  1020     IORWF 0x20, W, ACCESS
18AE  A4D8     BTFSS STATUS, 2, ACCESS
18B0  8A2B     BSF 0x2B, 5, ACCESS
18B2  EF6E     GOTO 0x16DC
18B4  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/compFP.asm  ----------------------------------------------------
15FA  6A1A     CLRF g, ACCESS
15FC  ECAA     CALL 0x1754, 0
15FE  F00B     NOP
1600  ECC2     CALL 0x1784, 0
1602  F00B     NOP
1604  B61A     BTFSC g, 3, ACCESS
1606  0012     RETURN 0
1608  AE1A     BTFSS g, 7, ACCESS
160A  D008     BRA jSignsEQ
160C  A01A     BTFSS g, 0, ACCESS
160E  D004     BRA jBothNotZero
1610  A81A     BTFSS g, 4, ACCESS
1612  D002     BRA jBothNotZero
1614  801A     BSF g, 0, ACCESS
1616  0012     RETURN 0
1618  901A     BCF g, 0, ACCESS
161A  0012     RETURN 0
161C  5028     MOVF 0x28, W, ACCESS
161E  5C23     SUBWF 0x23, W, ACCESS
1620  E10B     BNZ jNE
1622  5027     MOVF 0x27, W, ACCESS
1624  5C22     SUBWF 0x22, W, ACCESS
1626  E108     BNZ jNE
1628  5026     MOVF 0x26, W, ACCESS
162A  5C21     SUBWF 0x21, W, ACCESS
162C  E105     BNZ jNE
162E  5025     MOVF 0x25, W, ACCESS
1630  5C20     SUBWF 0x20, W, ACCESS
1632  E102     BNZ jNE
1634  801A     BSF g, 0, ACCESS
1636  0012     RETURN 0
1638  A0D8     BTFSS STATUS, 0, ACCESS
163A  D002     BRA jExch
163C  8E1A     BSF g, 7, ACCESS
163E  D010     BRA jNoExch
1640  5023     MOVF 0x23, W, ACCESS
1642  C028     MOVFF 0x28, 0x23
1644  F023     NOP
1646  6E28     MOVWF 0x28, ACCESS
1648  5022     MOVF 0x22, W, ACCESS
164A  C027     MOVFF 0x27, 0x22
164C  F022     NOP
164E  6E27     MOVWF 0x27, ACCESS
1650  5021     MOVF 0x21, W, ACCESS
1652  C026     MOVFF 0x26, 0x21
1654  F021     NOP
1656  6E26     MOVWF 0x26, ACCESS
1658  5020     MOVF 0x20, W, ACCESS
165A  C025     MOVFF 0x25, 0x20
165C  F020     NOP
165E  6E25     MOVWF 0x25, ACCESS
1660  5028     MOVF 0x28, W, ACCESS
1662  5C23     SUBWF 0x23, W, ACCESS
1664  E010     BZ jExpEQ
1666  0FFF     ADDLW 0xFF
1668  E009     BZ jShift
166A  901A     BCF g, 0, ACCESS
166C  B41A     BTFSC g, 2, ACCESS
166E  D003     BRA jAisNeg
1670  AE1A     BTFSS g, 7, ACCESS
1672  841A     BSF g, 2, ACCESS
1674  0012     RETURN 0
1676  AE1A     BTFSS g, 7, ACCESS
1678  941A     BCF g, 2, ACCESS
167A  0012     RETURN 0
167C  2A28     INCF 0x28, F, ACCESS
167E  90D8     BCF STATUS, 0, ACCESS
1680  3227     RRCF 0x27, F, ACCESS
1682  3226     RRCF 0x26, F, ACCESS
1684  3225     RRCF 0x25, F, ACCESS
1686  5025     MOVF 0x25, W, ACCESS
1688  5E20     SUBWF 0x20, F, ACCESS
168A  5026     MOVF 0x26, W, ACCESS
168C  5A21     SUBWFB 0x21, F, ACCESS
168E  5027     MOVF 0x27, W, ACCESS
1690  5A22     SUBWFB 0x22, F, ACCESS
1692  BE22     BTFSC 0x22, 7, ACCESS
1694  D7EA     BRA jFinal
1696  90D8     BCF STATUS, 0, ACCESS
1698  3620     RLCF 0x20, F, ACCESS
169A  3621     RLCF 0x21, F, ACCESS
169C  3622     RLCF 0x22, F, ACCESS
169E  2E23     DECFSZ 0x23, F, ACCESS
16A0  D7F8     BRA jRotate
16A2  D7C8     BRA jEQ
---  C:/MCC18/v3_39/src/traditional/math/castFP32.asm  --------------------------------------------------
1914  6A1A     CLRF g, ACCESS
1916  ECAA     CALL 0x1754, 0
1918  F00B     NOP
191A  B61A     BTFSC g, 3, ACCESS
191C  EF94     GOTO 0x1928
191E  F00C     NOP
1920  A21A     BTFSS g, 1, ACCESS
1922  D00F     BRA jNotInf
1924  B41A     BTFSC g, 2, ACCESS
1926  D007     BRA jMaxNeg
1928  0E7F     MOVLW 0x7F
192A  6E22     MOVWF 0x22, ACCESS
192C  0EFF     MOVLW 0xFF
192E  6E21     MOVWF 0x21, ACCESS
1930  6E20     MOVWF 0x20, ACCESS
1932  6E1F     MOVWF 0x1F, ACCESS
1934  D025     BRA jExit
1936  0E80     MOVLW 0x80
1938  6E22     MOVWF 0x22, ACCESS
193A  D001     BRA jWrZ123
193C  6A22     CLRF 0x22, ACCESS
193E  0E00     MOVLW 0x0
1940  D7F6     BRA jWr123
1942  B01A     BTFSC g, 0, ACCESS
1944  D7FB     BRA jZero
1946  6A1F     CLRF 0x1F, ACCESS
1948  0E9F     MOVLW 0x9F
194A  6023     CPFSLT 0x23, ACCESS
194C  D7EB     BRA jMax
194E  0E7E     MOVLW 0x7E
1950  6423     CPFSGT 0x23, ACCESS
1952  D7F4     BRA jZero
1954  0E9E     MOVLW 0x9E
1956  5C23     SUBWF 0x23, W, ACCESS
1958  E007     BZ jLoopExit
195A  90D8     BCF STATUS, 0, ACCESS
195C  3222     RRCF 0x22, F, ACCESS
195E  3221     RRCF 0x21, F, ACCESS
1960  3220     RRCF 0x20, F, ACCESS
1962  321F     RRCF 0x1F, F, ACCESS
1964  2A23     INCF 0x23, F, ACCESS
1966  D7F6     BRA jLoop
1968  A41A     BTFSS g, 2, ACCESS
196A  D00A     BRA jExit
196C  6C1F     NEGF 0x1F, ACCESS
196E  1E20     COMF 0x20, F, ACCESS
1970  1E21     COMF 0x21, F, ACCESS
1972  1E22     COMF 0x22, F, ACCESS
1974  6AE8     CLRF WREG, ACCESS
1976  2220     ADDWFC 0x20, F, ACCESS
1978  2221     ADDWFC 0x21, F, ACCESS
197A  2222     ADDWFC 0x22, F, ACCESS
197C  AE22     BTFSS 0x22, 7, ACCESS
197E  D7DE     BRA jZero
1980  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/math/castFP16.asm  --------------------------------------------------
18B6  6A1A     CLRF g, ACCESS
18B8  ECAA     CALL 0x1754, 0
18BA  F00B     NOP
18BC  B61A     BTFSC g, 3, ACCESS
18BE  EF65     GOTO 0x18CA
18C0  F00C     NOP
18C2  A21A     BTFSS g, 1, ACCESS
18C4  D00E     BRA jNotInf
18C6  B41A     BTFSC g, 2, ACCESS
18C8  D005     BRA jMaxNeg
18CA  0E7F     MOVLW 0x7F
18CC  6E22     MOVWF 0x22, ACCESS
18CE  0EFF     MOVLW 0xFF
18D0  6E21     MOVWF 0x21, ACCESS
18D2  D01F     BRA jExit
18D4  0E80     MOVLW 0x80
18D6  6E22     MOVWF 0x22, ACCESS
18D8  6A21     CLRF 0x21, ACCESS
18DA  D01B     BRA jExit
18DC  6A22     CLRF 0x22, ACCESS
18DE  6A21     CLRF 0x21, ACCESS
18E0  D018     BRA jExit
18E2  B01A     BTFSC g, 0, ACCESS
18E4  D7FB     BRA jZero
18E6  0E8F     MOVLW 0x8F
18E8  6023     CPFSLT 0x23, ACCESS
18EA  D7ED     BRA jMax
18EC  0E7E     MOVLW 0x7E
18EE  6423     CPFSGT 0x23, ACCESS
18F0  D7F5     BRA jZero
18F2  0E8E     MOVLW 0x8E
18F4  5C23     SUBWF 0x23, W, ACCESS
18F6  E005     BZ jLoopExit
18F8  90D8     BCF STATUS, 0, ACCESS
18FA  3222     RRCF 0x22, F, ACCESS
18FC  3221     RRCF 0x21, F, ACCESS
18FE  2A23     INCF 0x23, F, ACCESS
1900  D7F8     BRA jLoop
1902  A41A     BTFSS g, 2, ACCESS
1904  D006     BRA jExit
1906  6C21     NEGF 0x21, ACCESS
1908  1E22     COMF 0x22, F, ACCESS
190A  6AE8     CLRF WREG, ACCESS
190C  2222     ADDWFC 0x22, F, ACCESS
190E  AE22     BTFSS 0x22, 7, ACCESS
1910  D7E5     BRA jZero
1912  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/math/castFP08.asm  --------------------------------------------------
157A  6A1A     CLRF g, ACCESS
157C  ECAA     CALL 0x1754, 0
157E  F00B     NOP
1580  B61A     BTFSC g, 3, ACCESS
1582  EFC7     GOTO 0x158E
1584  F00A     NOP
1586  A21A     BTFSS g, 1, ACCESS
1588  D00A     BRA jNotInf
158A  B41A     BTFSC g, 2, ACCESS
158C  D003     BRA jMaxNeg
158E  0E7F     MOVLW 0x7F
1590  6E22     MOVWF 0x22, ACCESS
1592  D019     BRA jExit
1594  0E80     MOVLW 0x80
1596  6E22     MOVWF 0x22, ACCESS
1598  D016     BRA jExit
159A  6A22     CLRF 0x22, ACCESS
159C  D014     BRA jExit
159E  B01A     BTFSC g, 0, ACCESS
15A0  D7FC     BRA jZero
15A2  0E87     MOVLW 0x87
15A4  6023     CPFSLT 0x23, ACCESS
15A6  D7F1     BRA jMax
15A8  0E7E     MOVLW 0x7E
15AA  6423     CPFSGT 0x23, ACCESS
15AC  D7F6     BRA jZero
15AE  0E86     MOVLW 0x86
15B0  5C23     SUBWF 0x23, W, ACCESS
15B2  E004     BZ jLoopExit
15B4  90D8     BCF STATUS, 0, ACCESS
15B6  3222     RRCF 0x22, F, ACCESS
15B8  2A23     INCF 0x23, F, ACCESS
15BA  D7F9     BRA jLoop
15BC  A41A     BTFSS g, 2, ACCESS
15BE  D003     BRA jExit
15C0  6C22     NEGF 0x22, ACCESS
15C2  AE22     BTFSS 0x22, 7, ACCESS
15C4  D7EA     BRA jZero
15C6  0012     RETURN 0
---  C:/MCC18/v3_39/src/traditional/math/cast32FP.asm  --------------------------------------------------
17DA  9E1A     BCF g, 7, ACCESS
17DC  D00C     BRA jI2F32Beg
17DE  9E1A     BCF g, 7, ACCESS
17E0  AE22     BTFSS 0x22, 7, ACCESS
17E2  D009     BRA jI2F32Beg
17E4  6C1F     NEGF 0x1F, ACCESS
17E6  1E20     COMF 0x20, F, ACCESS
17E8  1E21     COMF 0x21, F, ACCESS
17EA  1E22     COMF 0x22, F, ACCESS
17EC  6AE8     CLRF WREG, ACCESS
17EE  2220     ADDWFC 0x20, F, ACCESS
17F0  2221     ADDWFC 0x21, F, ACCESS
17F2  2222     ADDWFC 0x22, F, ACCESS
17F4  8E1A     BSF g, 7, ACCESS
17F6  C022     MOVFF 0x22, 0x1C
17F8  F01C     NOP
17FA  C021     MOVFF 0x21, 0x1B
17FC  F01B     NOP
17FE  C020     MOVFF 0x20, 0x2C
1800  F02C     NOP
1802  C01F     MOVFF 0x1F, 0x2B
1804  F02B     NOP
1806  0E9E     MOVLW 0x9E
1808  6E1D     MOVWF 0x1D, ACCESS
180A  6A1E     CLRF RR, ACCESS
180C  EF6E     GOTO 0x16DC
180E  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/cast16FP.asm  --------------------------------------------------
17B0  9E1A     BCF g, 7, ACCESS
17B2  D008     BRA jI2F16Beg
17B4  9E1A     BCF g, 7, ACCESS
17B6  AE22     BTFSS 0x22, 7, ACCESS
17B8  D005     BRA jI2F16Beg
17BA  6C21     NEGF 0x21, ACCESS
17BC  1E22     COMF 0x22, F, ACCESS
17BE  6AE8     CLRF WREG, ACCESS
17C0  2222     ADDWFC 0x22, F, ACCESS
17C2  8E1A     BSF g, 7, ACCESS
17C4  C022     MOVFF 0x22, 0x1C
17C6  F01C     NOP
17C8  C021     MOVFF 0x21, 0x1B
17CA  F01B     NOP
17CC  6A2C     CLRF 0x2C, ACCESS
17CE  6A2B     CLRF 0x2B, ACCESS
17D0  0E8E     MOVLW 0x8E
17D2  6E1D     MOVWF 0x1D, ACCESS
17D4  6A1E     CLRF RR, ACCESS
17D6  EF6E     GOTO 0x16DC
17D8  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/cast08FP.asm  --------------------------------------------------
1256  9E1A     BCF g, 7, ACCESS
1258  D005     BRA jI2F08Beg
125A  9E1A     BCF g, 7, ACCESS
125C  AE22     BTFSS 0x22, 7, ACCESS
125E  D002     BRA jI2F08Beg
1260  6C22     NEGF 0x22, ACCESS
1262  8E1A     BSF g, 7, ACCESS
1264  C022     MOVFF 0x22, 0x1C
1266  F01C     NOP
1268  6A1B     CLRF 0x1B, ACCESS
126A  6A2C     CLRF 0x2C, ACCESS
126C  6A2B     CLRF 0x2B, ACCESS
126E  0E86     MOVLW 0x86
1270  6E1D     MOVWF 0x1D, ACCESS
1272  6A1E     CLRF RR, ACCESS
1274  EF6E     GOTO 0x16DC
1276  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/addFP.asm  -----------------------------------------------------
1278  7E28     BTG 0x28, 7, ACCESS
127A  6A1A     CLRF g, ACCESS
127C  ECAA     CALL 0x1754, 0
127E  F00B     NOP
1280  ECC2     CALL 0x1784, 0
1282  F00B     NOP
1284  B61A     BTFSC g, 3, ACCESS
1286  EF52     GOTO 0x16A4
1288  F00B     NOP
128A  A21A     BTFSS g, 1, ACCESS
128C  D00A     BRA jANotInf
128E  AA1A     BTFSS g, 5, ACCESS
1290  D003     BRA jBANotInf
1292  BE1A     BTFSC g, 7, ACCESS
1294  EF52     GOTO 0x16A4
1296  F00B     NOP
1298  A41A     BTFSS g, 2, ACCESS
129A  EF5E     GOTO 0x16BC
129C  F00B     NOP
129E  EF5B     GOTO 0x16B6
12A0  F00B     NOP
12A2  AA1A     BTFSS g, 5, ACCESS
12A4  D005     BRA jBNotInf
12A6  AC1A     BTFSS g, 6, ACCESS
12A8  EF5E     GOTO 0x16BC
12AA  F00B     NOP
12AC  EF5B     GOTO 0x16B6
12AE  F00B     NOP
12B0  A01A     BTFSS g, 0, ACCESS
12B2  D00A     BRA jNotBothZero
12B4  A81A     BTFSS g, 4, ACCESS
12B6  D008     BRA jNotBothZero
12B8  BE1A     BTFSC g, 7, ACCESS
12BA  D004     BRA jDifOrPosSign
12BC  A41A     BTFSS g, 2, ACCESS
12BE  D002     BRA jDifOrPosSign
12C0  EF67     GOTO 0x16CE
12C2  F00B     NOP
12C4  EF6B     GOTO 0x16D6
12C6  F00B     NOP
12C8  6A2B     CLRF 0x2B, ACCESS
12CA  6A1E     CLRF RR, ACCESS
12CC  5028     MOVF 0x28, W, ACCESS
12CE  5C23     SUBWF 0x23, W, ACCESS
12D0  6E2A     MOVWF 0x2A, ACCESS
12D2  E310     BNC jAltBexp
12D4  C020     MOVFF 0x20, 0x2C
12D6  F02C     NOP
12D8  C021     MOVFF 0x21, 0x1B
12DA  F01B     NOP
12DC  C022     MOVFF 0x22, 0x1C
12DE  F01C     NOP
12E0  C023     MOVFF 0x23, 0x29
12E2  F029     NOP
12E4  C025     MOVFF 0x25, 0x20
12E6  F020     NOP
12E8  C026     MOVFF 0x26, 0x21
12EA  F021     NOP
12EC  C027     MOVFF 0x27, 0x22
12EE  F022     NOP
12F0  3A1A     SWAPF g, F, ACCESS
12F2  D009     BRA jAandWsetup
12F4  C025     MOVFF 0x25, 0x2C
12F6  F02C     NOP
12F8  C026     MOVFF 0x26, 0x1B
12FA  F01B     NOP
12FC  C027     MOVFF 0x27, 0x1C
12FE  F01C     NOP
1300  C028     MOVFF 0x28, 0x29
1302  F029     NOP
1304  6C2A     NEGF 0x2A, ACCESS
1306  9E1A     BCF g, 7, ACCESS
1308  BC1A     BTFSC g, 6, ACCESS
130A  8E1A     BSF g, 7, ACCESS
130C  C029     MOVFF 0x29, 0x1D
130E  F01D     NOP
1310  B01A     BTFSC g, 0, ACCESS
1312  EF9A     GOTO 0x1734
1314  F00B     NOP
1316  0E1A     MOVLW 0x1A
1318  602A     CPFSLT 0x2A, ACCESS
131A  EF9A     GOTO 0x1734
131C  F00B     NOP
131E  6A1D     CLRF 0x1D, ACCESS
1320  6A23     CLRF 0x23, ACCESS
1322  A41A     BTFSS g, 2, ACCESS
1324  D008     BRA jANotNeg
1326  6C20     NEGF 0x20, ACCESS
1328  1E21     COMF 0x21, F, ACCESS
132A  1E22     COMF 0x22, F, ACCESS
132C  1E23     COMF 0x23, F, ACCESS
132E  6AE8     CLRF WREG, ACCESS
1330  2221     ADDWFC 0x21, F, ACCESS
1332  2222     ADDWFC 0x22, F, ACCESS
1334  2223     ADDWFC 0x23, F, ACCESS
1336  AC1A     BTFSS g, 6, ACCESS
1338  D008     BRA jWNotNeg
133A  6C2C     NEGF 0x2C, ACCESS
133C  1E1B     COMF 0x1B, F, ACCESS
133E  1E1C     COMF 0x1C, F, ACCESS
1340  1E1D     COMF 0x1D, F, ACCESS
1342  6AE8     CLRF WREG, ACCESS
1344  221B     ADDWFC 0x1B, F, ACCESS
1346  221C     ADDWFC 0x1C, F, ACCESS
1348  221D     ADDWFC 0x1D, F, ACCESS
134A  6A1F     CLRF 0x1F, ACCESS
134C  522A     MOVF 0x2A, F, ACCESS
134E  E007     BZ jShiftDone
1350  3423     RLCF 0x23, W, ACCESS
1352  3222     RRCF 0x22, F, ACCESS
1354  3221     RRCF 0x21, F, ACCESS
1356  3220     RRCF 0x20, F, ACCESS
1358  321F     RRCF 0x1F, F, ACCESS
135A  2E2A     DECFSZ 0x2A, F, ACCESS
135C  D7F9     BRA jShiftLoop
135E  5020     MOVF 0x20, W, ACCESS
1360  262C     ADDWF 0x2C, F, ACCESS
1362  5021     MOVF 0x21, W, ACCESS
1364  221B     ADDWFC 0x1B, F, ACCESS
1366  5022     MOVF 0x22, W, ACCESS
1368  221C     ADDWFC 0x1C, F, ACCESS
136A  5023     MOVF 0x23, W, ACCESS
136C  221D     ADDWFC 0x1D, F, ACCESS
136E  C01F     MOVFF 0x1F, 0x2B
1370  F02B     NOP
1372  9E1A     BCF g, 7, ACCESS
1374  AE1D     BTFSS 0x1D, 7, ACCESS
1376  D00B     BRA jSignDone
1378  6C2B     NEGF 0x2B, ACCESS
137A  1E2C     COMF 0x2C, F, ACCESS
137C  1E1B     COMF 0x1B, F, ACCESS
137E  1E1C     COMF 0x1C, F, ACCESS
1380  1E1D     COMF 0x1D, F, ACCESS
1382  6AE8     CLRF WREG, ACCESS
1384  222C     ADDWFC 0x2C, F, ACCESS
1386  221B     ADDWFC 0x1B, F, ACCESS
1388  221C     ADDWFC 0x1C, F, ACCESS
138A  221D     ADDWFC 0x1D, F, ACCESS
138C  8E1A     BSF g, 7, ACCESS
138E  A01D     BTFSS 0x1D, 0, ACCESS
1390  D006     BRA jFinalSign
1392  80D8     BSF STATUS, 0, ACCESS
1394  321C     RRCF 0x1C, F, ACCESS
1396  321B     RRCF 0x1B, F, ACCESS
1398  322C     RRCF 0x2C, F, ACCESS
139A  322B     RRCF 0x2B, F, ACCESS
139C  2A29     INCF 0x29, F, ACCESS
139E  C029     MOVFF 0x29, 0x1D
13A0  F01D     NOP
13A2  EF6E     GOTO 0x16DC
13A4  F00B     NOP
---  C:/MCC18/v3_39/src/traditional/math/UnpackFP.asm  --------------------------------------------------
1754  3622     RLCF 0x22, F, ACCESS
1756  3623     RLCF 0x23, F, ACCESS
1758  E302     BNC jUnpkA1
175A  841A     BSF g, 2, ACCESS
175C  7E1A     BTG g, 7, ACCESS
175E  E106     BNZ jUnpkANZ
1760  801A     BSF g, 0, ACCESS
1762  6A23     CLRF 0x23, ACCESS
1764  6A22     CLRF 0x22, ACCESS
1766  6A21     CLRF 0x21, ACCESS
1768  6A20     CLRF 0x20, ACCESS
176A  0012     RETURN 0
176C  2823     INCF 0x23, W, ACCESS
176E  E003     BZ jUnpkA2
1770  80D8     BSF STATUS, 0, ACCESS
1772  3222     RRCF 0x22, F, ACCESS
1774  0012     RETURN 0
1776  90D8     BCF STATUS, 0, ACCESS
1778  3222     RRCF 0x22, F, ACCESS
177A  E102     BNZ jUnpkNaN
177C  821A     BSF g, 1, ACCESS
177E  0012     RETURN 0
1780  861A     BSF g, 3, ACCESS
1782  0012     RETURN 0
1784  3627     RLCF 0x27, F, ACCESS
1786  3628     RLCF 0x28, F, ACCESS
1788  E302     BNC jUnpkB1
178A  8C1A     BSF g, 6, ACCESS
178C  7E1A     BTG g, 7, ACCESS
178E  E106     BNZ jUnpkBNZ
1790  881A     BSF g, 4, ACCESS
1792  6A28     CLRF 0x28, ACCESS
1794  6A27     CLRF 0x27, ACCESS
1796  6A26     CLRF 0x26, ACCESS
1798  6A25     CLRF 0x25, ACCESS
179A  0012     RETURN 0
179C  2828     INCF 0x28, W, ACCESS
179E  E003     BZ jUnpkB2
17A0  80D8     BSF STATUS, 0, ACCESS
17A2  3227     RRCF 0x27, F, ACCESS
17A4  0012     RETURN 0
17A6  90D8     BCF STATUS, 0, ACCESS
17A8  3227     RRCF 0x27, F, ACCESS
17AA  E1EA     BNZ jUnpkNaN
17AC  8A1A     BSF g, 5, ACCESS
17AE  0012     RETURN 0
---  C:/MCC18/v3_39/src/pmc_common/USART/u2open.c  ------------------------------------------------------
20E6  CFD9     MOVFF FSR2L, POSTINC1
20E8  FFE6     NOP
20EA  CFDA     MOVFF FSR2H, POSTINC1
20EC  FFE6     NOP
20EE  CFE1     MOVFF FSR1L, FSR2L
20F0  FFD9     NOP
20F2  CFE2     MOVFF FSR1H, FSR2H
20F4  FFDA     NOP
20F6  6ABA     CLRF TXSTA2, ACCESS
20F8  6AA6     CLRF RCSTA2, ACCESS
20FA  0EFD     MOVLW 0xFD
20FC  B0DB     BTFSC PLUSW2, 0, ACCESS
20FE  88BA     BSF TXSTA2, 4, ACCESS
2100  A2DB     BTFSS PLUSW2, 1, ACCESS
2102  D002     BRA 0x2108
2104  8CBA     BSF TXSTA2, 6, ACCESS
2106  8CA6     BSF RCSTA2, 6, ACCESS
2108  B4DB     BTFSC PLUSW2, 2, ACCESS
210A  8EBA     BSF TXSTA2, 7, ACCESS
210C  A6DB     BTFSS PLUSW2, 3, ACCESS
210E  D002     BRA 0x2114
2110  88A6     BSF RCSTA2, 4, ACCESS
2112  D001     BRA 0x2116
2114  8AA6     BSF RCSTA2, 5, ACCESS
2116  A8DB     BTFSS PLUSW2, 4, ACCESS
2118  D002     BRA 0x211E
211A  84BA     BSF TXSTA2, 2, ACCESS
211C  D001     BRA 0x2120
211E  94BA     BCF TXSTA2, 2, ACCESS
2120  BADB     BTFSC PLUSW2, 5, ACCESS
2122  86A6     BSF RCSTA2, 3, ACCESS
2124  ACDB     BTFSS PLUSW2, 6, ACCESS
2126  D002     BRA 0x212C
2128  8AA3     BSF PIE3, 5, ACCESS
212A  D001     BRA 0x212E
212C  9AA3     BCF PIE3, 5, ACCESS
212E  AEDB     BTFSS PLUSW2, 7, ACCESS
2130  D002     BRA 0x2136
2132  88A3     BSF PIE3, 4, ACCESS
2134  D001     BRA 0x2138
2136  98A3     BCF PIE3, 4, ACCESS
2138  0EFB     MOVLW 0xFB
213A  50DB     MOVF PLUSW2, W, ACCESS
213C  6E7B     MOVWF SPBRG2, ACCESS
213E  0EFC     MOVLW 0xFC
2140  CFDB     MOVFF PLUSW2, 0x1
2142  F001     NOP
2144  C001     MOVFF 0x1, __tmp_0
2146  F000     NOP
2148  6A01     CLRF 0x1, ACCESS
214A  5000     MOVF __tmp_0, W, ACCESS
214C  6E7C     MOVWF SPBRGH2, ACCESS
214E  8ABA     BSF TXSTA2, 5, ACCESS
2150  8EA6     BSF RCSTA2, 7, ACCESS
2152  52E5     MOVF POSTDEC1, F, ACCESS
2154  CFE5     MOVFF POSTDEC1, FSR2H
2156  FFDA     NOP
2158  CFE7     MOVFF INDF1, FSR2L
215A  FFD9     NOP
215C  0012     RETURN 0
---  C:/MCC18/v3_39/src/pmc_common/Timers/t2open.c  -----------------------------------------------------
23CE  CFD9     MOVFF FSR2L, POSTINC1
23D0  FFE6     NOP
23D2  CFDA     MOVFF FSR2H, POSTINC1
23D4  FFE6     NOP
23D6  CFE1     MOVFF FSR1L, FSR2L
23D8  FFD9     NOP
23DA  CFE2     MOVFF FSR1H, FSR2H
23DC  FFDA     NOP
23DE  0EFD     MOVLW 0xFD
23E0  50DB     MOVF PLUSW2, W, ACCESS
23E2  0BFB     ANDLW 0xFB
23E4  6ECA     MOVWF T2CON, ACCESS
23E6  6ACC     CLRF TMR2, ACCESS
23E8  929E     BCF PIR1, 1, ACCESS
23EA  0EFD     MOVLW 0xFD
23EC  AEDB     BTFSS PLUSW2, 7, ACCESS
23EE  D002     BRA 0x23F4
23F0  829D     BSF PIE1, 1, ACCESS
23F2  D001     BRA 0x23F6
23F4  929D     BCF PIE1, 1, ACCESS
23F6  84CA     BSF T2CON, 2, ACCESS
23F8  52E5     MOVF POSTDEC1, F, ACCESS
23FA  CFE5     MOVFF POSTDEC1, FSR2H
23FC  FFDA     NOP
23FE  CFE7     MOVFF INDF1, FSR2L
2400  FFD9     NOP
2402  0012     RETURN 0
---  C:/MCC18/v3_39/src/pmc_common/Timers/t0write.c  ----------------------------------------------------
235E  CFD9     MOVFF FSR2L, POSTINC1
2360  FFE6     NOP
2362  CFDA     MOVFF FSR2H, POSTINC1
2364  FFE6     NOP
2366  CFE1     MOVFF FSR1L, FSR2L
2368  FFD9     NOP
236A  CFE2     MOVFF FSR1H, FSR2H
236C  FFDA     NOP
236E  52E6     MOVF POSTINC1, F, ACCESS
2370  52E6     MOVF POSTINC1, F, ACCESS
2372  0EFC     MOVLW 0xFC
2374  CFDB     MOVFF PLUSW2, POSTINC2
2376  FFDE     NOP
2378  CFDB     MOVFF PLUSW2, POSTDEC2
237A  FFDD     NOP
237C  0E01     MOVLW 0x1
237E  50DB     MOVF PLUSW2, W, ACCESS
2380  6ED7     MOVWF TMR0H, ACCESS
2382  50DF     MOVF INDF2, W, ACCESS
2384  6ED6     MOVWF TMR0L, ACCESS
2386  52E5     MOVF POSTDEC1, F, ACCESS
2388  52E5     MOVF POSTDEC1, F, ACCESS
238A  52E5     MOVF POSTDEC1, F, ACCESS
238C  CFE5     MOVFF POSTDEC1, FSR2H
238E  FFDA     NOP
2390  CFE7     MOVFF INDF1, FSR2L
2392  FFD9     NOP
2394  0012     RETURN 0
---  C:/MCC18/v3_39/src/pmc_common/Timers/t0open.c  -----------------------------------------------------
2396  CFD9     MOVFF FSR2L, POSTINC1
2398  FFE6     NOP
239A  CFDA     MOVFF FSR2H, POSTINC1
239C  FFE6     NOP
239E  CFE1     MOVFF FSR1L, FSR2L
23A0  FFD9     NOP
23A2  CFE2     MOVFF FSR1H, FSR2H
23A4  FFDA     NOP
23A6  0EFD     MOVLW 0xFD
23A8  50DB     MOVF PLUSW2, W, ACCESS
23AA  0B7F     ANDLW 0x7F
23AC  6ED5     MOVWF T0CON, ACCESS
23AE  6AD7     CLRF TMR0H, ACCESS
23B0  6AD6     CLRF TMR0L, ACCESS
23B2  94F2     BCF INTCON, 2, ACCESS
23B4  0EFD     MOVLW 0xFD
23B6  AEDB     BTFSS PLUSW2, 7, ACCESS
23B8  D002     BRA 0x23BE
23BA  8AF2     BSF INTCON, 5, ACCESS
23BC  D001     BRA 0x23C0
23BE  9AF2     BCF INTCON, 5, ACCESS
23C0  8ED5     BSF T0CON, 7, ACCESS
23C2  52E5     MOVF POSTDEC1, F, ACCESS
23C4  CFE5     MOVFF POSTDEC1, FSR2H
23C6  FFDA     NOP
23C8  CFE7     MOVFF INDF1, FSR2L
23CA  FFD9     NOP
23CC  0012     RETURN 0
---  /audio/matrix_pic18f45k80/swm45k80.c  --------------------------------------------------------------
1:             /* Computer Graphics Dot Primitives for a non-raster display */
2:             
3:             // PIC18F45K80 Configuration Bit Settings
4:             
5:             #include <p18f45k80.h>
6:             
7:             // CONFIG1L
8:             #pragma config RETEN = OFF      // VREG Sleep Enable bit (Ultra low-power regulator is Disabled (Controlled by REGSLP bit))
9:             #pragma config INTOSCSEL = HIGH // LF-INTOSC Low-power Enable bit (LF-INTOSC in High-power mode during Sleep)
10:            #pragma config SOSCSEL = DIG    // SOSC Power Selection and mode Configuration bits (Digital (SCLKI) mode)
11:            #pragma config XINST = OFF      // Extended Instruction Set (Disabled)
12:            
13:            // CONFIG1H
14:            #pragma config FOSC = INTIO2    // Oscillator (Internal RC oscillator)
15:            #pragma config PLLCFG = ON      // PLL x4 Enable bit (Enabled)
16:            #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor (Disabled)
17:            #pragma config IESO = OFF       // Internal External Oscillator Switch Over Mode (Disabled)
18:            
19:            // CONFIG2L
20:            #pragma config PWRTEN = OFF     // Power Up Timer (Disabled)
21:            #pragma config BOREN = SBORDIS  // Brown Out Detect (Enabled in hardware, SBOREN disabled)
22:            #pragma config BORV = 3         // Brown-out Reset Voltage bits (1.8V)
23:            #pragma config BORPWR = ZPBORMV // BORMV Power level (ZPBORMV instead of BORMV is selected)
24:            
25:            // CONFIG2H
26:            #pragma config WDTEN = OFF      // Watchdog Timer (WDT disabled in hardware; SWDTEN bit disabled)
27:            #pragma config WDTPS = 1024     // Watchdog Postscaler (1:1024)
28:            
29:            // CONFIG3H
30:            #pragma config CANMX = PORTC    // ECAN Mux bit (ECAN TX and RX pins are located on RC6 and RC7, respectively)
31:            #pragma config MSSPMSK = MSK7   // MSSP address masking (7 Bit address masking mode)
32:            #pragma config MCLRE = OFF      // Master Clear Enable (MCLR Disabled, RG5 Enabled)
33:            
34:            // CONFIG4L
35:            #pragma config STVREN = ON      // Stack Overflow Reset (Enabled)
36:            #pragma config BBSIZ = BB2K     // Boot Block Size (2K word Boot Block size)
37:            
38:            // CONFIG5L
39:            #pragma config CP0 = OFF        // Code Protect 00800-01FFF (Disabled)
40:            #pragma config CP1 = OFF        // Code Protect 02000-03FFF (Disabled)
41:            #pragma config CP2 = OFF        // Code Protect 04000-05FFF (Disabled)
42:            #pragma config CP3 = OFF        // Code Protect 06000-07FFF (Disabled)
43:            
44:            // CONFIG5H
45:            #pragma config CPB = OFF        // Code Protect Boot (Disabled)
46:            #pragma config CPD = OFF        // Data EE Read Protect (Disabled)
47:            
48:            // CONFIG6L
49:            #pragma config WRT0 = OFF       // Table Write Protect 00800-03FFF (Disabled)
50:            #pragma config WRT1 = OFF       // Table Write Protect 04000-07FFF (Disabled)
51:            #pragma config WRT2 = OFF       // Table Write Protect 08000-0BFFF (Disabled)
52:            #pragma config WRT3 = OFF       // Table Write Protect 0C000-0FFFF (Disabled)
53:            
54:            // CONFIG6H
55:            #pragma config WRTC = OFF       // Config. Write Protect (Disabled)
56:            #pragma config WRTB = OFF       // Table Write Protect Boot (Disabled)
57:            #pragma config WRTD = OFF       // Data EE Write Protect (Disabled)
58:            
59:            // CONFIG7L
60:            #pragma config EBTR0 = OFF      // Table Read Protect 00800-03FFF (Disabled)
61:            #pragma config EBTR1 = OFF      // Table Read Protect 04000-07FFF (Disabled)
62:            #pragma config EBTR2 = OFF      // Table Read Protect 08000-0BFFF (Disabled)
63:            #pragma config EBTR3 = OFF      // Table Read Protect 0C000-0FFFF (Disabled)
64:            
65:            // CONFIG7H
66:            #pragma config EBTRB = OFF      // Table Read Protect Boot (Disabled)
67:            
68:            
69:            /*
70:             *
71:             *  E0.01 LED 7*5*2 MATRIX DISPLAY, CTMU touch driver
72:             *  E0.02 Fix X/Y swap bug
73:             *  ***		background I/O using timer0/timer2  adc, usart2 TX,RX interrupts
74:             *  Timer3 counter/buffer used for ATOMIC 16bit reads and writes of touch data
75:             *  INPUTS		AN0-3 touch input
76:             *  MATRIX X/Y	X-PORTC 0-7, Y-PORTB 0-7, X-PORTA 6-7 DIGITAL OUTPUTS 25mA source or sink
77:             *  VCC VAOM-A20571G 2.0" dot-matrix display
78:             *
79:             *
80:             * This application is designed for the
81:             * pic18F45K80  device with CTMU module.
82:             *
83:             */
84:            
85:            #include <string.h>
86:            #include <stdlib.h>
87:            #include <EEP.h>
88:            #include <timers.h>
89:            #include <adc.h>
90:            #include <ctmu.h>
91:            #include <usart.h>
92:            #include <math.h>
93:            
94:            
95:            #ifdef INTTYPES
96:            #include <stdint.h>
97:            #else
98:            #define INTTYPES
99:            // unsigned types
100:           typedef unsigned char uint8_t;
101:           typedef unsigned int uint16_t;
102:           typedef unsigned long uint32_t;
103:           typedef unsigned long long uint64_t;
104:           // signed types
105:           typedef signed char int8_t;
106:           typedef signed int int16_t;
107:           typedef signed long int32_t;
108:           typedef signed long long int64_t;
109:           #endif
110:           
111:           #define	PDELAY	0xA8
112:           
113:           #define GRID_S          8
114:           #define PIXEL_NUM       256	// max number of pixels in display ram
115:           #define OBJ_NUM		64	// max nuber of pixels in one object
116:           #define	ROT_SPEED	35	// The highest speed is 1, 35 for demo speed
117:           #define ROTATION	12.0
118:           #define DIAG_BITS	PIXEL_NUM-8
119:           
120:           #define FALSE	0
121:           #define TRUE	1
122:           #define	ON		0
123:           #define ALLON	0x00
124:           #define	OFF		1
125:           #define ALLOFF	0xff
126:           #define CMARK	0x1957
127:           
128:           //	CTMU section
129:           uint16_t touch_base_calc(uint8_t);
130:           void touch_channel(uint8_t);
131:           uint16_t ctmu_touch(uint8_t, uint8_t);
132:           int16_t ctmu_setup(uint8_t, uint8_t);
133:           
134:           #define	TIMERCHARGE_BASE_X10            65400		// 5.5 uA time, large plate ~150us
135:           #define	TIMERCHARGE_BASE_1		64000		// .55 uA time, large plate max sens ~700us
136:           #define	TIMERCHARGE_BASE_2		61543		// .55 uA time, large plate low sens ~1000us
137:           #define	TIMERCHARGE_BASE_3		65000		// .55 uA time, small plate max sens ~200us
138:           #define	TIMERCHARGE_BASE_4		62543		// .55 uA time, small plate low sens ~750us
139:           #define	TIMERDISCHARGE			51000		// discharge and max touch data update period 1.8ms
140:           
141:           #define TRIP 32  //Difference between pressed
142:           //and un-pressed switch
143:           #define HYST 8 //amount to change
144:           //from pressed to un-pressed
145:           #define PRESSED 1
146:           #define UNPRESSED 0
147:           #define	CHOP_BITS	4               // remove this many bits to reduce noise from the touch sensor
148:           #define MAX_CHAN	3		//	0..3 ADC channels
149:           
150:           typedef struct pixel_t {
151:           	int8_t x, y, v; // display bit x,y and v for pixel value 0=off
152:           	int8_t m_link, n_link; // pixel links m_ id for each pixel, n_ pixel group id for object
153:           } volatile pixel_t; // -1 in the m_link and n_link means end of display data
154:           
155:           /* store the pixel data in rom then copy it to the ram buffer as needed. */
156:           const rom struct pixel_t pixel_rom[] = {
157:           	-1, -3, 1, 0, 0,
158:           	0, -2, 0, 1, 0,
159:           	1, -1, 1, 2, 0,
160:           	2, 0, 1, 3, 0,
161:           	-1, 0, 1, 4, 0,
162:           	1, 1, 1, 5, 0,
163:           	0, 2, 1, 6, 0,
164:           	-1, 3, 1, 7, 0,
165:           	-2, 0, 1, 8, 0,
166:           	-2, -2, 1, 9, 9,
167:           	-1, -1, 1, 10, 9,
168:           	1, 1, 1, 11, 9,
169:           	2, 2, 1, 12, 9,
170:           	0, -3, 1, 13, 13,
171:           	3, 0, 1, 14, 13,
172:           	0, 3, 1, 15, 13,
173:           	-3, 0, 1, 16, 13,
174:           	0, 0, 0, 17, 13,
175:           	3, 3, 1, 18, 13,
176:           	0, 0, 0, 19, 13,
177:           	0, 0, 0, -1, -1,
178:           	0, 0, 0, -1, -1
179:           };
180:           
181:           #pragma idata bigdata
182:           
183:           /*
184:            * Display file point mode data for line drawing display
185:            */
186:           
187:           /* default data for ram buffer */
188:           volatile struct pixel_t pixel[PIXEL_NUM] = {
189:           	0, 0, 0, -1, -1
190:           },
191:           pixel_temp = {0};
192:           
193:           uint8_t prog_name[] = "nsaspook";
194:           #pragma idata
195:           
196:           #pragma	udata access my_access
197:           near uint8_t ctmu_button;
198:           near uint16_t switchState;
199:           #pragma udata
200:           
201:           uint8_t PEAK_READS = 1;
202:           volatile uint8_t CTMU_ADC_UPDATED = FALSE, TIME_CHARGE = FALSE, CTMU_WORKING = FALSE, SEND_PACKET = FALSE,
203:           	isr_channel = 0;
204:           volatile uint16_t touch_base[16],  charge_time[16]; //storage for reading parameters
205:           
206:           void high_handler(void); //reads the CTMU voltage using a ADC channel, interrupt driven RS-232
207:           void low_handler(void); // MATRIX updater
208:           
209:           void display_init(void); // setup display data structure.
210:           
211:           void pixel_init(void); // init the RAM pixel array with all of the ROM array.
212:           void pixel_set(uint8_t, uint8_t); // pixel, value
213:           void pixel_trans(uint8_t, int8_t, int8_t); // pixel,x,y
214:           void pixel_rotate(uint8_t, float); // pixel,degree
215:           void pixel_scale(uint8_t, float, float); // pixel,scale x,y
216:           
217:           uint8_t obj_init(uint8_t, uint8_t); // returns the ram object ID of the object copied from the ROM array
218:           void object_set(uint8_t, uint8_t); // object ID, value
219:           void object_trans(uint8_t, int8_t, int8_t); // object ID,x,y
220:           void object_rotate(uint8_t, float); // object ID, degrees
221:           void object_scale(uint8_t, float, float); // object ID,x,y
222:           
223:           #pragma code high_interrupt = 0x8
224:           
225:           void high_int(void)
226:           {
227:           	_asm goto high_handler _endasm
0008  EF94     GOTO 0x128
000A  F000     NOP
228:           }
000C  0012     RETURN 0
229:           #pragma code
230:           
231:           #pragma code low_interrupt = 0x18
232:           
233:           void low_int(void)
234:           {
235:           	_asm goto low_handler _endasm
0018  EF1C     GOTO 0x38
001A  F000     NOP
236:           }
001C  0012     RETURN 0
237:           #pragma code
238:           
239:           #pragma interrupt low_handler
240:           
241:           /* This is a simple scan converter to a random access display */
242:           void low_handler(void)
0038  CFDA     MOVFF FSR2H, PREINC1
003A  FFE4     NOP
003C  CFE9     MOVFF FSR0L, PREINC1
003E  FFE4     NOP
0040  CFEA     MOVFF FSR0H, PREINC1
0042  FFE4     NOP
0044  CFF3     MOVFF PRODL, PREINC1
0046  FFE4     NOP
0048  CFF4     MOVFF PRODH, PREINC1
004A  FFE4     NOP
004C  52E6     MOVF POSTINC1, F, ACCESS
243:           {
244:           	static uint8_t list_num = 0;
245:           	static uint16_t x, y;
246:           
247:           	if (PIR1bits.TMR2IF) {
004E  A29E     BTFSS PIR1, 1, ACCESS
0050  D064     BRA 0x11A
248:           		PIR1bits.TMR2IF = 0; // clear TMR2 int flag
0052  929E     BCF PIR1, 1, ACCESS
249:           		WriteTimer2(PDELAY);
0054  0EA8     MOVLW 0xA8
0056  6ECC     MOVWF TMR2, ACCESS
250:           		LATB = 0xff; // blank the display
0058  688A     SETF LATB, ACCESS
251:           		LATC = 0x00;
005A  6A8B     CLRF LATC, ACCESS
252:           		while (!pixel[list_num].v) { // quickly skip pixels that are off
005C  ECFC     CALL 0x11F8, 0
005E  F008     NOP
0060  ECE8     CALL 0x11D0, 0
0062  F008     NOP
0064  50EF     MOVF INDF0, W, ACCESS
0066  E111     BNZ 0x8A
253:           			if ((pixel[list_num].m_link == -1) || (++list_num >= PIXEL_NUM)) {
0068  51D7     MOVF list_num, W, BANKED
006A  EC16     CALL 0x102C, 0
006C  F008     NOP
006E  ECBA     CALL 0x1174, 0
0070  F008     NOP
0072  50EF     MOVF INDF0, W, ACCESS
0074  08FF     SUBLW 0xFF
0076  E008     BZ 0x88
0078  ECDA     CALL 0x11B4, 0
007A  F008     NOP
007C  E604     BN 0x86
007E  0E00     MOVLW 0x0
0080  5C30     SUBWF __tmp_1, W, ACCESS
0082  0E01     MOVLW 0x1
0084  5831     SUBWFB 0x31, W, ACCESS
0086  E3EA     BNC 0x5C
11B4  2BD7     INCF list_num, F, BANKED
11B6  51D7     MOVF list_num, W, BANKED
11B8  6E30     MOVWF __tmp_1, ACCESS
11BA  6A31     CLRF 0x31, ACCESS
11BC  90D8     BCF STATUS, 0, ACCESS
11BE  5031     MOVF 0x31, W, ACCESS
11C0  0012     RETURN 0
254:           				list_num = 0;
0088  6BD7     CLRF list_num, BANKED
255:           				break;
256:           			}
257:           		}
258:           		// We move up the display list data array and display a DOT on the matrix display as needed
259:           		if ((pixel[list_num].x >= 0) && (pixel[list_num].y >= 0)) { // clip display space to +x and +y
008A  51D7     MOVF list_num, W, BANKED
008C  EC16     CALL 0x102C, 0
008E  F008     NOP
0090  CFEF     MOVFF INDF0, __tmp_1
0092  F030     NOP
0094  3430     RLCF __tmp_1, W, ACCESS
0096  E231     BC 0xFA
0098  51D7     MOVF list_num, W, BANKED
009A  EC16     CALL 0x102C, 0
009C  F008     NOP
009E  52EE     MOVF POSTINC0, F, ACCESS
00A0  CFEF     MOVFF INDF0, 0x31
00A2  F031     NOP
00A4  3431     RLCF 0x31, W, ACCESS
00A6  E229     BC 0xFA
260:           			x = 1; // load a bit at origin x0
00A8  0E01     MOVLW 0x1
00AA  0100     MOVLB 0x0
00AC  6FA0     MOVWF x, BANKED
00AE  6BA1     CLRF 0xA1, BANKED
261:           			y = 1; // load a bit at origin y0
00B0  6FA2     MOVWF y, BANKED
00B2  6BA3     CLRF 0xA3, BANKED
262:           			x = x << pixel[list_num].x; // move the cross bar to the correct location
00B4  ECFC     CALL 0x11F8, 0
00B6  F008     NOP
00B8  50EF     MOVF INDF0, W, ACCESS
00BA  E006     BZ 0xC8
00BC  0100     MOVLB 0x0
00BE  90D8     BCF STATUS, 0, ACCESS
00C0  37A0     RLCF x, F, BANKED
00C2  37A1     RLCF 0xA1, F, BANKED
00C4  04E8     DECF WREG, W, ACCESS
00C6  E1FB     BNZ 0xBE
263:           			y = y << pixel[list_num].y;
00C8  ECFC     CALL 0x11F8, 0
00CA  F008     NOP
00CC  52EE     MOVF POSTINC0, F, ACCESS
00CE  50EF     MOVF INDF0, W, ACCESS
00D0  E006     BZ 0xDE
00D2  0100     MOVLB 0x0
00D4  90D8     BCF STATUS, 0, ACCESS
00D6  37A2     RLCF y, F, BANKED
00D8  37A3     RLCF 0xA3, F, BANKED
00DA  04E8     DECF WREG, W, ACCESS
00DC  E1FB     BNZ 0xD4
264:           			if (pixel[list_num].v) {
00DE  ECFC     CALL 0x11F8, 0
00E0  F008     NOP
00E2  ECE8     CALL 0x11D0, 0
00E4  F008     NOP
00E6  50EF     MOVF INDF0, W, ACCESS
00E8  E006     BZ 0xF6
11D0  0E02     MOVLW 0x2
11D2  D03D     BRA __pa_32
11F8  0100     MOVLB 0x0
11FA  51D7     MOVF list_num, W, BANKED
11FC  EF16     GOTO 0x102C
11FE  F008     NOP
265:           				LATB = ~y; // set to low for dot on, load the crossbar into the chip outputs
00EA  0100     MOVLB 0x0
00EC  1DA2     COMF y, W, BANKED
00EE  6E8A     MOVWF LATB, ACCESS
266:           				LATC = x; // set to high for dot on
00F0  C0A0     MOVFF x, LATC
00F2  FF8B     NOP
267:           			} else { // no dot
00F4  D002     BRA 0xFA
268:           				LATB = 0xff;
00F6  688A     SETF LATB, ACCESS
269:           				LATC = 0x00;
00F8  6A8B     CLRF LATC, ACCESS
270:           			}
271:           		}
272:           		if ((pixel[list_num].m_link == -1) || (++list_num >= PIXEL_NUM)) list_num = 0; // start over again from next line
00FA  ECFC     CALL 0x11F8, 0
00FC  F008     NOP
00FE  ECBA     CALL 0x1174, 0
0100  F008     NOP
0102  50EF     MOVF INDF0, W, ACCESS
0104  08FF     SUBLW 0xFF
0106  E008     BZ 0x118
0108  ECDA     CALL 0x11B4, 0
010A  F008     NOP
010C  E604     BN 0x116
010E  0E00     MOVLW 0x0
0110  5C30     SUBWF __tmp_1, W, ACCESS
0112  0E01     MOVLW 0x1
0114  5831     SUBWFB 0x31, W, ACCESS
0116  E301     BNC 0x11A
0118  6BD7     CLRF list_num, BANKED
1174  0E03     MOVLW 0x3
1176  D06B     BRA __pa_32
273:           	}
274:           }
011A  52E5     MOVF POSTDEC1, F, ACCESS
011C  CFE5     MOVFF POSTDEC1, PRODH
011E  FFF4     NOP
0120  CFE5     MOVFF POSTDEC1, PRODL
0122  FFF3     NOP
0124  EFD3     GOTO 0x11A6
0126  F008     NOP
11A6  CFE5     MOVFF POSTDEC1, FSR0H
11A8  FFEA     NOP
11AA  CFE5     MOVFF POSTDEC1, FSR0L
11AC  FFE9     NOP
11AE  CFE5     MOVFF POSTDEC1, FSR2H
11B0  FFDA     NOP
11B2  0011     RETFIE 1
275:           
276:           #pragma interrupt high_handler
277:           
278:           void high_handler(void)
0128  CFDA     MOVFF FSR2H, PREINC1
012A  FFE4     NOP
012C  CFE2     MOVFF FSR1H, FSR2H
012E  FFDA     NOP
0130  CFE9     MOVFF FSR0L, PREINC1
0132  FFE4     NOP
0134  CFEA     MOVFF FSR0H, PREINC1
0136  FFE4     NOP
0138  CFF6     MOVFF TBLPTRL, PREINC1
013A  FFE4     NOP
013C  CFF7     MOVFF TBLPTRH, PREINC1
013E  FFE4     NOP
0140  CFF8     MOVFF TBLPTRU, PREINC1
0142  FFE4     NOP
0144  CFF5     MOVFF TABLAT, PREINC1
0146  FFE4     NOP
0148  CFF3     MOVFF PRODL, PREINC1
014A  FFE4     NOP
014C  CFF4     MOVFF PRODH, PREINC1
014E  FFE4     NOP
0150  CFFA     MOVFF PCLATH, PREINC1
0152  FFE4     NOP
0154  CFFB     MOVFF PCLATU, PREINC1
0156  FFE4     NOP
0158  EE00     LFSR 0, 0x19
015A  F019     NOP
015C  0E14     MOVLW 0x14
015E  04E8     DECF WREG, W, ACCESS
0160  E303     BNC 0x168
0162  CFEE     MOVFF POSTINC0, PREINC1
0164  FFE4     NOP
0166  D7FB     BRA 0x15E
0168  EE00     LFSR 0, 0x0
016A  F000     NOP
016C  0E19     MOVLW 0x19
016E  04E8     DECF WREG, W, ACCESS
0170  E303     BNC 0x178
0172  CFEE     MOVFF POSTINC0, PREINC1
0174  FFE4     NOP
0176  D7FB     BRA 0x16E
0178  52E6     MOVF POSTINC1, F, ACCESS
279:           {
280:           	static union Timers timer;
281:           	static uint8_t i = 0, host_c, *data_ptr = prog_name;
282:           	static int16_t data_pos = 0, data_len = 0;
283:           
284:           	/* start with data_ptr pointed to address of data, data_len to length of data in bytes, data_pos to 0 to start at the beginning of data block */
285:           	/* then enable the interrupt and wait for the interrupt enable flag to clear
286:           	/* send buffer and count xmit data bytes for host link */
287:           	if (PIE3bits.TX2IE && PIR3bits.TX2IF) { // send data TX2
017A  50A3     MOVF PIE3, W, ACCESS
017C  0B10     ANDLW 0x10
017E  E01F     BZ 0x1BE
0180  50A4     MOVF PIR3, W, ACCESS
0182  0B10     ANDLW 0x10
0184  E01C     BZ 0x1BE
288:           		if (data_pos >= data_len) { // buffer has been sent
0186  0100     MOVLB 0x0
0188  51DC     MOVF 0xDC, W, BANKED
018A  19DE     XORWF 0xDE, W, BANKED
018C  AEE8     BTFSS WREG, 7, ACCESS
018E  D002     BRA 0x194
0190  35DE     RLCF 0xDE, W, BANKED
0192  D004     BRA 0x19C
0194  51DD     MOVF data_len, W, BANKED
0196  5DDB     SUBWF data_pos, W, BANKED
0198  51DE     MOVF 0xDE, W, BANKED
019A  59DC     SUBWFB 0xDC, W, BANKED
019C  E305     BNC 0x1A8
289:           			if (TXSTA2bits.TRMT) { // last bit has been shifted out
019E  A2BA     BTFSS TXSTA2, 1, ACCESS
01A0  D00E     BRA 0x1BE
290:           				PIE3bits.TX2IE = 0; // stop data xmit
01A2  98A3     BCF PIE3, 4, ACCESS
291:           				SEND_PACKET = FALSE;
01A4  6BD5     CLRF SEND_PACKET, BANKED
292:           			}
293:           		} else {
01A6  D00B     BRA 0x1BE
294:           			TXREG2 = *data_ptr; // send data and clear PIR3bits.TX2IF
01A8  C0D9     MOVFF data_ptr, FSR0L
01AA  FFE9     NOP
01AC  C0DA     MOVFF 0xDA, FSR0H
01AE  FFEA     NOP
01B0  50EF     MOVF INDF0, W, ACCESS
01B2  6E79     MOVWF TXREG2, ACCESS
295:           
296:           			data_pos++; // move the data pointer
01B4  2BDB     INCF data_pos, F, BANKED
01B6  0E00     MOVLW 0x0
01B8  23DC     ADDWFC 0xDC, F, BANKED
297:           			data_ptr++; // move the buffer pointer position
01BA  2BD9     INCF data_ptr, F, BANKED
01BC  23DA     ADDWFC 0xDA, F, BANKED
298:           		}
299:           	}
300:           
301:           	if (PIR3bits.RC2IF) { // receive data  RX2
01BE  AAA4     BTFSS PIR3, 5, ACCESS
01C0  D013     BRA 0x1E8
302:           		if (RCSTA2bits.OERR) {
01C2  A2A6     BTFSS RCSTA2, 1, ACCESS
01C4  D002     BRA 0x1CA
303:           			RCSTA2bits.CREN = 0; //	clear overrun
01C6  98A6     BCF RCSTA2, 4, ACCESS
304:           			RCSTA2bits.CREN = 1; // re-enable
01C8  88A6     BSF RCSTA2, 4, ACCESS
305:           		}
306:           
307:           		host_c = RCREG2;
01CA  CF7A     MOVFF RCREG2, host_c
01CC  F0A6     NOP
308:           		prog_name[0] = host_c;
01CE  C0A6     MOVFF host_c, prog_name
01D0  FB05     NOP
309:           		data_ptr = prog_name;
01D2  0100     MOVLB 0x0
01D4  0E05     MOVLW 0x5
01D6  6FD9     MOVWF data_ptr, BANKED
01D8  0E0B     MOVLW 0xB
01DA  6FDA     MOVWF 0xDA, BANKED
310:           		data_pos = 0;
01DC  6BDB     CLRF data_pos, BANKED
01DE  6BDC     CLRF 0xDC, BANKED
311:           		data_len = 1;
01E0  0E01     MOVLW 0x1
01E2  6FDD     MOVWF data_len, BANKED
01E4  6BDE     CLRF 0xDE, BANKED
312:           		PIE3bits.TX2IE = 1; // start data xmit
01E6  88A3     BSF PIE3, 4, ACCESS
313:           	}
314:           
315:           	if (INTCONbits.TMR0IF) { // check timer0 irq
01E8  A4F2     BTFSS INTCON, 2, ACCESS
01EA  D02D     BRA 0x246
316:           		// clr  TMR0 int flag
317:           		INTCONbits.TMR0IF = 0; //clear interrupt flag
01EC  94F2     BCF INTCON, 2, ACCESS
318:           		if (!CTMUCONHbits.IDISSEN) { // charge cycle timer0 int, because not shorting the CTMU voltage.
01EE  010F     MOVLB 0xF
01F0  B355     BTFSC 0x55, 1, BANKED
01F2  D013     BRA 0x21A
319:           			LATEbits.LATE0 = 1; // flash external led
01F4  808D     BSF LATE, 0, ACCESS
320:           			CTMUCONLbits.EDG1STAT = 0; // Stop charging touch circuit
01F6  9154     BCF 0x54, 0, BANKED
321:           			TIME_CHARGE = FALSE; // clear charging flag
01F8  0100     MOVLB 0x0
01FA  6BD3     CLRF TIME_CHARGE, BANKED
322:           			CTMU_WORKING = TRUE; // set working flag, doing touch ADC conversion
01FC  0E01     MOVLW 0x1
01FE  6FD4     MOVWF CTMU_WORKING, BANKED
323:           			LATEbits.LATE1 = 1; // flash external led
0200  828D     BSF LATE, 1, ACCESS
324:           			// configure ADC for next reading
325:           			ADCON0bits.CHS = isr_channel; // Select ADC
0202  51D6     MOVF isr_channel, W, BANKED
0204  0B1F     ANDLW 0x1F
0206  6EF3     MOVWF PRODL, ACCESS
0208  46F3     RLNCF PRODL, F, ACCESS
020A  46F3     RLNCF PRODL, F, ACCESS
020C  0E83     MOVLW 0x83
020E  14C2     ANDWF ADCON0, W, ACCESS
0210  10F3     IORWF PRODL, W, ACCESS
0212  6EC2     MOVWF ADCON0, ACCESS
326:           			ADCON0bits.ADON = 1; // Turn on ADC
0214  80C2     BSF ADCON0, 0, ACCESS
327:           			ADCON0bits.GO = 1; // and begin A/D conv, will set adc int flag when done.
0216  82C2     BSF ADCON0, 1, ACCESS
328:           		} else { // discharge cycle timer0 int, because CTMU voltage is shorted
0218  D016     BRA 0x246
329:           			LATEbits.LATE0 = 0; // flash external led
021A  908D     BCF LATE, 0, ACCESS
330:           			CTMUCONHbits.IDISSEN = 0; // end drain of touch circuit
021C  9355     BCF 0x55, 1, BANKED
331:           			TIME_CHARGE = TRUE; // set charging flag
021E  0100     MOVLB 0x0
0220  0E01     MOVLW 0x1
0222  6FD3     MOVWF TIME_CHARGE, BANKED
332:           			CTMU_WORKING = TRUE; // set working flag, doing
0224  6FD4     MOVWF CTMU_WORKING, BANKED
333:           			WriteTimer0(charge_time[isr_channel]); // set timer to charge rate time
0226  EC0C     CALL 0x1218, 0
0228  F009     NOP
022A  0E80     MOVLW 0x80
022C  26E9     ADDWF FSR0L, F, ACCESS
022E  0E00     MOVLW 0x0
0230  22EA     ADDWFC FSR0H, F, ACCESS
0232  CFEE     MOVFF POSTINC0, POSTINC1
0234  FFE6     NOP
0236  CFEF     MOVFF INDF0, POSTINC1
0238  FFE6     NOP
023A  ECAF     CALL 0x235E, 0
023C  F011     NOP
023E  52E5     MOVF POSTDEC1, F, ACCESS
0240  52E5     MOVF POSTDEC1, F, ACCESS
1218  51D6     MOVF isr_channel, W, BANKED
121A  6EE9     MOVWF FSR0L, ACCESS
121C  6AEA     CLRF FSR0H, ACCESS
121E  90D8     BCF STATUS, 0, ACCESS
1220  36E9     RLCF FSR0L, F, ACCESS
1222  36EA     RLCF FSR0H, F, ACCESS
1224  0012     RETURN 0
334:           			CTMUCONLbits.EDG1STAT = 1; // Begin charging the touch circuit
0242  010F     MOVLB 0xF
0244  8154     BSF 0x54, 0, BANKED
335:           		}
336:           	}
337:           	if (PIR1bits.ADIF) { // check ADC irq
0246  AC9E     BTFSS PIR1, 6, ACCESS
0248  D04A     BRA 0x2DE
338:           		PIR1bits.ADIF = 0; // clear ADC int flag
024A  9C9E     BCF PIR1, 6, ACCESS
339:           		LATEbits.LATE1 = 0; // flash external led
024C  928D     BCF LATE, 1, ACCESS
340:           		timer.lt = ADRES;
024E  CFC3     MOVFF ADRESL, timer
0250  F0A4     NOP
0252  CFC4     MOVFF ADRESH, 0xA5
0254  F0A5     NOP
341:           		timer.lt = timer.lt >> CHOP_BITS; // toss lower bit noise
0256  C0A4     MOVFF timer, __tmp_2
0258  F032     NOP
025A  C0A5     MOVFF 0xA5, 0x33
025C  F033     NOP
025E  0E04     MOVLW 0x4
0260  90D8     BCF STATUS, 0, ACCESS
0262  3233     RRCF 0x33, F, ACCESS
0264  3232     RRCF __tmp_2, F, ACCESS
0266  04E8     DECF WREG, W, ACCESS
0268  E1FB     BNZ 0x260
026A  C032     MOVFF __tmp_2, timer
026C  F0A4     NOP
026E  C033     MOVFF 0x33, 0xA5
0270  F0A5     NOP
342:           		if ((timer.lt) < (touch_base[isr_channel] - TRIP)) { // see if we have a pressed button
0272  EC67     CALL 0x10CE, 0
0274  F008     NOP
0276  0100     MOVLB 0x0
0278  5032     MOVF __tmp_2, W, ACCESS
027A  5DA4     SUBWF timer, W, BANKED
027C  5033     MOVF 0x33, W, ACCESS
027E  59A5     SUBWFB 0xA5, W, BANKED
0280  E20C     BC 0x29A
10CE  0100     MOVLB 0x0
10D0  D8A3     RCALL __pa_27
10D2  0E60     MOVLW 0x60
10D4  26E9     ADDWF FSR0L, F, ACCESS
10D6  0E00     MOVLW 0x0
10D8  22EA     ADDWFC FSR0H, F, ACCESS
10DA  CFEE     MOVFF POSTINC0, __tmp_2
10DC  F032     NOP
10DE  CFEF     MOVFF INDF0, 0x33
10E0  F033     NOP
10E2  0E20     MOVLW 0x20
10E4  5E32     SUBWF __tmp_2, F, ACCESS
10E6  0E00     MOVLW 0x0
10E8  5A33     SUBWFB 0x33, F, ACCESS
10EA  0012     RETURN 0
343:           			if (isr_channel == 0) switchState = PRESSED;
0282  0100     MOVLB 0x0
0284  51D6     MOVF isr_channel, W, BANKED
0286  E103     BNZ 0x28E
0288  0E01     MOVLW 0x1
028A  6E2E     MOVWF switchState, ACCESS
028C  6A2F     CLRF 0x2F, ACCESS
344:           			if (isr_channel == 1) switchState = UNPRESSED;
028E  05D6     DECF isr_channel, W, BANKED
0290  E102     BNZ 0x296
0292  6A2E     CLRF switchState, ACCESS
0294  6A2F     CLRF 0x2F, ACCESS
345:           			LATEbits.LATE2 = 1; // flash external led
0296  848D     BSF LATE, 2, ACCESS
346:           			//			pixel[DIAG_BITS + isr_channel].v = 1;
347:           		} else if ((timer.lt) > (touch_base[isr_channel] - TRIP + HYST)) {
0298  D00D     BRA 0x2B4
029A  EC67     CALL 0x10CE, 0
029C  F008     NOP
029E  0E08     MOVLW 0x8
02A0  2632     ADDWF __tmp_2, F, ACCESS
02A2  0E00     MOVLW 0x0
02A4  2233     ADDWFC 0x33, F, ACCESS
02A6  0100     MOVLB 0x0
02A8  51A4     MOVF timer, W, BANKED
02AA  5C32     SUBWF __tmp_2, W, ACCESS
02AC  51A5     MOVF 0xA5, W, BANKED
02AE  5833     SUBWFB 0x33, W, ACCESS
02B0  E201     BC 0x2B4
348:           			//			switchState = UNPRESSED;
349:           			LATEbits.LATE2 = 0; // flash external led
02B2  948D     BCF LATE, 2, ACCESS
350:           			//			pixel[DIAG_BITS + isr_channel].v = 0;
351:           		}
352:           		TMR3H = timer.bt[1];
02B4  C0A5     MOVFF 0xA5, TMR3H
02B6  FFB3     NOP
353:           		TMR3L = timer.bt[0]; // copy low byte and write to timer counter
02B8  C0A4     MOVFF timer, TMR3L
02BA  FFB2     NOP
354:           		CTMU_ADC_UPDATED = TRUE; // New data is in timer3 counter, set to FALSE in main program flow
02BC  0100     MOVLB 0x0
02BE  0E01     MOVLW 0x1
02C0  6FD2     MOVWF CTMU_ADC_UPDATED, BANKED
355:           		CTMU_WORKING = FALSE; // clear working flag, ok to read timer3 counter.
02C2  6BD4     CLRF CTMU_WORKING, BANKED
356:           		// config CTMU for next reading
357:           		CTMUCONHbits.CTMUEN = 1; // Enable the CTMU
02C4  010F     MOVLB 0xF
02C6  8F55     BSF 0x55, 7, BANKED
358:           		CTMUCONLbits.EDG1STAT = 0; // Set Edge status bits to zero
02C8  9154     BCF 0x54, 0, BANKED
359:           		CTMUCONLbits.EDG2STAT = 0;
02CA  9354     BCF 0x54, 1, BANKED
360:           		CTMUCONHbits.IDISSEN = 1; // drain charge on the circuit
02CC  8355     BSF 0x55, 1, BANKED
361:           		WriteTimer0(TIMERDISCHARGE); // set timer to discharge rate
02CE  0E38     MOVLW 0x38
02D0  6EE6     MOVWF POSTINC1, ACCESS
02D2  0EC7     MOVLW 0xC7
02D4  6EE6     MOVWF POSTINC1, ACCESS
02D6  ECAF     CALL 0x235E, 0
02D8  F011     NOP
02DA  52E5     MOVF POSTDEC1, F, ACCESS
02DC  52E5     MOVF POSTDEC1, F, ACCESS
362:           	}
363:           }
02DE  52E5     MOVF POSTDEC1, F, ACCESS
02E0  EE00     LFSR 0, 0x18
02E2  F018     NOP
02E4  0E19     MOVLW 0x19
02E6  04E8     DECF WREG, W, ACCESS
02E8  E303     BNC 0x2F0
02EA  CFE5     MOVFF POSTDEC1, POSTDEC0
02EC  FFED     NOP
02EE  D7FB     BRA 0x2E6
02F0  EE00     LFSR 0, 0x2C
02F2  F02C     NOP
02F4  0E14     MOVLW 0x14
02F6  04E8     DECF WREG, W, ACCESS
02F8  E303     BNC 0x300
02FA  CFE5     MOVFF POSTDEC1, POSTDEC0
02FC  FFED     NOP
02FE  D7FB     BRA 0x2F6
0300  CFE5     MOVFF POSTDEC1, PCLATU
0302  FFFB     NOP
0304  CFE5     MOVFF POSTDEC1, PCLATH
0306  FFFA     NOP
0308  CFE5     MOVFF POSTDEC1, PRODH
030A  FFF4     NOP
030C  CFE5     MOVFF POSTDEC1, PRODL
030E  FFF3     NOP
0310  CFE5     MOVFF POSTDEC1, TABLAT
0312  FFF5     NOP
0314  CFE5     MOVFF POSTDEC1, TBLPTRU
0316  FFF8     NOP
0318  CFE5     MOVFF POSTDEC1, TBLPTRH
031A  FFF7     NOP
031C  CFE5     MOVFF POSTDEC1, TBLPTRL
031E  FFF6     NOP
0320  EFD3     GOTO 0x11A6
0322  F008     NOP
364:           
365:           uint16_t touch_base_calc(uint8_t channel)
0324  CFD9     MOVFF FSR2L, POSTINC1
0326  FFE6     NOP
0328  CFE1     MOVFF FSR1L, FSR2L
032A  FFD9     NOP
366:           {
367:           	static uint32_t t_avg = 0;
368:           	static int16_t i;
369:           
370:           	t_avg = 0;
032C  0100     MOVLB 0x0
032E  6BDF     CLRF t_avg, BANKED
0330  6BE0     CLRF 0xE0, BANKED
0332  6BE1     CLRF 0xE1, BANKED
0334  6BE2     CLRF 0xE2, BANKED
371:           	touch_channel(channel);
0336  0EFE     MOVLW 0xFE
0338  CFDB     MOVFF PLUSW2, POSTINC1
033A  FFE6     NOP
033C  D879     RCALL touch_channel
033E  52E5     MOVF POSTDEC1, F, ACCESS
372:           	CTMU_ADC_UPDATED = FALSE;
0340  0100     MOVLB 0x0
0342  6BD2     CLRF CTMU_ADC_UPDATED, BANKED
373:           	while (!CTMU_ADC_UPDATED) ClrWdt(); // wait for touch update cycle
0344  0100     MOVLB 0x0
0346  51D2     MOVF CTMU_ADC_UPDATED, W, BANKED
0348  E102     BNZ 0x34E
034A  0004     CLRWDT
034C  D7FB     BRA 0x344
374:           	for (i = 0; i < 8; i++) {
034E  0100     MOVLB 0x0
0350  6BA7     CLRF i, BANKED
0352  6BA8     CLRF 0xA8, BANKED
0354  0E08     MOVLW 0x8
0356  0100     MOVLB 0x0
0358  AFA8     BTFSS 0xA8, 7, BANKED
035A  D002     BRA 0x360
035C  90D8     BCF STATUS, 0, ACCESS
035E  D003     BRA 0x366
0360  5DA7     SUBWF i, W, BANKED
0362  0E00     MOVLW 0x0
0364  59A8     SUBWFB 0xA8, W, BANKED
0366  E222     BC 0x3AC
03A2  0100     MOVLB 0x0
03A4  2BA7     INCF i, F, BANKED
03A6  0E00     MOVLW 0x0
03A8  23A8     ADDWFC 0xA8, F, BANKED
03AA  D7D4     BRA 0x354
375:           		CTMU_ADC_UPDATED = FALSE;
0368  0100     MOVLB 0x0
036A  6BD2     CLRF CTMU_ADC_UPDATED, BANKED
376:           		while (!CTMU_ADC_UPDATED) ClrWdt(); // wait for touch update cycle
036C  0100     MOVLB 0x0
036E  51D2     MOVF CTMU_ADC_UPDATED, W, BANKED
0370  E102     BNZ 0x376
0372  0004     CLRWDT
0374  D7FB     BRA 0x36C
377:           		t_avg += ctmu_touch(channel, FALSE);
0376  6AE6     CLRF POSTINC1, ACCESS
0378  0EFE     MOVLW 0xFE
037A  CFDB     MOVFF PLUSW2, POSTINC1
037C  FFE6     NOP
037E  D8D4     RCALL ctmu_touch
0380  52E5     MOVF POSTDEC1, F, ACCESS
0382  52E5     MOVF POSTDEC1, F, ACCESS
0384  CFF3     MOVFF PRODL, __tmp_0
0386  F000     NOP
0388  CFF4     MOVFF PRODH, 0x1
038A  F001     NOP
038C  0100     MOVLB 0x0
038E  5000     MOVF __tmp_0, W, ACCESS
0390  0100     MOVLB 0x0
0392  27DF     ADDWF t_avg, F, BANKED
0394  0100     MOVLB 0x0
0396  5001     MOVF 0x1, W, ACCESS
0398  0100     MOVLB 0x0
039A  23E0     ADDWFC 0xE0, F, BANKED
039C  0E00     MOVLW 0x0
039E  23E1     ADDWFC 0xE1, F, BANKED
03A0  23E2     ADDWFC 0xE2, F, BANKED
378:           	}
379:           	touch_base[channel] = (uint16_t) t_avg / 8L;
03AC  C0DF     MOVFF t_avg, __tmp_0
03AE  F000     NOP
03B0  C0E0     MOVFF 0xE0, 0x1
03B2  F001     NOP
03B4  6A02     CLRF x, ACCESS
03B6  6A03     CLRF y, ACCESS
03B8  0E08     MOVLW 0x8
03BA  6E24     MOVWF 0x24, ACCESS
03BC  6A25     CLRF 0x25, ACCESS
03BE  6A26     CLRF 0x26, ACCESS
03C0  6A27     CLRF 0x27, ACCESS
03C2  C000     MOVFF __tmp_0, 0x1F
03C4  F01F     NOP
03C6  C001     MOVFF 0x1, 0x20
03C8  F020     NOP
03CA  C002     MOVFF x, 0x21
03CC  F021     NOP
03CE  C003     MOVFF y, 0x22
03D0  F022     NOP
03D2  EC40     CALL 0x1480, 0
03D4  F00A     NOP
03D6  C01F     MOVFF 0x1F, __tmp_0
03D8  F000     NOP
03DA  C020     MOVFF 0x20, 0x1
03DC  F001     NOP
03DE  C021     MOVFF 0x21, x
03E0  F002     NOP
03E2  C022     MOVFF 0x22, y
03E4  F003     NOP
03E6  0EFE     MOVLW 0xFE
03E8  6AEA     CLRF FSR0H, ACCESS
03EA  34DB     RLCF PLUSW2, W, ACCESS
03EC  0BFE     ANDLW 0xFE
03EE  36EA     RLCF FSR0H, F, ACCESS
03F0  6EE9     MOVWF FSR0L, ACCESS
03F2  0E60     MOVLW 0x60
03F4  26E9     ADDWF FSR0L, F, ACCESS
03F6  0E00     MOVLW 0x0
03F8  22EA     ADDWFC FSR0H, F, ACCESS
03FA  C000     MOVFF __tmp_0, POSTINC0
03FC  FFEE     NOP
03FE  C001     MOVFF 0x1, POSTDEC0
0400  FFED     NOP
380:           	return touch_base[channel];
0402  0EFE     MOVLW 0xFE
0404  6AEA     CLRF FSR0H, ACCESS
0406  34DB     RLCF PLUSW2, W, ACCESS
0408  0BFE     ANDLW 0xFE
040A  36EA     RLCF FSR0H, F, ACCESS
040C  6EE9     MOVWF FSR0L, ACCESS
040E  0E60     MOVLW 0x60
0410  26E9     ADDWF FSR0L, F, ACCESS
0412  0E00     MOVLW 0x0
0414  22EA     ADDWFC FSR0H, F, ACCESS
0416  CFEE     MOVFF POSTINC0, __tmp_0
0418  F000     NOP
041A  CFEF     MOVFF INDF0, 0x1
041C  F001     NOP
041E  C000     MOVFF __tmp_0, PRODL
0420  FFF3     NOP
0422  C001     MOVFF 0x1, PRODH
0424  FFF4     NOP
0426  D000     BRA 0x428
381:           }
0428  52E5     MOVF POSTDEC1, F, ACCESS
042A  CFE7     MOVFF INDF1, FSR2L
042C  FFD9     NOP
042E  0012     RETURN 0
382:           
383:           void touch_channel(uint8_t channel)
0430  CFD9     MOVFF FSR2L, POSTINC1
0432  FFE6     NOP
0434  CFE1     MOVFF FSR1L, FSR2L
0436  FFD9     NOP
384:           {
385:           	if (channel > MAX_CHAN) return;
0438  0EFE     MOVLW 0xFE
043A  50DB     MOVF PLUSW2, W, ACCESS
043C  0803     SUBLW 0x3
043E  E201     BC 0x442
0440  D011     BRA 0x464
386:           	while (CTMU_WORKING) ClrWdt(); // wait for CTMU idle
0442  0100     MOVLB 0x0
0444  51D4     MOVF CTMU_WORKING, W, BANKED
0446  E002     BZ 0x44C
0448  0004     CLRWDT
044A  D7FB     BRA 0x442
387:           	INTCONbits.GIEH = 0;
044C  9EF2     BCF INTCON, 7, ACCESS
388:           	isr_channel = channel;
044E  0EFE     MOVLW 0xFE
0450  CFDB     MOVFF PLUSW2, isr_channel
0452  F0D6     NOP
389:           	CTMU_ADC_UPDATED = FALSE;
0454  0100     MOVLB 0x0
0456  6BD2     CLRF CTMU_ADC_UPDATED, BANKED
390:           	INTCONbits.GIEH = 1;
0458  8EF2     BSF INTCON, 7, ACCESS
391:           	while (!CTMU_ADC_UPDATED) ClrWdt(); // wait for touch update cycle
045A  0100     MOVLB 0x0
045C  51D2     MOVF CTMU_ADC_UPDATED, W, BANKED
045E  E102     BNZ 0x464
0460  0004     CLRWDT
0462  D7FB     BRA 0x45A
392:           }
0464  52E5     MOVF POSTDEC1, F, ACCESS
0466  CFE7     MOVFF INDF1, FSR2L
0468  FFD9     NOP
046A  0012     RETURN 0
393:           
394:           int16_t ctmu_setup(uint8_t current, uint8_t channel)
046C  ECF7     CALL 0x11EE, 0
046E  F008     NOP
395:           {
396:           	//CTMUCONH/1 - CTMU Control registers
397:           	CTMUCONH = 0x00; //make sure CTMU is disabled
0470  010F     MOVLB 0xF
0472  6B55     CLRF 0x55, BANKED
398:           	CTMUCONL = 0x90;
0474  0E90     MOVLW 0x90
0476  6F54     MOVWF 0x54, BANKED
399:           	//CTMU continues to run when emulator is stopped,CTMU continues
400:           	//to run in idle mode,Time Generation mode disabled, Edges are blocked
401:           	//No edge sequence order, Analog current source not grounded, trigger
402:           	//output disabled, Edge2 polarity = positive level, Edge2 source =
403:           	//source 0, Edge1 polarity = positive level, Edge1 source = source 0,
404:           	//CTMUICON - CTMU Current Control Register
405:           	CTMUICON = 0x01; //.55uA, Nominal - No Adjustment default
0478  0E01     MOVLW 0x1
047A  6F53     MOVWF 0x53, BANKED
406:           
407:           	switch (current) {
047C  0EFE     MOVLW 0xFE
047E  50DB     MOVF PLUSW2, W, ACCESS
0480  0A0E     XORLW 0xE
0482  E017     BZ 0x4B2
0484  0A03     XORLW 0x3
0486  E00F     BZ 0x4A6
0488  0A01     XORLW 0x1
048A  E007     BZ 0x49A
048C  0A07     XORLW 0x7
048E  E118     BNZ 0x4C0
408:           	case 11:
409:           		charge_time[channel] = TIMERCHARGE_BASE_1;
0490  EC20     CALL 0x1040, 0
0492  F008     NOP
0494  6AEE     CLRF POSTINC0, ACCESS
0496  0EFA     MOVLW 0xFA
410:           		break;
0498  D011     BRA 0x4BC
411:           	case 12:
412:           		charge_time[channel] = TIMERCHARGE_BASE_2;
049A  EC20     CALL 0x1040, 0
049C  F008     NOP
049E  0E67     MOVLW 0x67
04A0  6EEE     MOVWF POSTINC0, ACCESS
04A2  0EF0     MOVLW 0xF0
413:           		break;
04A4  D00B     BRA 0x4BC
414:           	case 13:
415:           		charge_time[channel] = TIMERCHARGE_BASE_3;
04A6  EC20     CALL 0x1040, 0
04A8  F008     NOP
04AA  0EE8     MOVLW 0xE8
04AC  6EEE     MOVWF POSTINC0, ACCESS
04AE  0EFD     MOVLW 0xFD
416:           		break;
04B0  D005     BRA 0x4BC
417:           	case 14:
418:           		charge_time[channel] = TIMERCHARGE_BASE_4;
04B2  EC20     CALL 0x1040, 0
04B4  F008     NOP
04B6  0E4F     MOVLW 0x4F
04B8  6EEE     MOVWF POSTINC0, ACCESS
04BA  0EF4     MOVLW 0xF4
04BC  6EED     MOVWF POSTDEC0, ACCESS
419:           		break;
04BE  D007     BRA 0x4CE
420:           	default:
421:           		charge_time[channel] = TIMERCHARGE_BASE_X10; // faster
04C0  EC20     CALL 0x1040, 0
04C2  F008     NOP
04C4  0E78     MOVLW 0x78
04C6  6EEE     MOVWF POSTINC0, ACCESS
04C8  68ED     SETF POSTDEC0, ACCESS
422:           		CTMUICON = 0b01111101; //.55uA, Adjustment
04CA  0E7D     MOVLW 0x7D
04CC  6F53     MOVWF 0x53, BANKED
423:           
424:           		break;
425:           	}
426:           	if (current == 0x02) {
04CE  0EFE     MOVLW 0xFE
04D0  50DB     MOVF PLUSW2, W, ACCESS
04D2  0802     SUBLW 0x2
04D4  E107     BNZ 0x4E4
427:           		CTMUICON = 0x02; //5.5uA, Nominal - No Adjustment
04D6  0E02     MOVLW 0x2
04D8  6F53     MOVWF 0x53, BANKED
428:           		charge_time[channel] = TIMERCHARGE_BASE_X10; // faster
04DA  EC20     CALL 0x1040, 0
04DC  F008     NOP
04DE  0E78     MOVLW 0x78
04E0  6EEE     MOVWF POSTINC0, ACCESS
04E2  68ED     SETF POSTDEC0, ACCESS
1040  0EFD     MOVLW 0xFD
1042  6AEA     CLRF FSR0H, ACCESS
1044  34DB     RLCF PLUSW2, W, ACCESS
1046  0BFE     ANDLW 0xFE
1048  36EA     RLCF FSR0H, F, ACCESS
104A  6EE9     MOVWF FSR0L, ACCESS
104C  0E80     MOVLW 0x80
104E  26E9     ADDWF FSR0L, F, ACCESS
1050  0E00     MOVLW 0x0
1052  22EA     ADDWFC FSR0H, F, ACCESS
1054  0012     RETURN 0
429:           	}
430:           	/**************************************************************************/
431:           	//Set up AD converter;
432:           	/**************************************************************************/
433:           
434:           	// Configure AN0 as an analog channel
435:           	ANCON0bits.ANSEL0 = 1;
04E4  815D     BSF 0x5D, 0, BANKED
436:           	TRISAbits.TRISA0 = 1;
04E6  8092     BSF TRISA, 0, ACCESS
437:           
438:           	// ADCON2
439:           	ADCON2bits.ADFM = 1; // Results format 1= Right justified
04E8  8EC0     BSF ADCON2, 7, ACCESS
440:           	ADCON2bits.ACQT = 7; // Acquition time 7 = 20TAD 2 = 4TAD 1=2TAD
04EA  0EC7     MOVLW 0xC7
04EC  14C0     ANDWF ADCON2, W, ACCESS
04EE  0938     IORLW 0x38
04F0  6EC0     MOVWF ADCON2, ACCESS
441:           	ADCON2bits.ADCS = 6; // Clock conversion bits 6= FOSC/64 2=FOSC/32
04F2  0EF8     MOVLW 0xF8
04F4  14C0     ANDWF ADCON2, W, ACCESS
04F6  0906     IORLW 0x6
04F8  6EC0     MOVWF ADCON2, ACCESS
442:           	// ADCON1
443:           	ADCON1bits.VCFG = 3; // Vref+ = 4.096
04FA  0ECF     MOVLW 0xCF
04FC  14C1     ANDWF ADCON1, W, ACCESS
04FE  0930     IORLW 0x30
0500  6EC1     MOVWF ADCON1, ACCESS
444:           	ADCON1bits.VNCFG = 0; // Vref- = AVss
0502  96C1     BCF ADCON1, 3, ACCESS
445:           	ADCON1bits.CHSN = 0; // single ended
0504  0EF8     MOVLW 0xF8
0506  14C1     ANDWF ADCON1, W, ACCESS
0508  0900     IORLW 0x0
050A  6EC1     MOVWF ADCON1, ACCESS
446:           	// ADCON0
447:           	ADCON0bits.CHS = 0; // Select ADC channel
050C  0E83     MOVLW 0x83
050E  14C2     ANDWF ADCON0, W, ACCESS
0510  0900     IORLW 0x0
0512  6EC2     MOVWF ADCON0, ACCESS
448:           	ADCON0bits.ADON = 1; // Turn on ADC
0514  80C2     BSF ADCON0, 0, ACCESS
449:           	PIE1bits.ADIE = 1; // enable ADC int
0516  8C9D     BSF PIE1, 6, ACCESS
450:           
451:           	// timer3 register used for atomic data transfer
452:           	T3CONbits.TMR3ON = 0; // Timer is off
0518  90B1     BCF T3CON, 0, ACCESS
453:           	T3CONbits.RD16 = 1; // enable 16 bit reads/writes
051A  82B1     BSF T3CON, 1, ACCESS
454:           	TMR3H = 0;
051C  6AB3     CLRF TMR3H, ACCESS
455:           	TMR3L = 0;
051E  6AB2     CLRF TMR3L, ACCESS
456:           	return 0;
0520  6AF3     CLRF PRODL, ACCESS
0522  6AF4     CLRF PRODH, ACCESS
457:           }
0524  EF63     GOTO 0x10C6
0526  F008     NOP
458:           
459:           uint16_t ctmu_touch(uint8_t channel, uint8_t NULL0)
0528  ECF7     CALL 0x11EE, 0
052A  F008     NOP
460:           {
461:           	static uint16_t ctmu_change = 0, last = 0, null = 0;
462:           	static union Timers timer;
463:           
464:           	if (CTMU_ADC_UPDATED) {
052C  0100     MOVLB 0x0
052E  51D2     MOVF CTMU_ADC_UPDATED, W, BANKED
0530  E03E     BZ 0x5AE
465:           		timer.bt[0] = TMR3L; // read low byte and read 16bits from timer counter into TMR3 16bit buffer
0532  CFB2     MOVFF TMR3L, timer
0534  F0A9     NOP
466:           		timer.bt[1] = TMR3H; // read high byte
0536  CFB3     MOVFF TMR3H, 0xAA
0538  F0AA     NOP
467:           		timer.lt = timer.lt & 0x003f;
053A  0E3F     MOVLW 0x3F
053C  0100     MOVLB 0x0
053E  15A9     ANDWF timer, W, BANKED
0540  6FA9     MOVWF timer, BANKED
0542  6BAA     CLRF 0xAA, BANKED
468:           
469:           		if (NULL0 == FALSE) {
0544  0EFD     MOVLW 0xFD
0546  50DB     MOVF PLUSW2, W, ACCESS
0548  E105     BNZ 0x554
470:           			return(timer.lt);
054A  C0A9     MOVFF timer, PRODL
054C  FFF3     NOP
054E  C0AA     MOVFF 0xAA, PRODH
0550  FFF4     NOP
0552  D031     BRA 0x5B6
471:           		}
472:           		if (timer.lt < touch_base[channel]) {
0554  ECAF     CALL 0x115E, 0
0556  F008     NOP
0558  CFEE     MOVFF POSTINC0, __tmp_0
055A  F000     NOP
055C  CFEF     MOVFF INDF0, 0x1
055E  F001     NOP
0560  5000     MOVF __tmp_0, W, ACCESS
0562  5DA9     SUBWF timer, W, BANKED
0564  5001     MOVF 0x1, W, ACCESS
0566  59AA     SUBWFB 0xAA, W, BANKED
0568  E20E     BC 0x586
115E  0EFE     MOVLW 0xFE
1160  6AEA     CLRF FSR0H, ACCESS
1162  34DB     RLCF PLUSW2, W, ACCESS
1164  0BFE     ANDLW 0xFE
1166  36EA     RLCF FSR0H, F, ACCESS
1168  6EE9     MOVWF FSR0L, ACCESS
116A  0E60     MOVLW 0x60
116C  26E9     ADDWF FSR0L, F, ACCESS
116E  0E00     MOVLW 0x0
1170  22EA     ADDWFC FSR0H, F, ACCESS
1172  0012     RETURN 0
473:           			ctmu_change = touch_base[channel] - timer.lt; // read diff
056A  ECAF     CALL 0x115E, 0
056C  F008     NOP
056E  51A9     MOVF timer, W, BANKED
0570  5CEE     SUBWF POSTINC0, W, ACCESS
0572  0100     MOVLB 0x0
0574  6FE3     MOVWF ctmu_change, BANKED
0576  0100     MOVLB 0x0
0578  51AA     MOVF 0xAA, W, BANKED
057A  58EE     SUBWFB POSTINC0, W, ACCESS
057C  0100     MOVLB 0x0
474:           			ctmu_change = ctmu_change & 0x001f;
057E  0E1F     MOVLW 0x1F
0580  15E3     ANDWF ctmu_change, W, BANKED
0582  6FE3     MOVWF ctmu_change, BANKED
0584  6BE4     CLRF 0xE4, BANKED
475:           		}
476:           
477:           		if ((null == 0) && NULL0) null = ctmu_change;
0586  0100     MOVLB 0x0
0588  51E7     MOVF null, W, BANKED
058A  11E8     IORWF 0xE8, W, BANKED
058C  E107     BNZ 0x59C
058E  0EFD     MOVLW 0xFD
0590  50DB     MOVF PLUSW2, W, ACCESS
0592  E004     BZ 0x59C
0594  C0E3     MOVFF ctmu_change, null
0596  F0E7     NOP
0598  C0E4     MOVFF 0xE4, 0xE8
059A  F0E8     NOP
478:           		last = ctmu_change;
059C  C0E3     MOVFF ctmu_change, last
059E  F0E5     NOP
05A0  C0E4     MOVFF 0xE4, 0xE6
05A2  F0E6     NOP
479:           		return(uint16_t) ctmu_change;
05A4  C0E3     MOVFF ctmu_change, PRODL
05A6  FFF3     NOP
05A8  C0E4     MOVFF 0xE4, PRODH
05AA  FFF4     NOP
05AC  D004     BRA 0x5B6
480:           	} else {
481:           		return(uint16_t) last;
05AE  C0E5     MOVFF last, PRODL
05B0  FFF3     NOP
05B2  C0E6     MOVFF 0xE6, PRODH
05B4  FFF4     NOP
482:           	}
483:           }
05B6  EF63     GOTO 0x10C6
05B8  F008     NOP
484:           
485:           /* display memory */
486:           void display_init(void)
487:           {
488:           // init what needed to display data
489:           }
05BA  0012     RETURN 0
490:           
491:           /* copy the entire ROM to RAM display memory */
492:           void pixel_init(void)
493:           {
494:           	static int16_t i;
495:           
496:           	memcpypgm2ram((void *) pixel, (const rom void *) pixel_rom, sizeof(pixel));
05BC  6AE6     CLRF POSTINC1, ACCESS
05BE  0E05     MOVLW 0x5
05C0  6EE6     MOVWF POSTINC1, ACCESS
05C2  0E5E     MOVLW 0x5E
05C4  6EE6     MOVWF POSTINC1, ACCESS
05C6  0E21     MOVLW 0x21
05C8  6EE6     MOVWF POSTINC1, ACCESS
05CA  0E00     MOVLW 0x0
05CC  6EE6     MOVWF POSTINC1, ACCESS
05CE  0E00     MOVLW 0x0
05D0  6EE6     MOVWF POSTINC1, ACCESS
05D2  0E06     MOVLW 0x6
05D4  6EE6     MOVWF POSTINC1, ACCESS
05D6  EC8C     CALL 0x2318, 0
05D8  F011     NOP
05DA  6E00     MOVWF __tmp_0, ACCESS
05DC  0E07     MOVLW 0x7
05DE  5EE1     SUBWF FSR1L, F, ACCESS
05E0  5000     MOVF __tmp_0, W, ACCESS
497:           
498:           }
05E2  0012     RETURN 0
499:           
500:           //FIXME we have a ram index bug here
501:           
502:           /* move the pixel object from the ROM array to display RAM memeory, if clear is TRUE reset RAM index back to zero */
503:           uint8_t obj_init(uint8_t rom_link, uint8_t clear)
05E4  ECF7     CALL 0x11EE, 0
05E6  F008     NOP
504:           {
505:           	static int16_t i, pixel_size;
506:           	static uint8_t ram_link = 0, ram_link_start = 0;
507:           
508:           	if (clear) {
05E8  0EFD     MOVLW 0xFD
05EA  50DB     MOVF PLUSW2, W, ACCESS
05EC  E005     BZ 0x5F8
509:           		ram_link = 0;
05EE  0100     MOVLB 0x0
05F0  6BE9     CLRF ram_link, BANKED
510:           		pixel[ram_link].m_link = -1;
05F2  ECEE     CALL 0x11DC, 0
05F4  F008     NOP
11DC  51E9     MOVF ram_link, W, BANKED
11DE  DF26     RCALL __pa_0
11E0  DFC9     RCALL __pa_13
11E2  68EF     SETF INDF0, ACCESS
511:           		pixel[ram_link].n_link = -1;
11E4  51E9     MOVF ram_link, W, BANKED
11E6  DF22     RCALL __pa_0
11E8  D82A     RCALL __pa_30
11EA  68EF     SETF INDF0, ACCESS
11EC  0012     RETURN 0
123E  0E04     MOVLW 0x4
1240  D006     BRA __pa_32
124E  26E9     ADDWF FSR0L, F, ACCESS
1250  0E00     MOVLW 0x0
1252  22EA     ADDWFC FSR0H, F, ACCESS
1254  0012     RETURN 0
512:           		return 0;
05F6  D0B0     BRA 0x758
513:           	}
514:           
515:           	ram_link_start = 0;
05F8  0100     MOVLB 0x0
05FA  6BEA     CLRF ram_link_start, BANKED
516:           	pixel_size = sizeof(pixel_temp);
05FC  0E05     MOVLW 0x5
05FE  0100     MOVLB 0x0
0600  6FAF     MOVWF pixel_size, BANKED
0602  6BB0     CLRF 0xB0, BANKED
517:           	do {
518:           		memcpypgm2ram((void *) &pixel[ram_link + ram_link_start].x, (const rom void *) &pixel_rom[rom_link + ram_link_start].x, pixel_size);
0604  C0AF     MOVFF pixel_size, POSTINC1
0606  FFE6     NOP
0608  C0B0     MOVFF 0xB0, POSTINC1
060A  FFE6     NOP
060C  0E5E     MOVLW 0x5E
060E  6E03     MOVWF y, ACCESS
0610  0E21     MOVLW 0x21
0612  6E04     MOVWF t, ACCESS
0614  0E00     MOVLW 0x0
0616  6E05     MOVWF i, ACCESS
0618  0EFE     MOVLW 0xFE
061A  50DB     MOVF PLUSW2, W, ACCESS
061C  0100     MOVLB 0x0
061E  25EA     ADDWF ram_link_start, W, BANKED
0620  6E06     MOVWF romid, ACCESS
0622  6A07     CLRF move, ACCESS
0624  6A08     CLRF 0x8, ACCESS
0626  0E05     MOVLW 0x5
0628  6E25     MOVWF 0x25, ACCESS
062A  6A26     CLRF 0x26, ACCESS
062C  6A27     CLRF 0x27, ACCESS
062E  C006     MOVFF romid, 0x20
0630  F020     NOP
0632  C007     MOVFF move, 0x21
0634  F021     NOP
0636  C008     MOVFF 0x8, 0x22
0638  F022     NOP
063A  EC74     CALL 0x14E8, 0
063C  F00A     NOP
063E  C01D     MOVFF 0x1D, romid
0640  F006     NOP
0642  C01E     MOVFF RR, move
0644  F007     NOP
0646  C01F     MOVFF 0x1F, 0x8
0648  F008     NOP
064A  5003     MOVF y, W, ACCESS
064C  241D     ADDWF 0x1D, W, ACCESS
064E  6EF3     MOVWF PRODL, ACCESS
0650  5004     MOVF t, W, ACCESS
0652  201E     ADDWFC RR, W, ACCESS
0654  6EF4     MOVWF PRODH, ACCESS
0656  5005     MOVF i, W, ACCESS
0658  ECE1     CALL 0x11C2, 0
065A  F008     NOP
065C  CFF6     MOVFF TBLPTRL, __tmp_0
065E  F000     NOP
0660  CFF7     MOVFF TBLPTRH, 0x1
0662  F001     NOP
0664  CFF8     MOVFF TBLPTRU, x
0666  F002     NOP
0668  C000     MOVFF __tmp_0, POSTINC1
066A  FFE6     NOP
066C  C001     MOVFF 0x1, POSTINC1
066E  FFE6     NOP
0670  C002     MOVFF x, POSTINC1
0672  FFE6     NOP
0674  0100     MOVLB 0x0
0676  51E9     MOVF ram_link, W, BANKED
0678  25EA     ADDWF ram_link_start, W, BANKED
067A  EC16     CALL 0x102C, 0
067C  F008     NOP
067E  CFE9     MOVFF FSR0L, 0x9
0680  F009     NOP
0682  CFEA     MOVFF FSR0H, f
0684  F00A     NOP
0686  CFE9     MOVFF FSR0L, POSTINC1
0688  FFE6     NOP
068A  CFEA     MOVFF FSR0H, POSTINC1
068C  FFE6     NOP
068E  EC8C     CALL 0x2318, 0
0690  F011     NOP
0692  6E0B     MOVWF times, ACCESS
0694  0E07     MOVLW 0x7
0696  5EE1     SUBWF FSR1L, F, ACCESS
0698  500B     MOVF times, W, ACCESS
11C2  201F     ADDWFC 0x1F, W, ACCESS
11C4  6EF8     MOVWF TBLPTRU, ACCESS
11C6  CFF4     MOVFF PRODH, TBLPTRH
11C8  FFF7     NOP
11CA  CFF3     MOVFF PRODL, TBLPTRL
11CC  FFF6     NOP
11CE  0012     RETURN 0
519:           		++ram_link_start;
069A  0100     MOVLB 0x0
069C  2BEA     INCF ram_link_start, F, BANKED
520:           	} while (pixel_rom[ram_link_start + rom_link].n_link == rom_link);
069E  0E5E     MOVLW 0x5E
06A0  6E01     MOVWF 0x1, ACCESS
06A2  0E21     MOVLW 0x21
06A4  6E02     MOVWF x, ACCESS
06A6  0E00     MOVLW 0x0
06A8  6E03     MOVWF y, ACCESS
06AA  0EFE     MOVLW 0xFE
06AC  50DB     MOVF PLUSW2, W, ACCESS
06AE  25EA     ADDWF ram_link_start, W, BANKED
06B0  6E04     MOVWF t, ACCESS
06B2  6A05     CLRF i, ACCESS
06B4  6A06     CLRF romid, ACCESS
06B6  0E05     MOVLW 0x5
06B8  6E25     MOVWF 0x25, ACCESS
06BA  6A26     CLRF 0x26, ACCESS
06BC  6A27     CLRF 0x27, ACCESS
06BE  C004     MOVFF t, 0x20
06C0  F020     NOP
06C2  C005     MOVFF i, 0x21
06C4  F021     NOP
06C6  C006     MOVFF romid, 0x22
06C8  F022     NOP
06CA  EC74     CALL 0x14E8, 0
06CC  F00A     NOP
06CE  5001     MOVF 0x1, W, ACCESS
06D0  241D     ADDWF 0x1D, W, ACCESS
06D2  6EF3     MOVWF PRODL, ACCESS
06D4  5002     MOVF x, W, ACCESS
06D6  201E     ADDWFC RR, W, ACCESS
06D8  6EF4     MOVWF PRODH, ACCESS
06DA  5003     MOVF y, W, ACCESS
06DC  ECE1     CALL 0x11C2, 0
06DE  F008     NOP
06E0  0E04     MOVLW 0x4
06E2  26F6     ADDWF TBLPTRL, F, ACCESS
06E4  0E00     MOVLW 0x0
06E6  22F7     ADDWFC TBLPTRH, F, ACCESS
06E8  22F8     ADDWFC TBLPTRU, F, ACCESS
06EA  0008     TBLRD*
06EC  CFF5     MOVFF TABLAT, __tmp_0
06EE  F000     NOP
06F0  0EFE     MOVLW 0xFE
06F2  50DB     MOVF PLUSW2, W, ACCESS
06F4  5C00     SUBWF __tmp_0, W, ACCESS
06F6  E101     BNZ 0x6FA
06F8  D785     BRA 0x604
521:           
522:           	for (i = ram_link; i < (ram_link + ram_link_start); i++) {
06FA  0100     MOVLB 0x0
06FC  51E9     MOVF ram_link, W, BANKED
06FE  0100     MOVLB 0x0
0700  6FAD     MOVWF i, BANKED
0702  6BAE     CLRF 0xAE, BANKED
0704  0100     MOVLB 0x0
0706  51E9     MOVF ram_link, W, BANKED
0708  25EA     ADDWF ram_link_start, W, BANKED
070A  0100     MOVLB 0x0
070C  AFAE     BTFSS 0xAE, 7, BANKED
070E  D002     BRA 0x714
0710  90D8     BCF STATUS, 0, ACCESS
0712  D003     BRA 0x71A
0714  5DAD     SUBWF i, W, BANKED
0716  0E00     MOVLW 0x0
0718  59AE     SUBWFB 0xAE, W, BANKED
071A  E217     BC 0x74A
0744  2BAD     INCF i, F, BANKED
0746  23AE     ADDWFC 0xAE, F, BANKED
0748  D7DD     BRA 0x704
523:           		pixel[i].m_link = ram_link + i; // make a RAM ID for each pixel
071C  0100     MOVLB 0x0
071E  51E9     MOVF ram_link, W, BANKED
0720  0100     MOVLB 0x0
0722  6A01     CLRF 0x1, ACCESS
0724  25AD     ADDWF i, W, BANKED
0726  6E00     MOVWF __tmp_0, ACCESS
0728  51AE     MOVF 0xAE, W, BANKED
072A  2201     ADDWFC 0x1, F, ACCESS
072C  EC89     CALL 0x1112, 0
072E  F008     NOP
0730  ECBA     CALL 0x1174, 0
0732  F008     NOP
0734  C000     MOVFF __tmp_0, INDF0
0736  FFEF     NOP
1112  C0AD     MOVFF i, FSR0L
1114  FFE9     NOP
1116  C0AE     MOVFF 0xAE, FSR0H
1118  FFEA     NOP
111A  0E05     MOVLW 0x5
111C  02EA     MULWF FSR0H, ACCESS
111E  CFF3     MOVFF PRODL, FSR0H
1120  FFEA     NOP
1122  02E9     MULWF FSR0L, ACCESS
1124  CFF3     MOVFF PRODL, FSR0L
1126  FFE9     NOP
1128  50F4     MOVF PRODH, W, ACCESS
112A  26EA     ADDWF FSR0H, F, ACCESS
112C  0E00     MOVLW 0x0
112E  26E9     ADDWF FSR0L, F, ACCESS
1130  0E06     MOVLW 0x6
1132  22EA     ADDWFC FSR0H, F, ACCESS
1134  0012     RETURN 0
524:           		pixel[i].n_link = ram_link; // link RAM ID to object
0738  EC89     CALL 0x1112, 0
073A  F008     NOP
073C  EC1F     CALL 0x123E, 0
073E  F009     NOP
0740  C0E9     MOVFF ram_link, INDF0
0742  FFEF     NOP
525:           	}
526:           	ram_link += ram_link_start;
074A  0100     MOVLB 0x0
074C  51EA     MOVF ram_link_start, W, BANKED
074E  27E9     ADDWF ram_link, F, BANKED
527:           	pixel[ram_link].m_link = -1;
0750  ECEE     CALL 0x11DC, 0
0752  F008     NOP
528:           	pixel[ram_link].n_link = -1;
529:           	return ram_link - ram_link_start;
0754  51EA     MOVF ram_link_start, W, BANKED
0756  5DE9     SUBWF ram_link, W, BANKED
530:           }
0758  EF63     GOTO 0x10C6
075A  F008     NOP
531:           
532:           void pixel_set(uint8_t list_num, uint8_t value)
075C  EC47     CALL 0x108E, 0
075E  F008     NOP
533:           {
534:           	if (list_num >= PIXEL_NUM) return;
0760  E602     BN 0x766
0762  ECBC     CALL 0x1178, 0
0764  F008     NOP
0766  E207     BC 0x776
535:           	pixel[list_num].v = value;
0768  ECEA     CALL 0x11D4, 0
076A  F008     NOP
076C  ECE8     CALL 0x11D0, 0
076E  F008     NOP
0770  0EFD     MOVLW 0xFD
0772  CFDB     MOVFF PLUSW2, INDF0
0774  FFEF     NOP
102C  0D05     MULLW 0x5
102E  CFF3     MOVFF PRODL, FSR0L
1030  FFE9     NOP
1032  CFF4     MOVFF PRODH, FSR0H
1034  FFEA     NOP
1036  0E00     MOVLW 0x0
1038  26E9     ADDWF FSR0L, F, ACCESS
103A  0E06     MOVLW 0x6
103C  22EA     ADDWFC FSR0H, F, ACCESS
103E  0012     RETURN 0
536:           }
0776  EF63     GOTO 0x10C6
0778  F008     NOP
537:           
538:           void pixel_rotate(uint8_t list_num, float degree) // pixel,degree rotation
077A  ECF7     CALL 0x11EE, 0
077C  F008     NOP
539:           {
540:           	static float to_rad, float_x, float_y, sine, cosine, old_degree = 1957.7;
541:           
542:           	if (degree != old_degree) {
077E  0EFA     MOVLW 0xFA
0780  CFDB     MOVFF PLUSW2, __tmp_0
0782  F000     NOP
0784  0EFB     MOVLW 0xFB
0786  CFDB     MOVFF PLUSW2, 0x1
0788  F001     NOP
078A  0EFC     MOVLW 0xFC
078C  CFDB     MOVFF PLUSW2, x
078E  F002     NOP
0790  0EFD     MOVLW 0xFD
0792  CFDB     MOVFF PLUSW2, y
0794  F003     NOP
0796  C0EB     MOVFF old_degree, 0x25
0798  F025     NOP
079A  C0EC     MOVFF 0xEC, 0x26
079C  F026     NOP
079E  C0ED     MOVFF 0xED, 0x27
07A0  F027     NOP
07A2  C0EE     MOVFF 0xEE, 0x28
07A4  F028     NOP
07A6  EC00     CALL 0x1200, 0
07A8  F009     NOP
07AA  ECE4     CALL 0x15C8, 0
07AC  F00A     NOP
07AE  0A01     XORLW 0x1
07B0  E04A     BZ 0x846
1200  C000     MOVFF __tmp_0, 0x20
1202  F020     NOP
1204  C001     MOVFF 0x1, 0x21
1206  F021     NOP
1208  C002     MOVFF x, 0x22
120A  F022     NOP
120C  C003     MOVFF y, 0x23
120E  F023     NOP
1210  0012     RETURN 0
543:           		to_rad = 0.0175 * degree;
07B2  0E29     MOVLW 0x29
07B4  6E20     MOVWF 0x20, ACCESS
07B6  0E5C     MOVLW 0x5C
07B8  6E21     MOVWF 0x21, ACCESS
07BA  0E8F     MOVLW 0x8F
07BC  6E22     MOVWF 0x22, ACCESS
07BE  0E3C     MOVLW 0x3C
07C0  6E23     MOVWF 0x23, ACCESS
07C2  EC9B     CALL 0x1136, 0
07C4  F008     NOP
07C6  C020     MOVFF 0x20, to_rad
07C8  F0B1     NOP
07CA  C021     MOVFF 0x21, 0xB2
07CC  F0B2     NOP
07CE  C022     MOVFF 0x22, 0xB3
07D0  F0B3     NOP
07D2  C023     MOVFF 0x23, 0xB4
07D4  F0B4     NOP
1136  0EFA     MOVLW 0xFA
1138  CFDB     MOVFF PLUSW2, 0x25
113A  F025     NOP
113C  0EFB     MOVLW 0xFB
113E  CFDB     MOVFF PLUSW2, 0x26
1140  F026     NOP
1142  0EFC     MOVLW 0xFC
1144  CFDB     MOVFF PLUSW2, 0x27
1146  F027     NOP
1148  0EFD     MOVLW 0xFD
114A  CFDB     MOVFF PLUSW2, 0x28
114C  F028     NOP
114E  EFD3     GOTO 0x13A6
1150  F009     NOP
544:           		cosine = (float) cos(to_rad);
07D6  C020     MOVFF 0x20, POSTINC1
07D8  FFE6     NOP
07DA  C021     MOVFF 0x21, POSTINC1
07DC  FFE6     NOP
07DE  C022     MOVFF 0x22, POSTINC1
07E0  FFE6     NOP
07E2  C023     MOVFF 0x23, POSTINC1
07E4  FFE6     NOP
07E6  EC41     CALL 0x2282, 0
07E8  F011     NOP
07EA  52E5     MOVF POSTDEC1, F, ACCESS
07EC  52E5     MOVF POSTDEC1, F, ACCESS
07EE  52E5     MOVF POSTDEC1, F, ACCESS
07F0  52E5     MOVF POSTDEC1, F, ACCESS
07F2  C01F     MOVFF 0x1F, cosine
07F4  F0C1     NOP
07F6  C020     MOVFF 0x20, 0xC2
07F8  F0C2     NOP
07FA  C021     MOVFF 0x21, 0xC3
07FC  F0C3     NOP
07FE  C022     MOVFF 0x22, 0xC4
0800  F0C4     NOP
545:           		sine = (float) sin(to_rad);
0802  C0B1     MOVFF to_rad, POSTINC1
0804  FFE6     NOP
0806  C0B2     MOVFF 0xB2, POSTINC1
0808  FFE6     NOP
080A  C0B3     MOVFF 0xB3, POSTINC1
080C  FFE6     NOP
080E  C0B4     MOVFF 0xB4, POSTINC1
0810  FFE6     NOP
0812  EC19     CALL 0x2232, 0
0814  F011     NOP
0816  52E5     MOVF POSTDEC1, F, ACCESS
0818  52E5     MOVF POSTDEC1, F, ACCESS
081A  52E5     MOVF POSTDEC1, F, ACCESS
081C  52E5     MOVF POSTDEC1, F, ACCESS
081E  C01F     MOVFF 0x1F, sine
0820  F0BD     NOP
0822  C020     MOVFF 0x20, 0xBE
0824  F0BE     NOP
0826  C021     MOVFF 0x21, 0xBF
0828  F0BF     NOP
082A  C022     MOVFF 0x22, 0xC0
082C  F0C0     NOP
546:           		old_degree = degree;
082E  0EFA     MOVLW 0xFA
0830  CFDB     MOVFF PLUSW2, old_degree
0832  F0EB     NOP
0834  0EFB     MOVLW 0xFB
0836  CFDB     MOVFF PLUSW2, 0xEC
0838  F0EC     NOP
083A  0EFC     MOVLW 0xFC
083C  CFDB     MOVFF PLUSW2, 0xED
083E  F0ED     NOP
0840  0EFD     MOVLW 0xFD
0842  CFDB     MOVFF PLUSW2, 0xEE
0844  F0EE     NOP
547:           	}
548:           
549:           	float_x = (float) pixel[list_num].x;
0846  ECEA     CALL 0x11D4, 0
0848  F008     NOP
084A  ECA9     CALL 0x1152, 0
084C  F008     NOP
084E  C020     MOVFF 0x20, float_x
0850  F0B5     NOP
0852  C021     MOVFF 0x21, 0xB6
0854  F0B6     NOP
0856  C022     MOVFF 0x22, 0xB7
0858  F0B7     NOP
085A  C023     MOVFF 0x23, 0xB8
085C  F0B8     NOP
550:           	float_y = (float) pixel[list_num].y;
085E  ECEA     CALL 0x11D4, 0
0860  F008     NOP
0862  52EE     MOVF POSTINC0, F, ACCESS
0864  ECA9     CALL 0x1152, 0
0866  F008     NOP
0868  C020     MOVFF 0x20, float_y
086A  F0B9     NOP
086C  C021     MOVFF 0x21, 0xBA
086E  F0BA     NOP
0870  C022     MOVFF 0x22, 0xBB
0872  F0BB     NOP
0874  C023     MOVFF 0x23, 0xBC
0876  F0BC     NOP
551:           
552:           	pixel[list_num].x = (int8_t) (float_x * cosine - float_y * sine);
0878  ECC1     CALL 0x1182, 0
087A  F008     NOP
087C  EC76     CALL 0x10EC, 0
087E  F008     NOP
0880  ECCA     CALL 0x1194, 0
0882  F008     NOP
0884  DBE8     RCALL __pa_2
0886  EC3C     CALL 0x1278, 0
0888  F009     NOP
088A  EC19     CALL 0x1232, 0
088C  F009     NOP
088E  52E5     MOVF POSTDEC1, F, ACCESS
0890  50E7     MOVF INDF1, W, ACCESS
0892  6EEF     MOVWF INDF0, ACCESS
1056  C0B9     MOVFF float_y, 0x20
1058  F020     NOP
105A  C0BA     MOVFF 0xBA, 0x21
105C  F021     NOP
105E  C0BB     MOVFF 0xBB, 0x22
1060  F022     NOP
1062  C0BC     MOVFF 0xBC, 0x23
1064  F023     NOP
1066  ECD3     CALL 0x13A6, 0
1068  F009     NOP
106A  C020     MOVFF 0x20, t
106C  F004     NOP
106E  C021     MOVFF 0x21, i
1070  F005     NOP
1072  C022     MOVFF 0x22, romid
1074  F006     NOP
1076  C023     MOVFF 0x23, move
1078  F007     NOP
107A  C020     MOVFF 0x20, 0x25
107C  F025     NOP
107E  C021     MOVFF 0x21, 0x26
1080  F026     NOP
1082  C022     MOVFF 0x22, 0x27
1084  F027     NOP
1086  C023     MOVFF 0x23, 0x28
1088  F028     NOP
108A  EF00     GOTO 0x1200
108C  F009     NOP
10EC  C0B5     MOVFF float_x, 0x20
10EE  F020     NOP
10F0  C0B6     MOVFF 0xB6, 0x21
10F2  F021     NOP
10F4  C0B7     MOVFF 0xB7, 0x22
10F6  F022     NOP
10F8  C0B8     MOVFF 0xB8, 0x23
10FA  F023     NOP
10FC  ECD3     CALL 0x13A6, 0
10FE  F009     NOP
1100  C020     MOVFF 0x20, __tmp_0
1102  F000     NOP
1104  C021     MOVFF 0x21, 0x1
1106  F001     NOP
1108  C022     MOVFF 0x22, x
110A  F002     NOP
110C  C023     MOVFF 0x23, y
110E  F003     NOP
1110  0012     RETURN 0
1182  C0C1     MOVFF cosine, 0x25
1184  F025     NOP
1186  C0C2     MOVFF 0xC2, 0x26
1188  F026     NOP
118A  C0C3     MOVFF 0xC3, 0x27
118C  F027     NOP
118E  C0C4     MOVFF 0xC4, 0x28
1190  F028     NOP
1192  0012     RETURN 0
1194  C0BD     MOVFF sine, 0x25
1196  F025     NOP
1198  C0BE     MOVFF 0xBE, 0x26
119A  F026     NOP
119C  C0BF     MOVFF 0xBF, 0x27
119E  F027     NOP
11A0  C0C0     MOVFF 0xC0, 0x28
11A2  F028     NOP
11A4  0012     RETURN 0
553:           	pixel[list_num].y = (int8_t) (float_x * sine + float_y * cosine);
0894  ECCA     CALL 0x1194, 0
0896  F008     NOP
0898  EC76     CALL 0x10EC, 0
089A  F008     NOP
089C  ECC1     CALL 0x1182, 0
089E  F008     NOP
08A0  DBDA     RCALL __pa_2
08A2  EC3D     CALL 0x127A, 0
08A4  F009     NOP
08A6  EF21     GOTO 0x1242
08A8  F009     NOP
1242  DFF7     RCALL __pa_29
1244  52EE     MOVF POSTINC0, F, ACCESS
1246  52E5     MOVF POSTDEC1, F, ACCESS
1248  50E7     MOVF INDF1, W, ACCESS
124A  6EEF     MOVWF INDF0, ACCESS
554:           
555:           }
124C  D73C     BRA __pa_6
556:           
557:           void pixel_trans(uint8_t list_num, int8_t x_new, int8_t y_new)
08AA  ECF7     CALL 0x11EE, 0
08AC  F008     NOP
558:           {
559:           	pixel[list_num].x += x_new;
08AE  ECEA     CALL 0x11D4, 0
08B0  F008     NOP
08B2  0EFD     MOVLW 0xFD
08B4  50DB     MOVF PLUSW2, W, ACCESS
08B6  26EF     ADDWF INDF0, F, ACCESS
560:           	pixel[list_num].y += y_new;
08B8  ECEA     CALL 0x11D4, 0
08BA  F008     NOP
08BC  52EE     MOVF POSTINC0, F, ACCESS
08BE  0EFC     MOVLW 0xFC
08C0  50DB     MOVF PLUSW2, W, ACCESS
08C2  26EF     ADDWF INDF0, F, ACCESS
561:           }
08C4  EF63     GOTO 0x10C6
08C6  F008     NOP
562:           
563:           void pixel_scale(uint8_t list_num, float x_scale, float y_scale)
08C8  ECF7     CALL 0x11EE, 0
08CA  F008     NOP
564:           {
565:           	static float float_x, float_y;
566:           
567:           	float_x = (float) pixel[list_num].x;
08CC  ECEA     CALL 0x11D4, 0
08CE  F008     NOP
08D0  ECA9     CALL 0x1152, 0
08D2  F008     NOP
08D4  C020     MOVFF 0x20, float_x
08D6  F0C5     NOP
08D8  C021     MOVFF 0x21, 0xC6
08DA  F0C6     NOP
08DC  C022     MOVFF 0x22, 0xC7
08DE  F0C7     NOP
08E0  C023     MOVFF 0x23, 0xC8
08E2  F0C8     NOP
568:           	float_y = (float) pixel[list_num].y;
08E4  ECEA     CALL 0x11D4, 0
08E6  F008     NOP
08E8  52EE     MOVF POSTINC0, F, ACCESS
08EA  ECA9     CALL 0x1152, 0
08EC  F008     NOP
08EE  C020     MOVFF 0x20, float_y
08F0  F0C9     NOP
08F2  C021     MOVFF 0x21, 0xCA
08F4  F0CA     NOP
08F6  C022     MOVFF 0x22, 0xCB
08F8  F0CB     NOP
08FA  C023     MOVFF 0x23, 0xCC
08FC  F0CC     NOP
1152  CFEF     MOVFF INDF0, __tmp_0
1154  F000     NOP
1156  C000     MOVFF __tmp_0, 0x22
1158  F022     NOP
115A  EF2D     GOTO 0x125A
115C  F009     NOP
569:           	pixel[list_num].x = (int8_t) float_x * x_scale;
08FE  C0C5     MOVFF float_x, 0x20
0900  F020     NOP
0902  C0C6     MOVFF 0xC6, 0x21
0904  F021     NOP
0906  C0C7     MOVFF 0xC7, 0x22
0908  F022     NOP
090A  C0C8     MOVFF 0xC8, 0x23
090C  F023     NOP
090E  ECBD     CALL 0x157A, 0
0910  F00A     NOP
0912  EC2D     CALL 0x125A, 0
0914  F009     NOP
0916  EC9B     CALL 0x1136, 0
0918  F008     NOP
091A  EC19     CALL 0x1232, 0
091C  F009     NOP
091E  52E5     MOVF POSTDEC1, F, ACCESS
0920  50E7     MOVF INDF1, W, ACCESS
0922  6EEF     MOVWF INDF0, ACCESS
1232  ECBD     CALL 0x157A, 0
1234  F00A     NOP
1236  5022     MOVF 0x22, W, ACCESS
1238  6EE6     MOVWF POSTINC1, ACCESS
123A  EFEA     GOTO 0x11D4
123C  F008     NOP
570:           	pixel[list_num].y = (int8_t) float_y * y_scale;
0924  C0C9     MOVFF float_y, 0x20
0926  F020     NOP
0928  C0CA     MOVFF 0xCA, 0x21
092A  F021     NOP
092C  C0CB     MOVFF 0xCB, 0x22
092E  F022     NOP
0930  C0CC     MOVFF 0xCC, 0x23
0932  F023     NOP
0934  ECBD     CALL 0x157A, 0
0936  F00A     NOP
0938  EC2D     CALL 0x125A, 0
093A  F009     NOP
093C  0EF6     MOVLW 0xF6
093E  CFDB     MOVFF PLUSW2, 0x25
0940  F025     NOP
0942  0EF7     MOVLW 0xF7
0944  CFDB     MOVFF PLUSW2, 0x26
0946  F026     NOP
0948  0EF8     MOVLW 0xF8
094A  CFDB     MOVFF PLUSW2, 0x27
094C  F027     NOP
094E  0EF9     MOVLW 0xF9
0950  CFDB     MOVFF PLUSW2, 0x28
0952  F028     NOP
0954  ECD3     CALL 0x13A6, 0
0956  F009     NOP
0958  EF21     GOTO 0x1242
095A  F009     NOP
11D4  0EFE     MOVLW 0xFE
11D6  50DB     MOVF PLUSW2, W, ACCESS
11D8  EF16     GOTO 0x102C
11DA  F008     NOP
571:           }
572:           
573:           void object_rotate(uint8_t list_num, float degree)
095C  DB98     RCALL __pa_3
574:           {
575:           	static uint8_t i;
576:           
577:           	if (list_num >= PIXEL_NUM) return; // check for valid range
095E  E602     BN 0x964
0960  ECBC     CALL 0x1178, 0
0962  F008     NOP
0964  E217     BC 0x994
578:           
579:           	for (i = 0; i < OBJ_NUM; i++) {
0966  0100     MOVLB 0x0
0968  6BCD     CLRF i, BANKED
096A  0E40     MOVLW 0x40
096C  5DCD     SUBWF i, W, BANKED
096E  E212     BC 0x994
098E  0100     MOVLB 0x0
0990  2BCD     INCF i, F, BANKED
0992  D7EB     BRA 0x96A
580:           		if (pixel[list_num + i].n_link != list_num) return; // invalid current object id
0970  0EFE     MOVLW 0xFE
0972  50DB     MOVF PLUSW2, W, ACCESS
0974  25CD     ADDWF i, W, BANKED
0976  EC09     CALL 0x1212, 0
0978  F009     NOP
097A  E10C     BNZ 0x994
581:           		pixel_rotate(list_num + i, degree);
097C  EC13     CALL 0x1226, 0
097E  F009     NOP
0980  25CD     ADDWF i, W, BANKED
0982  6EE6     MOVWF POSTINC1, ACCESS
0984  DEFA     RCALL pixel_rotate
0986  6E00     MOVWF __tmp_0, ACCESS
0988  0E05     MOVLW 0x5
098A  5EE1     SUBWF FSR1L, F, ACCESS
098C  5000     MOVF __tmp_0, W, ACCESS
1226  50D9     MOVF FSR2L, W, ACCESS
1228  0FFA     ADDLW 0xFA
122A  DF40     RCALL __pa_5
122C  0EFE     MOVLW 0xFE
122E  50DB     MOVF PLUSW2, W, ACCESS
1230  0012     RETURN 0
582:           	}
583:           }
0994  D398     BRA __pa_6
584:           
585:           void object_trans(uint8_t list_num, int8_t x_new, int8_t y_new)
0996  DB7B     RCALL __pa_3
586:           {
587:           	static uint8_t i;
588:           
589:           	if (list_num >= PIXEL_NUM) return; // check for valid range
0998  E601     BN 0x99C
099A  DBEE     RCALL __pa_14
099C  E21C     BC 0x9D6
590:           
591:           	for (i = 0; i < OBJ_NUM; i++) {
099E  0100     MOVLB 0x0
09A0  6BCE     CLRF i, BANKED
09A2  0E40     MOVLW 0x40
09A4  5DCE     SUBWF i, W, BANKED
09A6  E217     BC 0x9D6
09D0  0100     MOVLB 0x0
09D2  2BCE     INCF i, F, BANKED
09D4  D7E6     BRA 0x9A2
592:           		if (pixel[list_num + i].n_link != list_num) return; // invalid current object id
09A8  0EFE     MOVLW 0xFE
09AA  50DB     MOVF PLUSW2, W, ACCESS
09AC  25CE     ADDWF i, W, BANKED
09AE  EC09     CALL 0x1212, 0
09B0  F009     NOP
09B2  E111     BNZ 0x9D6
593:           		pixel_trans(list_num + i, x_new, y_new);
09B4  0EFC     MOVLW 0xFC
09B6  CFDB     MOVFF PLUSW2, POSTINC1
09B8  FFE6     NOP
09BA  0EFD     MOVLW 0xFD
09BC  CFDB     MOVFF PLUSW2, POSTINC1
09BE  FFE6     NOP
09C0  0EFE     MOVLW 0xFE
09C2  50DB     MOVF PLUSW2, W, ACCESS
09C4  25CE     ADDWF i, W, BANKED
09C6  6EE6     MOVWF POSTINC1, ACCESS
09C8  DF70     RCALL pixel_trans
09CA  52E5     MOVF POSTDEC1, F, ACCESS
09CC  52E5     MOVF POSTDEC1, F, ACCESS
09CE  52E5     MOVF POSTDEC1, F, ACCESS
594:           	}
595:           }
09D6  D377     BRA __pa_6
596:           
597:           void object_scale(uint8_t list_num, float x_scale, float y_scale)
09D8  DB5A     RCALL __pa_3
598:           {
599:           	static uint8_t i;
600:           
601:           	if (list_num >= PIXEL_NUM) return; // check for valid range
09DA  E601     BN 0x9DE
09DC  DBCD     RCALL __pa_14
09DE  E21A     BC 0xA14
602:           
603:           	for (i = 0; i < OBJ_NUM; i++) {
09E0  0100     MOVLB 0x0
09E2  6BCF     CLRF i, BANKED
09E4  0E40     MOVLW 0x40
09E6  5DCF     SUBWF i, W, BANKED
09E8  E215     BC 0xA14
0A0E  0100     MOVLB 0x0
0A10  2BCF     INCF i, F, BANKED
0A12  D7E8     BRA 0x9E4
604:           		if (pixel[list_num + i].n_link != list_num) return; // invalid current object id
09EA  0EFE     MOVLW 0xFE
09EC  50DB     MOVF PLUSW2, W, ACCESS
09EE  25CF     ADDWF i, W, BANKED
09F0  EC09     CALL 0x1212, 0
09F2  F009     NOP
09F4  E10F     BNZ 0xA14
605:           		pixel_scale(list_num + i, x_scale, y_scale);
09F6  50D9     MOVF FSR2L, W, ACCESS
09F8  0FF6     ADDLW 0xF6
09FA  DB58     RCALL __pa_5
09FC  EC13     CALL 0x1226, 0
09FE  F009     NOP
0A00  25CF     ADDWF i, W, BANKED
0A02  6EE6     MOVWF POSTINC1, ACCESS
0A04  DF61     RCALL pixel_scale
0A06  6E00     MOVWF __tmp_0, ACCESS
0A08  0E09     MOVLW 0x9
0A0A  5EE1     SUBWF FSR1L, F, ACCESS
0A0C  5000     MOVF __tmp_0, W, ACCESS
10AC  6EE9     MOVWF FSR0L, ACCESS
10AE  0EFF     MOVLW 0xFF
10B0  20DA     ADDWFC FSR2H, W, ACCESS
10B2  6EEA     MOVWF FSR0H, ACCESS
10B4  CFEE     MOVFF POSTINC0, POSTINC1
10B6  FFE6     NOP
10B8  CFEE     MOVFF POSTINC0, POSTINC1
10BA  FFE6     NOP
10BC  CFEE     MOVFF POSTINC0, POSTINC1
10BE  FFE6     NOP
10C0  CFEF     MOVFF INDF0, POSTINC1
10C2  FFE6     NOP
10C4  0012     RETURN 0
606:           	}
607:           }
0A14  D358     BRA __pa_6
608:           
609:           void object_set(uint8_t list_num, uint8_t value)
0A16  DB3B     RCALL __pa_3
108E  D8AF     RCALL __pa_23
11EE  CFD9     MOVFF FSR2L, POSTINC1
11F0  FFE6     NOP
11F2  CFE1     MOVFF FSR1L, FSR2L
11F4  FFD9     NOP
11F6  0012     RETURN 0
610:           {
611:           	static uint8_t i;
612:           
613:           	if (list_num >= PIXEL_NUM) return; // check for valid range
0A18  E601     BN 0xA1C
0A1A  DBAE     RCALL __pa_14
0A1C  E217     BC 0xA4C
1090  0EFE     MOVLW 0xFE
1092  50DB     MOVF PLUSW2, W, ACCESS
1094  6E00     MOVWF __tmp_0, ACCESS
1096  6A01     CLRF 0x1, ACCESS
1098  90D8     BCF STATUS, 0, ACCESS
109A  5001     MOVF 0x1, W, ACCESS
109C  0012     RETURN 0
1178  0E00     MOVLW 0x0
117A  5C00     SUBWF __tmp_0, W, ACCESS
117C  0E01     MOVLW 0x1
117E  5801     SUBWFB 0x1, W, ACCESS
1180  0012     RETURN 0
614:           
615:           	for (i = 0; i < OBJ_NUM; i++) {
0A1E  0100     MOVLB 0x0
0A20  6BD0     CLRF i, BANKED
0A22  0E40     MOVLW 0x40
0A24  5DD0     SUBWF i, W, BANKED
0A26  E212     BC 0xA4C
0A46  0100     MOVLB 0x0
0A48  2BD0     INCF i, F, BANKED
0A4A  D7EB     BRA 0xA22
616:           		if (pixel[list_num + i].n_link != list_num) return; // invalid current object id
0A28  0EFE     MOVLW 0xFE
0A2A  50DB     MOVF PLUSW2, W, ACCESS
0A2C  25D0     ADDWF i, W, BANKED
0A2E  DBF1     RCALL __pa_26
0A30  E10D     BNZ 0xA4C
109E  D8CF     RCALL __pa_30
10A0  CFEF     MOVFF INDF0, __tmp_0
10A2  F000     NOP
10A4  0EFE     MOVLW 0xFE
10A6  50DB     MOVF PLUSW2, W, ACCESS
10A8  5C00     SUBWF __tmp_0, W, ACCESS
10AA  0012     RETURN 0
1212  DF0C     RCALL __pa_0
1214  EF4F     GOTO 0x109E
1216  F008     NOP
617:           		pixel_set(list_num + i, value);
0A32  0EFD     MOVLW 0xFD
0A34  CFDB     MOVFF PLUSW2, POSTINC1
0A36  FFE6     NOP
0A38  0EFE     MOVLW 0xFE
0A3A  50DB     MOVF PLUSW2, W, ACCESS
0A3C  25D0     ADDWF i, W, BANKED
0A3E  6EE6     MOVWF POSTINC1, ACCESS
0A40  DE8D     RCALL pixel_set
0A42  52E5     MOVF POSTDEC1, F, ACCESS
0A44  52E5     MOVF POSTDEC1, F, ACCESS
618:           	}
619:           }
0A4C  D33C     BRA __pa_6
10C6  52E5     MOVF POSTDEC1, F, ACCESS
10C8  CFE7     MOVFF INDF1, FSR2L
10CA  FFD9     NOP
10CC  0012     RETURN 0
620:           
621:           void scan_on(void)
622:           {
623:           	INTCONbits.GIEL = 1; // restart display scanner
0A4E  8CF2     BSF INTCON, 6, ACCESS
624:           }
0A50  0012     RETURN 0
625:           
626:           void scan_off(void)
627:           {
628:           	INTCONbits.GIEL = 0; // suspend list processing during matrix operations
0A52  9CF2     BCF INTCON, 6, ACCESS
629:           	LATB = 0xff;
0A54  688A     SETF LATB, ACCESS
630:           	LATC = 0x00;
0A56  6A8B     CLRF LATC, ACCESS
631:           }
0A58  0012     RETURN 0
632:           
633:           void main(void)
0A5A  CFD9     MOVFF FSR2L, POSTINC1
0A5C  FFE6     NOP
0A5E  CFE1     MOVFF FSR1L, FSR2L
0A60  FFD9     NOP
0A62  0E18     MOVLW 0x18
0A64  26E1     ADDWF FSR1L, F, ACCESS
634:           {
635:           	uint16_t touch_zero = 0;
0A66  6ADE     CLRF POSTINC2, ACCESS
0A68  6ADD     CLRF POSTDEC2, ACCESS
636:           	uint8_t x = 1, y = 1, t, i, romid = 9;
0A6A  0E01     MOVLW 0x1
0A6C  6EF3     MOVWF PRODL, ACCESS
0A6E  0E02     MOVLW 0x2
0A70  CFF3     MOVFF PRODL, PLUSW2
0A72  FFDB     NOP
0A74  0E01     MOVLW 0x1
0A76  6EF3     MOVWF PRODL, ACCESS
0A78  0E03     MOVLW 0x3
0A7A  CFF3     MOVFF PRODL, PLUSW2
0A7C  FFDB     NOP
0A7E  0E09     MOVLW 0x9
0A80  6EF3     MOVWF PRODL, ACCESS
0A82  0E06     MOVLW 0x6
0A84  CFF3     MOVFF PRODL, PLUSW2
0A86  FFDB     NOP
637:           	uint32_t move = 0, times = ROT_SPEED;
0A88  0E07     MOVLW 0x7
0A8A  6ADB     CLRF PLUSW2, ACCESS
0A8C  0E08     MOVLW 0x8
0A8E  6ADB     CLRF PLUSW2, ACCESS
0A90  0E09     MOVLW 0x9
0A92  6ADB     CLRF PLUSW2, ACCESS
0A94  0E0A     MOVLW 0xA
0A96  6ADB     CLRF PLUSW2, ACCESS
0A98  0E23     MOVLW 0x23
0A9A  6EF3     MOVWF PRODL, ACCESS
0A9C  0E0B     MOVLW 0xB
0A9E  CFF3     MOVFF PRODL, PLUSW2
0AA0  FFDB     NOP
0AA2  0E0C     MOVLW 0xC
0AA4  6ADB     CLRF PLUSW2, ACCESS
0AA6  0E0D     MOVLW 0xD
0AA8  6ADB     CLRF PLUSW2, ACCESS
0AAA  0E0E     MOVLW 0xE
0AAC  6ADB     CLRF PLUSW2, ACCESS
638:           	uint8_t obj1;
639:           	float rotation = 0.0, scaling = 2.0;
0AAE  0E10     MOVLW 0x10
0AB0  6ADB     CLRF PLUSW2, ACCESS
0AB2  0E11     MOVLW 0x11
0AB4  6ADB     CLRF PLUSW2, ACCESS
0AB6  0E12     MOVLW 0x12
0AB8  6ADB     CLRF PLUSW2, ACCESS
0ABA  0E13     MOVLW 0x13
0ABC  6ADB     CLRF PLUSW2, ACCESS
0ABE  0E14     MOVLW 0x14
0AC0  6ADB     CLRF PLUSW2, ACCESS
0AC2  0E15     MOVLW 0x15
0AC4  6ADB     CLRF PLUSW2, ACCESS
0AC6  0E16     MOVLW 0x16
0AC8  6ADB     CLRF PLUSW2, ACCESS
0ACA  0E40     MOVLW 0x40
0ACC  6EF3     MOVWF PRODL, ACCESS
0ACE  0E17     MOVLW 0x17
0AD0  CFF3     MOVFF PRODL, PLUSW2
0AD2  FFDB     NOP
640:           
641:           	display_init(); // Setup the pixel display data MUST BE CALLED FIRST
0AD4  DD72     RCALL display_init
642:           	switchState = UNPRESSED;
0AD6  6A2E     CLRF switchState, ACCESS
0AD8  6A2F     CLRF 0x2F, ACCESS
643:           
644:           	TRISA = 0b00001111; //	0..3 inputs 4..7 outputs
0ADA  0E0F     MOVLW 0xF
0ADC  6E92     MOVWF TRISA, ACCESS
645:           	LATA = 0b00000000;
0ADE  6A89     CLRF LATA, ACCESS
646:           	ANCON0 = 0b00001111; // analog inputs 0-3
0AE0  010F     MOVLB 0xF
0AE2  0E0F     MOVLW 0xF
0AE4  6F5D     MOVWF 0x5D, BANKED
647:           	ANCON1 = 0b00000000;
0AE6  010F     MOVLB 0xF
0AE8  6B5C     CLRF 0x5C, BANKED
648:           	TRISB = 0x00; //	outputs
0AEA  6A93     CLRF TRISB, ACCESS
649:           	LATB = 0xff;
0AEC  688A     SETF LATB, ACCESS
650:           	TRISC = 0x00; //	outputs
0AEE  6A94     CLRF TRISC, ACCESS
651:           	LATC = 0xff;
0AF0  688B     SETF LATC, ACCESS
652:           	TRISD = 0x00; //        outputs
0AF2  6A95     CLRF TRISD, ACCESS
653:           	LATD = 0x00;
0AF4  6A8C     CLRF LATD, ACCESS
654:           	TRISE = 0x00; //        outputs
0AF6  6A96     CLRF TRISE, ACCESS
655:           	LATE = 0x00;
0AF8  6A8D     CLRF LATE, ACCESS
656:           
657:           	OSCCON = 0x70; // internal osc
0AFA  0E70     MOVLW 0x70
0AFC  6ED3     MOVWF OSCCON, ACCESS
658:           	OSCTUNE = 0xC0;
0AFE  0EC0     MOVLW 0xC0
0B00  6E9B     MOVWF OSCTUNE, ACCESS
659:           	SLRCON = 0x00; // set slew rate to max
0B02  6A90     CLRF SLRCON, ACCESS
660:           
661:           	OpenTimer0(TIMER_INT_ON & T0_16BIT & T0_SOURCE_INT & T0_PS_1_1); // CTMU timer
0B04  0E9F     MOVLW 0x9F
0B06  6EE6     MOVWF POSTINC1, ACCESS
0B08  ECCB     CALL 0x2396, 0
0B0A  F011     NOP
0B0C  52E5     MOVF POSTDEC1, F, ACCESS
662:           	WriteTimer0(TIMERDISCHARGE); //	start timer0
0B0E  0E38     MOVLW 0x38
0B10  6EE6     MOVWF POSTINC1, ACCESS
0B12  0EC7     MOVLW 0xC7
0B14  6EE6     MOVWF POSTINC1, ACCESS
0B16  ECAF     CALL 0x235E, 0
0B18  F011     NOP
0B1A  52E5     MOVF POSTDEC1, F, ACCESS
0B1C  52E5     MOVF POSTDEC1, F, ACCESS
663:           
664:           	OpenTimer2(TIMER_INT_ON & T2_PS_1_4 & T2_POST_1_16); // PWN isr timer
0B1E  0EFD     MOVLW 0xFD
0B20  6EE6     MOVWF POSTINC1, ACCESS
0B22  ECE7     CALL 0x23CE, 0
0B24  F011     NOP
0B26  52E5     MOVF POSTDEC1, F, ACCESS
665:           	IPR1bits.TMR2IP = 0; // set timer2 low pri interrupt
0B28  929F     BCF IPR1, 1, ACCESS
666:           	WriteTimer2(PDELAY);
0B2A  0EA8     MOVLW 0xA8
0B2C  6ECC     MOVWF TMR2, ACCESS
667:           
668:           	/* HOST */
669:           	Open2USART(USART_TX_INT_ON & //FIXME need to check for correct speed
670:           		USART_RX_INT_ON &
671:           		USART_ASYNCH_MODE &
672:           		USART_EIGHT_BIT &
673:           		USART_CONT_RX &
674:           		USART_BRGH_LOW, 103); // 64mhz 9600 baud
0B2E  0E67     MOVLW 0x67
0B30  6EE6     MOVWF POSTINC1, ACCESS
0B32  6AE6     CLRF POSTINC1, ACCESS
0B34  0EEC     MOVLW 0xEC
0B36  6EE6     MOVWF POSTINC1, ACCESS
0B38  EC73     CALL 0x20E6, 0
0B3A  F010     NOP
0B3C  52E5     MOVF POSTDEC1, F, ACCESS
0B3E  52E5     MOVF POSTDEC1, F, ACCESS
0B40  52E5     MOVF POSTDEC1, F, ACCESS
675:           
676:           	/* Enable interrupt priority */
677:           	RCONbits.IPEN = 1;
0B42  8ED0     BSF RCON, 7, ACCESS
678:           	/* Enable all high priority interrupts */
679:           	INTCONbits.GIEH = 1;
0B44  8EF2     BSF INTCON, 7, ACCESS
680:           	/* Enable all low priority interrupts */
681:           	INTCONbits.GIEL = 1;
0B46  8CF2     BSF INTCON, 6, ACCESS
682:           
683:           	//		CTMU setups
684:           	ctmu_button = 0; // select start touch input
0B48  6A2D     CLRF ctmu_button, ACCESS
685:           	ctmu_setup(13, 0); // config the CTMU for touch response
0B4A  6AE6     CLRF POSTINC1, ACCESS
0B4C  0E0D     MOVLW 0xD
0B4E  6EE6     MOVWF POSTINC1, ACCESS
0B50  DC8D     RCALL ctmu_setup
0B52  52E5     MOVF POSTDEC1, F, ACCESS
0B54  52E5     MOVF POSTDEC1, F, ACCESS
686:           	ctmu_setup(13, 1);
0B56  0E01     MOVLW 0x1
0B58  6EE6     MOVWF POSTINC1, ACCESS
0B5A  0E0D     MOVLW 0xD
0B5C  6EE6     MOVWF POSTINC1, ACCESS
0B5E  DC86     RCALL ctmu_setup
0B60  52E5     MOVF POSTDEC1, F, ACCESS
0B62  52E5     MOVF POSTDEC1, F, ACCESS
687:           	ctmu_setup(13, 2);
0B64  0E02     MOVLW 0x2
0B66  6EE6     MOVWF POSTINC1, ACCESS
0B68  0E0D     MOVLW 0xD
0B6A  6EE6     MOVWF POSTINC1, ACCESS
0B6C  DC7F     RCALL ctmu_setup
0B6E  52E5     MOVF POSTDEC1, F, ACCESS
0B70  52E5     MOVF POSTDEC1, F, ACCESS
688:           	ctmu_setup(13, 3);
0B72  0E03     MOVLW 0x3
0B74  6EE6     MOVWF POSTINC1, ACCESS
0B76  0E0D     MOVLW 0xD
0B78  6EE6     MOVWF POSTINC1, ACCESS
0B7A  DC78     RCALL ctmu_setup
0B7C  52E5     MOVF POSTDEC1, F, ACCESS
0B7E  52E5     MOVF POSTDEC1, F, ACCESS
689:           	touch_zero = touch_base_calc(0);
0B80  6AE6     CLRF POSTINC1, ACCESS
0B82  EC92     CALL 0x324, 0
0B84  F001     NOP
0B86  52E5     MOVF POSTDEC1, F, ACCESS
0B88  CFF3     MOVFF PRODL, POSTINC2
0B8A  FFDE     NOP
0B8C  CFF4     MOVFF PRODH, POSTDEC2
0B8E  FFDD     NOP
690:           	touch_zero = touch_base_calc(1);
0B90  0E01     MOVLW 0x1
0B92  6EE6     MOVWF POSTINC1, ACCESS
0B94  EC92     CALL 0x324, 0
0B96  F001     NOP
0B98  52E5     MOVF POSTDEC1, F, ACCESS
0B9A  CFF3     MOVFF PRODL, POSTINC2
0B9C  FFDE     NOP
0B9E  CFF4     MOVFF PRODH, POSTDEC2
0BA0  FFDD     NOP
691:           	touch_zero = touch_base_calc(2);
0BA2  0E02     MOVLW 0x2
0BA4  6EE6     MOVWF POSTINC1, ACCESS
0BA6  EC92     CALL 0x324, 0
0BA8  F001     NOP
0BAA  52E5     MOVF POSTDEC1, F, ACCESS
0BAC  CFF3     MOVFF PRODL, POSTINC2
0BAE  FFDE     NOP
0BB0  CFF4     MOVFF PRODH, POSTDEC2
0BB2  FFDD     NOP
692:           	touch_zero = touch_base_calc(3);
0BB4  0E03     MOVLW 0x3
0BB6  6EE6     MOVWF POSTINC1, ACCESS
0BB8  EC92     CALL 0x324, 0
0BBA  F001     NOP
0BBC  52E5     MOVF POSTDEC1, F, ACCESS
0BBE  CFF3     MOVFF PRODL, POSTINC2
0BC0  FFDE     NOP
0BC2  CFF4     MOVFF PRODH, POSTDEC2
0BC4  FFDD     NOP
693:           
694:           	/* Loop forever */
695:           
696:           	while (TRUE) {
1016  D5D7     BRA 0xBC6
697:           		for (ctmu_button = 0; ctmu_button <= MAX_CHAN; ctmu_button++) {
0BC6  6A2D     CLRF ctmu_button, ACCESS
0BC8  502D     MOVF ctmu_button, W, ACCESS
0BCA  0803     SUBLW 0x3
0BCC  E201     BC 0xBD0
0BCE  D223     BRA 0x1016
1012  2A2D     INCF ctmu_button, F, ACCESS
1014  D5D9     BRA 0xBC8
698:           
699:           
700:           			touch_channel(ctmu_button);
0BD0  502D     MOVF ctmu_button, W, ACCESS
0BD2  6EE6     MOVWF POSTINC1, ACCESS
0BD4  DC2D     RCALL touch_channel
0BD6  52E5     MOVF POSTDEC1, F, ACCESS
701:           			if (ctmu_button == 0) {
0BD8  502D     MOVF ctmu_button, W, ACCESS
0BDA  E10A     BNZ 0xBF0
702:           				t = ctmu_touch(ctmu_button, FALSE); // display channel  0 only
0BDC  6AE6     CLRF POSTINC1, ACCESS
0BDE  502D     MOVF ctmu_button, W, ACCESS
0BE0  6EE6     MOVWF POSTINC1, ACCESS
0BE2  DCA2     RCALL ctmu_touch
0BE4  52E5     MOVF POSTDEC1, F, ACCESS
0BE6  52E5     MOVF POSTDEC1, F, ACCESS
0BE8  0E04     MOVLW 0x4
0BEA  CFF3     MOVFF PRODL, PLUSW2
0BEC  FFDB     NOP
703:           			} else {
0BEE  D006     BRA 0xBFC
704:           				ctmu_touch(ctmu_button, FALSE);
0BF0  6AE6     CLRF POSTINC1, ACCESS
0BF2  502D     MOVF ctmu_button, W, ACCESS
0BF4  6EE6     MOVWF POSTINC1, ACCESS
0BF6  DC98     RCALL ctmu_touch
0BF8  52E5     MOVF POSTDEC1, F, ACCESS
0BFA  52E5     MOVF POSTDEC1, F, ACCESS
705:           			}
706:           			/* CTMU testing
707:           					       // set the lower 8 bits into the pixel array for display
708:           					       for (i = 0; i < 8; i++) {
709:           						       if (((t >> i)& 0x01) == 0) {
710:           							       pixel_set(i, 0);
711:           						       } else {
712:           							       pixel_set(i, 1);
713:           						       }
714:           					       }
715:           			 */
716:           			ClrWdt(); // reset the WDT timer
0BFC  0004     CLRWDT
717:           
718:           			/* transformation testing */
719:           			if (++move >= times) {
0BFE  50D9     MOVF FSR2L, W, ACCESS
0C00  0F07     ADDLW 0x7
0C02  6EE9     MOVWF FSR0L, ACCESS
0C04  CFDA     MOVFF FSR2H, FSR0H
0C06  FFEA     NOP
0C08  2AEF     INCF INDF0, F, ACCESS
0C0A  CFEE     MOVFF POSTINC0, __tmp_0
0C0C  F000     NOP
0C0E  0E00     MOVLW 0x0
0C10  22EF     ADDWFC INDF0, F, ACCESS
0C12  CFEE     MOVFF POSTINC0, 0x1
0C14  F001     NOP
0C16  22EF     ADDWFC INDF0, F, ACCESS
0C18  CFEE     MOVFF POSTINC0, x
0C1A  F002     NOP
0C1C  22EF     ADDWFC INDF0, F, ACCESS
0C1E  CFEF     MOVFF INDF0, y
0C20  F003     NOP
0C22  50D9     MOVF FSR2L, W, ACCESS
0C24  0F0B     ADDLW 0xB
0C26  6EE9     MOVWF FSR0L, ACCESS
0C28  CFDA     MOVFF FSR2H, FSR0H
0C2A  FFEA     NOP
0C2C  50EE     MOVF POSTINC0, W, ACCESS
0C2E  5C00     SUBWF __tmp_0, W, ACCESS
0C30  50EE     MOVF POSTINC0, W, ACCESS
0C32  5801     SUBWFB 0x1, W, ACCESS
0C34  50EE     MOVF POSTINC0, W, ACCESS
0C36  5802     SUBWFB x, W, ACCESS
0C38  50EE     MOVF POSTINC0, W, ACCESS
0C3A  5803     SUBWFB y, W, ACCESS
0C3C  E201     BC 0xC40
0C3E  D1E9     BRA 0x1012
720:           
721:           				INTCONbits.GIEL = 0; // stops flashing
0C40  9CF2     BCF INTCON, 6, ACCESS
722:           				scan_off; // suspend list processing during matrix operations
723:           				if (switchState == UNPRESSED) {
0C42  502E     MOVF switchState, W, ACCESS
0C44  102F     IORWF 0x2F, W, ACCESS
0C46  E15F     BNZ 0xD06
724:           					times = ROT_SPEED;
0C48  0E23     MOVLW 0x23
0C4A  6EF3     MOVWF PRODL, ACCESS
0C4C  0E0B     MOVLW 0xB
0C4E  CFF3     MOVFF PRODL, PLUSW2
0C50  FFDB     NOP
0C52  0E0C     MOVLW 0xC
0C54  6ADB     CLRF PLUSW2, ACCESS
0C56  0E0D     MOVLW 0xD
0C58  6ADB     CLRF PLUSW2, ACCESS
0C5A  0E0E     MOVLW 0xE
0C5C  6ADB     CLRF PLUSW2, ACCESS
725:           					//pixel_init();
726:           					obj_init(0, TRUE); // clear ram display memory
0C5E  0E01     MOVLW 0x1
0C60  6EE6     MOVWF POSTINC1, ACCESS
0C62  6AE6     CLRF POSTINC1, ACCESS
0C64  DCBF     RCALL obj_init
0C66  52E5     MOVF POSTDEC1, F, ACCESS
0C68  52E5     MOVF POSTDEC1, F, ACCESS
727:           					obj1 = obj_init(romid, FALSE); // return ID for rom object into ram id
0C6A  6AE6     CLRF POSTINC1, ACCESS
0C6C  0E06     MOVLW 0x6
0C6E  CFDB     MOVFF PLUSW2, POSTINC1
0C70  FFE6     NOP
0C72  DCB8     RCALL obj_init
0C74  52E5     MOVF POSTDEC1, F, ACCESS
0C76  52E5     MOVF POSTDEC1, F, ACCESS
0C78  6EE7     MOVWF INDF1, ACCESS
0C7A  0E0F     MOVLW 0xF
0C7C  CFE7     MOVFF INDF1, PLUSW2
0C7E  FFDB     NOP
728:           					object_scale(obj1, scaling, scaling); // big to small
0C80  50D9     MOVF FSR2L, W, ACCESS
0C82  0F14     ADDLW 0x14
0C84  6EE9     MOVWF FSR0L, ACCESS
0C86  CFDA     MOVFF FSR2H, FSR0H
0C88  FFEA     NOP
0C8A  CFEE     MOVFF POSTINC0, POSTINC1
0C8C  FFE6     NOP
0C8E  CFEE     MOVFF POSTINC0, POSTINC1
0C90  FFE6     NOP
0C92  CFEE     MOVFF POSTINC0, POSTINC1
0C94  FFE6     NOP
0C96  CFEF     MOVFF INDF0, POSTINC1
0C98  FFE6     NOP
0C9A  50D9     MOVF FSR2L, W, ACCESS
0C9C  0F14     ADDLW 0x14
0C9E  6EE9     MOVWF FSR0L, ACCESS
0CA0  CFDA     MOVFF FSR2H, FSR0H
0CA2  FFEA     NOP
0CA4  CFEE     MOVFF POSTINC0, POSTINC1
0CA6  FFE6     NOP
0CA8  CFEE     MOVFF POSTINC0, POSTINC1
0CAA  FFE6     NOP
0CAC  CFEE     MOVFF POSTINC0, POSTINC1
0CAE  FFE6     NOP
0CB0  CFEF     MOVFF INDF0, POSTINC1
0CB2  FFE6     NOP
0CB4  0E0F     MOVLW 0xF
0CB6  CFDB     MOVFF PLUSW2, POSTINC1
0CB8  FFE6     NOP
0CBA  DE8E     RCALL object_scale
0CBC  6E00     MOVWF __tmp_0, ACCESS
0CBE  0E09     MOVLW 0x9
0CC0  5EE1     SUBWF FSR1L, F, ACCESS
0CC2  5000     MOVF __tmp_0, W, ACCESS
729:           					object_rotate(obj1, rotation); // CW
0CC4  50D9     MOVF FSR2L, W, ACCESS
0CC6  0F10     ADDLW 0x10
0CC8  6EE9     MOVWF FSR0L, ACCESS
0CCA  CFDA     MOVFF FSR2H, FSR0H
0CCC  FFEA     NOP
0CCE  CFEE     MOVFF POSTINC0, POSTINC1
0CD0  FFE6     NOP
0CD2  CFEE     MOVFF POSTINC0, POSTINC1
0CD4  FFE6     NOP
0CD6  CFEE     MOVFF POSTINC0, POSTINC1
0CD8  FFE6     NOP
0CDA  CFEF     MOVFF INDF0, POSTINC1
0CDC  FFE6     NOP
0CDE  0E0F     MOVLW 0xF
0CE0  CFDB     MOVFF PLUSW2, POSTINC1
0CE2  FFE6     NOP
0CE4  DE3B     RCALL object_rotate
0CE6  6E00     MOVWF __tmp_0, ACCESS
0CE8  0E05     MOVLW 0x5
0CEA  5EE1     SUBWF FSR1L, F, ACCESS
0CEC  5000     MOVF __tmp_0, W, ACCESS
730:           					object_trans(obj1, 3, 3); // move to near center
0CEE  0E03     MOVLW 0x3
0CF0  6EE6     MOVWF POSTINC1, ACCESS
0CF2  0E03     MOVLW 0x3
0CF4  6EE6     MOVWF POSTINC1, ACCESS
0CF6  0E0F     MOVLW 0xF
0CF8  CFDB     MOVFF PLUSW2, POSTINC1
0CFA  FFE6     NOP
0CFC  DE4C     RCALL object_trans
0CFE  52E5     MOVF POSTDEC1, F, ACCESS
0D00  52E5     MOVF POSTDEC1, F, ACCESS
0D02  52E5     MOVF POSTDEC1, F, ACCESS
731:           				} else {
0D04  D0D1     BRA 0xEA8
732:           					times = ROT_SPEED;
0D06  0E23     MOVLW 0x23
0D08  6EF3     MOVWF PRODL, ACCESS
0D0A  0E0B     MOVLW 0xB
0D0C  CFF3     MOVFF PRODL, PLUSW2
0D0E  FFDB     NOP
0D10  0E0C     MOVLW 0xC
0D12  6ADB     CLRF PLUSW2, ACCESS
0D14  0E0D     MOVLW 0xD
0D16  6ADB     CLRF PLUSW2, ACCESS
0D18  0E0E     MOVLW 0xE
0D1A  6ADB     CLRF PLUSW2, ACCESS
733:           					obj_init(0, TRUE); // clear ram diaplay memory
0D1C  0E01     MOVLW 0x1
0D1E  6EE6     MOVWF POSTINC1, ACCESS
0D20  6AE6     CLRF POSTINC1, ACCESS
0D22  DC60     RCALL obj_init
0D24  52E5     MOVF POSTDEC1, F, ACCESS
0D26  52E5     MOVF POSTDEC1, F, ACCESS
734:           					obj1 = obj_init(romid, FALSE); // return ID for rom object into ram id
0D28  6AE6     CLRF POSTINC1, ACCESS
0D2A  0E06     MOVLW 0x6
0D2C  CFDB     MOVFF PLUSW2, POSTINC1
0D2E  FFE6     NOP
0D30  DC59     RCALL obj_init
0D32  52E5     MOVF POSTDEC1, F, ACCESS
0D34  52E5     MOVF POSTDEC1, F, ACCESS
0D36  6EE7     MOVWF INDF1, ACCESS
0D38  0E0F     MOVLW 0xF
0D3A  CFE7     MOVFF INDF1, PLUSW2
0D3C  FFDB     NOP
735:           					object_scale(obj1, 2.0 - scaling, 2.0 - scaling); // small to big
0D3E  6A04     CLRF t, ACCESS
0D40  6A05     CLRF i, ACCESS
0D42  6A06     CLRF romid, ACCESS
0D44  0E40     MOVLW 0x40
0D46  6E07     MOVWF move, ACCESS
0D48  0E14     MOVLW 0x14
0D4A  CFDB     MOVFF PLUSW2, 0x8
0D4C  F008     NOP
0D4E  0E15     MOVLW 0x15
0D50  CFDB     MOVFF PLUSW2, 0x9
0D52  F009     NOP
0D54  0E16     MOVLW 0x16
0D56  CFDB     MOVFF PLUSW2, f
0D58  F00A     NOP
0D5A  0E17     MOVLW 0x17
0D5C  CFDB     MOVFF PLUSW2, times
0D5E  F00B     NOP
0D60  C008     MOVFF 0x8, 0x25
0D62  F025     NOP
0D64  C009     MOVFF 0x9, 0x26
0D66  F026     NOP
0D68  C00A     MOVFF f, 0x27
0D6A  F027     NOP
0D6C  C00B     MOVFF times, 0x28
0D6E  F028     NOP
0D70  C004     MOVFF t, 0x20
0D72  F020     NOP
0D74  C005     MOVFF i, 0x21
0D76  F021     NOP
0D78  C006     MOVFF romid, 0x22
0D7A  F022     NOP
0D7C  C007     MOVFF move, 0x23
0D7E  F023     NOP
0D80  EC3C     CALL 0x1278, 0
0D82  F009     NOP
0D84  C020     MOVFF 0x20, __tmp_0
0D86  F000     NOP
0D88  C021     MOVFF 0x21, 0x1
0D8A  F001     NOP
0D8C  C022     MOVFF 0x22, x
0D8E  F002     NOP
0D90  C023     MOVFF 0x23, y
0D92  F003     NOP
0D94  C000     MOVFF __tmp_0, POSTINC1
0D96  FFE6     NOP
0D98  C001     MOVFF 0x1, POSTINC1
0D9A  FFE6     NOP
0D9C  C002     MOVFF x, POSTINC1
0D9E  FFE6     NOP
0DA0  C003     MOVFF y, POSTINC1
0DA2  FFE6     NOP
0DA4  6A10     CLRF rotation, ACCESS
0DA6  6A11     CLRF 0x11, ACCESS
0DA8  6A12     CLRF 0x12, ACCESS
0DAA  0E40     MOVLW 0x40
0DAC  6E13     MOVWF xIEEE, ACCESS
0DAE  0E14     MOVLW 0x14
0DB0  CFDB     MOVFF PLUSW2, scaling
0DB2  F014     NOP
0DB4  0E15     MOVLW 0x15
0DB6  CFDB     MOVFF PLUSW2, 0x15
0DB8  F015     NOP
0DBA  0E16     MOVLW 0x16
0DBC  CFDB     MOVFF PLUSW2, 0x16
0DBE  F016     NOP
0DC0  0E17     MOVLW 0x17
0DC2  CFDB     MOVFF PLUSW2, 0x17
0DC4  F017     NOP
0DC6  C014     MOVFF scaling, 0x25
0DC8  F025     NOP
0DCA  C015     MOVFF 0x15, 0x26
0DCC  F026     NOP
0DCE  C016     MOVFF 0x16, 0x27
0DD0  F027     NOP
0DD2  C017     MOVFF 0x17, 0x28
0DD4  F028     NOP
0DD6  C010     MOVFF rotation, 0x20
0DD8  F020     NOP
0DDA  C011     MOVFF 0x11, 0x21
0DDC  F021     NOP
0DDE  C012     MOVFF 0x12, 0x22
0DE0  F022     NOP
0DE2  C013     MOVFF xIEEE, 0x23
0DE4  F023     NOP
0DE6  EC3C     CALL 0x1278, 0
0DE8  F009     NOP
0DEA  C020     MOVFF 0x20, 0xC
0DEC  F00C     NOP
0DEE  C021     MOVFF 0x21, 0xD
0DF0  F00D     NOP
0DF2  C022     MOVFF 0x22, type
0DF4  F00E     NOP
0DF6  C023     MOVFF 0x23, obj1
0DF8  F00F     NOP
0DFA  C00C     MOVFF 0xC, POSTINC1
0DFC  FFE6     NOP
0DFE  C00D     MOVFF 0xD, POSTINC1
0E00  FFE6     NOP
0E02  C00E     MOVFF type, POSTINC1
0E04  FFE6     NOP
0E06  C00F     MOVFF obj1, POSTINC1
0E08  FFE6     NOP
0E0A  0E0F     MOVLW 0xF
0E0C  CFDB     MOVFF PLUSW2, POSTINC1
0E0E  FFE6     NOP
0E10  DDE3     RCALL object_scale
0E12  6E18     MOVWF 0x18, ACCESS
0E14  0E09     MOVLW 0x9
0E16  5EE1     SUBWF FSR1L, F, ACCESS
0E18  5018     MOVF 0x18, W, ACCESS
736:           					object_rotate(obj1, 360.0 - rotation); // CCW
0E1A  6A04     CLRF t, ACCESS
0E1C  6A05     CLRF i, ACCESS
0E1E  0EB4     MOVLW 0xB4
0E20  6E06     MOVWF romid, ACCESS
0E22  0E43     MOVLW 0x43
0E24  6E07     MOVWF move, ACCESS
0E26  0E10     MOVLW 0x10
0E28  CFDB     MOVFF PLUSW2, 0x8
0E2A  F008     NOP
0E2C  0E11     MOVLW 0x11
0E2E  CFDB     MOVFF PLUSW2, 0x9
0E30  F009     NOP
0E32  0E12     MOVLW 0x12
0E34  CFDB     MOVFF PLUSW2, f
0E36  F00A     NOP
0E38  0E13     MOVLW 0x13
0E3A  CFDB     MOVFF PLUSW2, times
0E3C  F00B     NOP
0E3E  C008     MOVFF 0x8, 0x25
0E40  F025     NOP
0E42  C009     MOVFF 0x9, 0x26
0E44  F026     NOP
0E46  C00A     MOVFF f, 0x27
0E48  F027     NOP
0E4A  C00B     MOVFF times, 0x28
0E4C  F028     NOP
0E4E  C004     MOVFF t, 0x20
0E50  F020     NOP
0E52  C005     MOVFF i, 0x21
0E54  F021     NOP
0E56  C006     MOVFF romid, 0x22
0E58  F022     NOP
0E5A  C007     MOVFF move, 0x23
0E5C  F023     NOP
0E5E  EC3C     CALL 0x1278, 0
0E60  F009     NOP
0E62  C020     MOVFF 0x20, __tmp_0
0E64  F000     NOP
0E66  C021     MOVFF 0x21, 0x1
0E68  F001     NOP
0E6A  C022     MOVFF 0x22, x
0E6C  F002     NOP
0E6E  C023     MOVFF 0x23, y
0E70  F003     NOP
0E72  C000     MOVFF __tmp_0, POSTINC1
0E74  FFE6     NOP
0E76  C001     MOVFF 0x1, POSTINC1
0E78  FFE6     NOP
0E7A  C002     MOVFF x, POSTINC1
0E7C  FFE6     NOP
0E7E  C003     MOVFF y, POSTINC1
0E80  FFE6     NOP
0E82  0E0F     MOVLW 0xF
0E84  CFDB     MOVFF PLUSW2, POSTINC1
0E86  FFE6     NOP
0E88  DD69     RCALL object_rotate
0E8A  6E0C     MOVWF 0xC, ACCESS
0E8C  0E05     MOVLW 0x5
0E8E  5EE1     SUBWF FSR1L, F, ACCESS
0E90  500C     MOVF 0xC, W, ACCESS
737:           					object_trans(obj1, 3, 3);
0E92  0E03     MOVLW 0x3
0E94  6EE6     MOVWF POSTINC1, ACCESS
0E96  0E03     MOVLW 0x3
0E98  6EE6     MOVWF POSTINC1, ACCESS
0E9A  0E0F     MOVLW 0xF
0E9C  CFDB     MOVFF PLUSW2, POSTINC1
0E9E  FFE6     NOP
0EA0  DD7A     RCALL object_trans
0EA2  52E5     MOVF POSTDEC1, F, ACCESS
0EA4  52E5     MOVF POSTDEC1, F, ACCESS
0EA6  52E5     MOVF POSTDEC1, F, ACCESS
738:           				}
739:           				scan_on();
0EA8  DDD2     RCALL scan_on
740:           				rotation += ROTATION;
0EAA  6A00     CLRF __tmp_0, ACCESS
0EAC  6A01     CLRF 0x1, ACCESS
0EAE  0E40     MOVLW 0x40
0EB0  6E02     MOVWF x, ACCESS
0EB2  0E41     MOVLW 0x41
0EB4  6E03     MOVWF y, ACCESS
0EB6  50D9     MOVF FSR2L, W, ACCESS
0EB8  0F10     ADDLW 0x10
0EBA  6EE9     MOVWF FSR0L, ACCESS
0EBC  CFDA     MOVFF FSR2H, FSR0H
0EBE  FFEA     NOP
0EC0  CFEE     MOVFF POSTINC0, 0x20
0EC2  F020     NOP
0EC4  CFEE     MOVFF POSTINC0, 0x21
0EC6  F021     NOP
0EC8  CFEE     MOVFF POSTINC0, 0x22
0ECA  F022     NOP
0ECC  CFEF     MOVFF INDF0, 0x23
0ECE  F023     NOP
0ED0  C000     MOVFF __tmp_0, 0x25
0ED2  F025     NOP
0ED4  C001     MOVFF 0x1, 0x26
0ED6  F026     NOP
0ED8  C002     MOVFF x, 0x27
0EDA  F027     NOP
0EDC  C003     MOVFF y, 0x28
0EDE  F028     NOP
0EE0  EC3D     CALL 0x127A, 0
0EE2  F009     NOP
0EE4  C023     MOVFF 0x23, POSTDEC0
0EE6  FFED     NOP
0EE8  C022     MOVFF 0x22, POSTDEC0
0EEA  FFED     NOP
0EEC  C021     MOVFF 0x21, POSTDEC0
0EEE  FFED     NOP
0EF0  C020     MOVFF 0x20, INDF0
0EF2  FFEF     NOP
741:           				if (rotation > 360.00) { // spin and grow or shrink
0EF4  0E10     MOVLW 0x10
0EF6  CFDB     MOVFF PLUSW2, __tmp_0
0EF8  F000     NOP
0EFA  0E11     MOVLW 0x11
0EFC  CFDB     MOVFF PLUSW2, 0x1
0EFE  F001     NOP
0F00  0E12     MOVLW 0x12
0F02  CFDB     MOVFF PLUSW2, x
0F04  F002     NOP
0F06  0E13     MOVLW 0x13
0F08  CFDB     MOVFF PLUSW2, y
0F0A  F003     NOP
0F0C  6A25     CLRF 0x25, ACCESS
0F0E  6A26     CLRF 0x26, ACCESS
0F10  0EB4     MOVLW 0xB4
0F12  6E27     MOVWF 0x27, ACCESS
0F14  0E43     MOVLW 0x43
0F16  6E28     MOVWF 0x28, ACCESS
0F18  C000     MOVFF __tmp_0, 0x20
0F1A  F020     NOP
0F1C  C001     MOVFF 0x1, 0x21
0F1E  F021     NOP
0F20  C002     MOVFF x, 0x22
0F22  F022     NOP
0F24  C003     MOVFF y, 0x23
0F26  F023     NOP
0F28  ECEB     CALL 0x15D6, 0
0F2A  F00A     NOP
0F2C  0A01     XORLW 0x1
0F2E  E169     BNZ 0x1002
742:           					rotation = 0.0;
0F30  0E10     MOVLW 0x10
0F32  6ADB     CLRF PLUSW2, ACCESS
0F34  0E11     MOVLW 0x11
0F36  6ADB     CLRF PLUSW2, ACCESS
0F38  0E12     MOVLW 0x12
0F3A  6ADB     CLRF PLUSW2, ACCESS
0F3C  0E13     MOVLW 0x13
0F3E  6ADB     CLRF PLUSW2, ACCESS
743:           					scaling -= 0.1;
0F40  0ECD     MOVLW 0xCD
0F42  6E00     MOVWF __tmp_0, ACCESS
0F44  0ECC     MOVLW 0xCC
0F46  6E01     MOVWF 0x1, ACCESS
0F48  0ECC     MOVLW 0xCC
0F4A  6E02     MOVWF x, ACCESS
0F4C  0E3D     MOVLW 0x3D
0F4E  6E03     MOVWF y, ACCESS
0F50  50D9     MOVF FSR2L, W, ACCESS
0F52  0F14     ADDLW 0x14
0F54  6EE9     MOVWF FSR0L, ACCESS
0F56  CFDA     MOVFF FSR2H, FSR0H
0F58  FFEA     NOP
0F5A  CFEE     MOVFF POSTINC0, 0x20
0F5C  F020     NOP
0F5E  CFEE     MOVFF POSTINC0, 0x21
0F60  F021     NOP
0F62  CFEE     MOVFF POSTINC0, 0x22
0F64  F022     NOP
0F66  CFEF     MOVFF INDF0, 0x23
0F68  F023     NOP
0F6A  C000     MOVFF __tmp_0, 0x25
0F6C  F025     NOP
0F6E  C001     MOVFF 0x1, 0x26
0F70  F026     NOP
0F72  C002     MOVFF x, 0x27
0F74  F027     NOP
0F76  C003     MOVFF y, 0x28
0F78  F028     NOP
0F7A  EC3C     CALL 0x1278, 0
0F7C  F009     NOP
0F7E  C023     MOVFF 0x23, POSTDEC0
0F80  FFED     NOP
0F82  C022     MOVFF 0x22, POSTDEC0
0F84  FFED     NOP
0F86  C021     MOVFF 0x21, POSTDEC0
0F88  FFED     NOP
0F8A  C020     MOVFF 0x20, INDF0
0F8C  FFEF     NOP
744:           					if (scaling < -0.01) {
0F8E  0E14     MOVLW 0x14
0F90  CFDB     MOVFF PLUSW2, __tmp_0
0F92  F000     NOP
0F94  0E15     MOVLW 0x15
0F96  CFDB     MOVFF PLUSW2, 0x1
0F98  F001     NOP
0F9A  0E16     MOVLW 0x16
0F9C  CFDB     MOVFF PLUSW2, x
0F9E  F002     NOP
0FA0  0E17     MOVLW 0x17
0FA2  CFDB     MOVFF PLUSW2, y
0FA4  F003     NOP
0FA6  0E0A     MOVLW 0xA
0FA8  6E25     MOVWF 0x25, ACCESS
0FAA  0ED7     MOVLW 0xD7
0FAC  6E26     MOVWF 0x26, ACCESS
0FAE  0E23     MOVLW 0x23
0FB0  6E27     MOVWF 0x27, ACCESS
0FB2  0EBC     MOVLW 0xBC
0FB4  6E28     MOVWF 0x28, ACCESS
0FB6  C000     MOVFF __tmp_0, 0x20
0FB8  F020     NOP
0FBA  C001     MOVFF 0x1, 0x21
0FBC  F021     NOP
0FBE  C002     MOVFF x, 0x22
0FC0  F022     NOP
0FC2  C003     MOVFF y, 0x23
0FC4  F023     NOP
0FC6  ECF4     CALL 0x15E8, 0
0FC8  F00A     NOP
0FCA  0A01     XORLW 0x1
0FCC  E11A     BNZ 0x1002
745:           						scaling = 2.0;
0FCE  0E14     MOVLW 0x14
0FD0  6ADB     CLRF PLUSW2, ACCESS
0FD2  0E15     MOVLW 0x15
0FD4  6ADB     CLRF PLUSW2, ACCESS
0FD6  0E16     MOVLW 0x16
0FD8  6ADB     CLRF PLUSW2, ACCESS
0FDA  0E40     MOVLW 0x40
0FDC  6EF3     MOVWF PRODL, ACCESS
0FDE  0E17     MOVLW 0x17
0FE0  CFF3     MOVFF PRODL, PLUSW2
0FE2  FFDB     NOP
746:           						if (romid == 9) { // flips between two sprite ID's
0FE4  0E06     MOVLW 0x6
0FE6  50DB     MOVF PLUSW2, W, ACCESS
0FE8  0809     SUBLW 0x9
0FEA  E106     BNZ 0xFF8
747:           							romid = 13;
0FEC  0E0D     MOVLW 0xD
0FEE  6EF3     MOVWF PRODL, ACCESS
0FF0  0E06     MOVLW 0x6
0FF2  CFF3     MOVFF PRODL, PLUSW2
0FF4  FFDB     NOP
748:           						} else {
0FF6  D005     BRA 0x1002
749:           							romid = 9;
0FF8  0E09     MOVLW 0x9
0FFA  6EF3     MOVWF PRODL, ACCESS
0FFC  0E06     MOVLW 0x6
0FFE  CFF3     MOVFF PRODL, PLUSW2
1000  FFDB     NOP
750:           						}
751:           					}
752:           				}
753:           				move = 0;
1002  0E07     MOVLW 0x7
1004  6ADB     CLRF PLUSW2, ACCESS
1006  0E08     MOVLW 0x8
1008  6ADB     CLRF PLUSW2, ACCESS
100A  0E09     MOVLW 0x9
100C  6ADB     CLRF PLUSW2, ACCESS
100E  0E0A     MOVLW 0xA
1010  6ADB     CLRF PLUSW2, ACCESS
754:           			}
755:           		}
756:           	}
757:           }
1018  0E18     MOVLW 0x18
101A  5CE1     SUBWF FSR1L, W, ACCESS
101C  E202     BC 0x1022
101E  6AE1     CLRF FSR1L, ACCESS
1020  52E5     MOVF POSTDEC1, F, ACCESS
1022  6EE1     MOVWF FSR1L, ACCESS
1024  52E5     MOVF POSTDEC1, F, ACCESS
1026  CFE7     MOVFF INDF1, FSR2L
1028  FFD9     NOP
102A  0012     RETURN 0
